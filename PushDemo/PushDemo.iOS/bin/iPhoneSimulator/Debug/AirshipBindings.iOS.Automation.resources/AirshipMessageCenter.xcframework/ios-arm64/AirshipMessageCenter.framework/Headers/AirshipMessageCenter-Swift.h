#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
#ifndef AIRSHIPMESSAGECENTER_SWIFT_H
#define AIRSHIPMESSAGECENTER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AirshipBasement;
@import AirshipCore;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AirshipMessageCenter",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@protocol UAMessageCenterDisplayDelegate;
@class UAMessageCenterInbox;
@class NSString;

/// Airship Message Center module.
SWIFT_CLASS_NAMED("MessageCenter")
@interface UAMessageCenter : NSObject
/// Message center display delegate.
@property (nonatomic, strong) id <UAMessageCenterDisplayDelegate> _Nullable displayDelegate;
/// Message center inbox.
@property (nonatomic, strong) UAMessageCenterInbox * _Nonnull inbox;
/// Loads a Message center theme from a plist file.
/// \param plist The name of the plist in the bundle.
///
- (BOOL)setThemeFromPlist:(NSString * _Nonnull)plist error:(NSError * _Nullable * _Nullable)error;
/// The shared MessageCenter instance. <code>Airship.takeOff</code> must be called before accessing this instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAMessageCenter * _Nonnull shared;)
+ (UAMessageCenter * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Display the message center.
- (void)display;
/// Display the given message with animation.
/// \param messageID The messageID of the message.
///
- (void)displayWithMessageID:(NSString * _Nonnull)messageID;
/// Dismiss the message center.
- (void)dismiss;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface UAMessageCenter (SWIFT_EXTENSION(AirshipMessageCenter)) <UAComponent, UAPushableComponent>
@property (nonatomic, getter=isComponentEnabled) BOOL componentEnabled;
- (void)receivedRemoteNotification:(NSDictionary * _Nonnull)notification completionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
@end


/// Controller for the Message Center View.
SWIFT_CLASS_NAMED("MessageCenterController")
@interface UAMessageCenterController : NSObject
/// Navigates to the message ID.
/// \param messageID The message ID to navigate to.
///
- (void)navigateWithMessageID:(NSString * _Nullable)messageID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Delegate protocol for receiving callbacks related to message center.
SWIFT_PROTOCOL_NAMED("MessageCenterDisplayDelegate")
@protocol UAMessageCenterDisplayDelegate
/// Called when a message is requested to be displayed.
/// \param messageID The message ID.
///
- (void)displayMessageCenterForMessageID:(NSString * _Nonnull)messageID;
/// Called when the message center is requested to be displayed.
- (void)displayMessageCenter;
/// Called when the message center is requested to be dismissed.
- (void)dismissMessageCenter;
@end

@class UAMessageCenterMessage;
@class UAMessageCenterUser;
@class NSURL;

/// Airship Message Center inbox.
SWIFT_CLASS_NAMED("MessageCenterInbox")
@interface UAMessageCenterInbox : NSObject
- (void)getMessagesWithCompletionHandler:(void (^ _Nonnull)(NSArray<UAMessageCenterMessage *> * _Nonnull))completionHandler;
- (void)getUserWithCompletionHandler:(void (^ _Nonnull)(UAMessageCenterUser * _Nullable))completionHandler;
- (void)getUnreadCountWithCompletionHandler:(void (^ _Nonnull)(NSInteger))completionHandler;
- (void)refreshMessagesWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)markReadWithMessages:(NSArray<UAMessageCenterMessage *> * _Nonnull)messages completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (void)markReadWithMessageIDs:(NSArray<NSString *> * _Nonnull)messageIDs completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (void)deleteWithMessages:(NSArray<UAMessageCenterMessage *> * _Nonnull)messages completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (void)deleteWithMessageIDs:(NSArray<NSString *> * _Nonnull)messageIDs completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (void)messageForBodyURL:(NSURL * _Nonnull)bodyURL completionHandler:(void (^ _Nonnull)(UAMessageCenterMessage * _Nullable))completionHandler;
- (void)messageForID:(NSString * _Nonnull)messageID completionHandler:(void (^ _Nonnull)(UAMessageCenterMessage * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Airship Message Center inbox base protocol.
SWIFT_PROTOCOL_NAMED("MessageCenterInboxBaseProtocol")
@protocol UAMessageCenterInboxBaseProtocol
/// Gets the list of messages in the inbox.
///
/// returns:
/// the list of messages in the inbox.
- (void)getMessagesWithCompletionHandler:(void (^ _Nonnull)(NSArray<UAMessageCenterMessage *> * _Nonnull))completionHandler;
/// Gets the user associated to the Message Center if there is one associated already.
///
/// returns:
/// the user associated to the Message Center, otherwise <code>nil</code>.
- (void)getUserWithCompletionHandler:(void (^ _Nonnull)(UAMessageCenterUser * _Nullable))completionHandler;
/// Gets the number of messages that are currently unread.
///
/// returns:
/// the number of messages that are currently unread.
- (void)getUnreadCountWithCompletionHandler:(void (^ _Nonnull)(NSInteger))completionHandler;
/// Refreshes the list of messages in the inbox.
///
/// returns:
/// <code>true</code> if the messages was refreshed, otherwise <code>false</code>.
- (void)refreshMessagesWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Marks messages read.
/// \param messages The list of messages to be marked read.
///
- (void)markReadWithMessages:(NSArray<UAMessageCenterMessage *> * _Nonnull)messages completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Marks messages read by message IDs.
/// \param messageIDs The list of message IDs for the messages to be marked read.
///
- (void)markReadWithMessageIDs:(NSArray<NSString *> * _Nonnull)messageIDs completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Marks messages deleted.
/// \param messages The list of messages to be marked deleted.
///
- (void)deleteWithMessages:(NSArray<UAMessageCenterMessage *> * _Nonnull)messages completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Marks messages deleted by message IDs.
/// \param messageIDs The list of message IDs for the messages to be marked deleted.
///
- (void)deleteWithMessageIDs:(NSArray<NSString *> * _Nonnull)messageIDs completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Returns the message associated with a particular URL.
/// \param bodyURL The URL of the message.
///
///
/// returns:
/// The associated <code>MessageCenterMessage</code> object or nil if a message was unable to be found.
- (void)messageForBodyURL:(NSURL * _Nonnull)bodyURL completionHandler:(void (^ _Nonnull)(UAMessageCenterMessage * _Nullable))completionHandler;
/// Returns the message associated with a particular ID.
/// \param messageID The message ID.
///
///
/// returns:
/// The associated <code>MessageCenterMessage</code> object or nil if a message was unable to be found.
- (void)messageForID:(NSString * _Nonnull)messageID completionHandler:(void (^ _Nonnull)(UAMessageCenterMessage * _Nullable))completionHandler;
@end

@class NSDate;

/// Message center message.
SWIFT_CLASS_NAMED("MessageCenterMessage")
@interface UAMessageCenterMessage : NSObject
/// The message title.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The Airship message ID.
/// This ID may be used to match an incoming push notification to a specific message.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The message’s extra dictionary.
/// This dictionary can be populated with arbitrary key-value data at the time the message is composed.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull extra;
/// The URL for the message body itself.
/// This URL may only be accessed with Basic Auth credentials set to the user ID and password.
@property (nonatomic, readonly, copy) NSURL * _Nonnull bodyURL;
/// The date and time the message will expire.
/// A nil value indicates it will never expire.
@property (nonatomic, readonly, copy) NSDate * _Nullable expirationDate;
/// The date and time the message was sent (UTC).
@property (nonatomic, readonly, copy) NSDate * _Nonnull sentDate;
/// The unread status of the message.
/// <code>true</code> if the message is unread, otherwise <code>false</code>.
@property (nonatomic, readonly) BOOL unread;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface UAMessageCenterMessage (SWIFT_EXTENSION(AirshipMessageCenter))
/// The list icon of the message. <code>nil</code> if there is none.
@property (nonatomic, readonly, copy) NSString * _Nullable listIcon;
/// The subtitle of the message. <code>nil</code> if there is none.
@property (nonatomic, readonly, copy) NSString * _Nullable subtitle;
/// Parses the message ID.
/// \param userInfo The notification user info.
///
///
/// returns:
/// The message ID.
+ (NSString * _Nullable)parseMessageIDWithUserInfo:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
/// Tells if the message is expired.
/// <code>true</code> if the message is expired, otherwise <code>false</code>.
@property (nonatomic, readonly) BOOL isExpired;
@end

@class UAJavaScriptCommand;
@class WKWebView;
@protocol UAJavaScriptEnvironmentProtocol;

/// Airship native bridge extension for the Message Center.
SWIFT_CLASS_NAMED("MessageCenterNativeBridgeExtension")
@interface UAMessageCenterNativeBridgeExtension : NSObject <UANativeBridgeExtensionDelegate>
- (nonnull instancetype)initWithMessage:(UAMessageCenterMessage * _Nonnull)message user:(UAMessageCenterUser * _Nonnull)user OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, NSString *> * _Nonnull)actionsMetadataForCommand:(UAJavaScriptCommand * _Nonnull)command webView:(WKWebView * _Nonnull)webView SWIFT_WARN_UNUSED_RESULT;
- (void)extendJavaScriptEnvironment:(id <UAJavaScriptEnvironmentProtocol> _Nonnull)js webView:(WKWebView * _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// AirshipMessageCenter module loader.
/// @note For internal use only. :nodoc:
SWIFT_CLASS_NAMED("MessageCenterSDKModule")
@interface UAMessageCenterSDKModule : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model object for holding user data.
SWIFT_CLASS_NAMED("MessageCenterUser")
@interface UAMessageCenterUser : NSObject
/// The username.
@property (nonatomic, readonly, copy) NSString * _Nonnull password;
/// The password.
@property (nonatomic, readonly, copy) NSString * _Nonnull username;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface UAMessageCenterUser (SWIFT_EXTENSION(AirshipMessageCenter))
@property (nonatomic, readonly, copy) NSString * _Nonnull basicAuthString;
@end

@class UIViewController;

/// View controller for Message Center view
SWIFT_CLASS_NAMED("MessageCenterViewControllerFactory")
@interface UAMessageCenterViewController : NSObject
/// Makes a message view controller with the given theme.
/// \param themePlist A path to a theme plist
///
/// \param controller The Message Center controller
///
/// \param dismissAction Optional action to dismiss the view controller.
///
///
/// returns:
/// A view controller.
+ (UIViewController * _Nullable)makeWithThemePlist:(NSString * _Nullable)themePlist controller:(UAMessageCenterController * _Nonnull)controller error:(NSError * _Nullable * _Nullable)error dismissAction:(void (^ _Nullable)(void))dismissAction SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
