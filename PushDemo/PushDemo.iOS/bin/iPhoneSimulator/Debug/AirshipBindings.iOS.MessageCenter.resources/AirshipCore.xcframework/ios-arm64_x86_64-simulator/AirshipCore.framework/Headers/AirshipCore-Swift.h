#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
#ifndef AIRSHIPCORE_SWIFT_H
#define AIRSHIPCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AirshipBasement;
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AirshipCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSNumber;
@class NSString;
@class UACustomEvent;

/// AccountEventTemplate represents a custom account event template for the
/// application.
SWIFT_CLASS_NAMED("AccountEventTemplate")
@interface UAAccountEventTemplate : NSObject
/// The event’s value. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
@property (nonatomic, strong) NSNumber * _Nullable eventValue;
/// The event’s transaction ID. The transaction ID’s length must not exceed 255
/// characters or it will invalidate the event.
@property (nonatomic, copy) NSString * _Nullable transactionID;
/// The event’s identifier.
@property (nonatomic, copy) NSString * _Nullable userID;
/// The event’s category.
@property (nonatomic, copy) NSString * _Nullable category;
/// The event’s type.
@property (nonatomic, copy) NSString * _Nullable type;
/// Factory method for creating a registered account event template.
///
/// returns:
/// An Account event template instance
+ (UAAccountEventTemplate * _Nonnull)registeredTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a registered account event template with a value from a string.
/// \param valueString The value of the event as a string. The value must be a valid
/// number between -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// An Account event template instance
+ (UAAccountEventTemplate * _Nonnull)registeredTemplateWithValueFromString:(NSString * _Nullable)valueString SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a registered account event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// An Account event template instance
+ (UAAccountEventTemplate * _Nonnull)registeredTemplateWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a logged in account event template.
///
/// returns:
/// An Account event template instance
+ (UAAccountEventTemplate * _Nonnull)loggedInTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a logged in account event template with a value from a string.
/// \param valueString The value of the event as a string. The value must be a valid
/// number between -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// An Account event template instance
+ (UAAccountEventTemplate * _Nonnull)loggedInTemplateWithValueFromString:(NSString * _Nullable)valueString SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a logged in account event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// An Account event template instance
+ (UAAccountEventTemplate * _Nonnull)loggedInTemplateWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a logged out account event template.
///
/// returns:
/// An Account event template instance
+ (UAAccountEventTemplate * _Nonnull)loggedOutTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a logged out account event template with a value from a string.
/// \param valueString The value of the event as a string. The value must be a valid
/// number between -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// An Account event template instance
+ (UAAccountEventTemplate * _Nonnull)loggedOutTemplateWithValueFromString:(NSString * _Nullable)valueString SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a logged out account event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// An Account event template instance
+ (UAAccountEventTemplate * _Nonnull)loggedOutTemplateWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Creates the custom account event.
- (UACustomEvent * _Nullable)createEvent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum UAActionSituation : NSInteger;

/// A helper class for running actions by name or by reference.
SWIFT_CLASS_NAMED("ActionRunner")
@interface UAActionRunner : NSObject
+ (void)runActions:(NSDictionary<NSString *, id> * _Nonnull)actionsPayload situation:(enum UAActionSituation)situation completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Action situations
typedef SWIFT_ENUM_NAMED(NSInteger, UAActionSituation, "ActionSituation", open) {
/// Action invoked manually
  UAActionSituationManualInvocation = 0,
/// Action invoked from the app being launched from a push notification
  UAActionSituationLaunchedFromPush = 1,
/// Action invoked from a foreground push
  UAActionSituationForegroundPush = 2,
/// Action invoked from a background push
  UAActionSituationBackgroundPush = 3,
/// Action invoked from a web view
  UAActionSituationWebViewInvocation = 4,
/// Action invoked from a foreground action button
  UAActionSituationForegroundInteractiveButton = 5,
/// Action invoked from a background action button
  UAActionSituationBackgroundInteractiveButton = 6,
/// Action invoked from an automation
  UAActionSituationAutomation = 7,
};

@class UIPopoverPresentationController;
@class UIView;
@class UIActivity;

SWIFT_CLASS_NAMED("ActivityViewController")
@interface UAActivityViewController : UIActivityViewController <UIPopoverControllerDelegate, UIPopoverPresentationControllerDelegate>
@property (nonatomic, copy) void (^ _Nullable dismissalBlock)(void);
- (void)viewDidDisappear:(BOOL)animated;
/// Returns the desired source rect dimensions for the popover.
///
/// returns:
/// popover dimensions.
- (CGRect)sourceRect SWIFT_WARN_UNUSED_RESULT;
- (void)popoverPresentationController:(UIPopoverPresentationController * _Nonnull)popoverPresentationController willRepositionPopoverToRect:(CGRect * _Nonnull)rect inView:(UIView * _Nonnull * _Nonnull)view;
- (nonnull instancetype)initWithActivityItems:(NSArray * _Nonnull)activityItems applicationActivities:(NSArray<UIActivity *> * _Nullable)applicationActivities OBJC_DESIGNATED_INITIALIZER;
@end

@class UARuntimeConfig;
@class UAApplicationMetrics;
@class UAPermissionsManager;
@protocol UAJavaScriptCommandDelegate;
@class UAChannelCapture;
@protocol UADeepLinkDelegate;
@class UAURLAllowList;
@class UALocaleManager;
@class UAPrivacyManager;
@protocol UAComponent;
@class UAPush;
@class UAContact;
@class UAAnalytics;
@class UAChannel;
@class UAConfig;
@protocol UAirshipLogHandler;
enum UALogLevel : NSInteger;
@class NSURL;

/// Main entry point for Airship. The application must call <code>takeOff</code> during <code>application:didFinishLaunchingWithOptions:</code>
/// before accessing any instances on Airship or Airship modules.
SWIFT_CLASS_NAMED("Airship")
@interface UAirship : NSObject
/// Airship deep link scheme
/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deepLinkScheme;)
+ (NSString * _Nonnull)deepLinkScheme SWIFT_WARN_UNUSED_RESULT;
/// Notification when Airship is ready.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull airshipReadyNotification;)
+ (NSNotificationName _Nonnull)airshipReadyNotification SWIFT_WARN_UNUSED_RESULT;
/// Airship ready channel ID key. Only available if <code>extendedBroadcastEnabled</code> is true in config.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull airshipReadyChannelIdentifier;)
+ (NSString * _Nonnull)airshipReadyChannelIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Airship ready app key. Only available if <code>extendedBroadcastEnabled</code> is true in config.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull airshipReadyAppKey;)
+ (NSString * _Nonnull)airshipReadyAppKey SWIFT_WARN_UNUSED_RESULT;
/// Airship ready payload version. Only available if <code>extendedBroadcastEnabled</code> is true in config.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull airshipReadyPayloadVersion;)
+ (NSString * _Nonnull)airshipReadyPayloadVersion SWIFT_WARN_UNUSED_RESULT;
/// A flag that checks if the Airship instance is available. <code>true</code> if available, otherwise <code>false</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isFlying;)
+ (BOOL)isFlying SWIFT_WARN_UNUSED_RESULT;
/// Airship config.
@property (nonatomic, readonly, strong) UARuntimeConfig * _Nonnull config;
/// Stores common application metrics such as last open.
@property (nonatomic, readonly, strong) UAApplicationMetrics * _Nonnull applicationMetrics;
/// The Airship permissions manager.
@property (nonatomic, readonly, strong) UAPermissionsManager * _Nonnull permissionsManager;
/// A user configurable UAJavaScriptCommandDelegate
/// note:
/// this delegate is not retained.
@property (nonatomic, weak) id <UAJavaScriptCommandDelegate> _Nullable javaScriptCommandDelegate;
/// The channel capture utility.
@property (nonatomic, readonly, strong) UAChannelCapture * _Nonnull channelCapture;
/// A user configurable deep link delegate.
/// note:
/// this delegate is not retained.
@property (nonatomic, weak) id <UADeepLinkDelegate> _Nullable deepLinkDelegate;
/// The URL allow list used for validating URLs for landing pages,
/// wallet action, open external URL action, deep link
/// action (if delegate is not set), and HTML in-app messages.
@property (nonatomic, readonly, strong) UAURLAllowList * _Nonnull URLAllowList;
/// The locale manager.
@property (nonatomic, readonly, strong) UALocaleManager * _Nonnull localeManager;
/// The privacy manager
@property (nonatomic, readonly, strong) UAPrivacyManager * _Nonnull privacyManager;
/// note:
/// For internal use only. :nodoc:
@property (nonatomic, readonly, copy) NSArray<id <UAComponent>> * _Nonnull components;
/// Shared Airship instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAirship * _Nonnull shared;)
+ (UAirship * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Shared Push instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAPush * _Nonnull push;)
+ (UAPush * _Nonnull)push SWIFT_WARN_UNUSED_RESULT;
/// Shared Contact instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAContact * _Nonnull contact;)
+ (UAContact * _Nonnull)contact SWIFT_WARN_UNUSED_RESULT;
/// Shared Analytics instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAAnalytics * _Nonnull analytics;)
+ (UAAnalytics * _Nonnull)analytics SWIFT_WARN_UNUSED_RESULT;
/// Shared Channel instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAChannel * _Nonnull channel;)
+ (UAChannel * _Nonnull)channel SWIFT_WARN_UNUSED_RESULT;
/// Initializes Airship. Config will be read from <code>AirshipConfig.plist</code>.
/// \param launchOptions The launch options passed into <code>application:didFinishLaunchingWithOptions:</code>.
///
+ (void)takeOffWithLaunchOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
/// Initializes Airship.
/// \param config The Airship config.
///
/// \param launchOptions The launch options passed into <code>application:didFinishLaunchingWithOptions:</code>.
///
+ (void)takeOff:(UAConfig * _Nullable)config launchOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
/// Airship log handler. All Airship log will be routed through the handler.
/// The default logger will os.Logger on iOS 14+, and <code>print</code> on older devices.
/// Custom loggers should be set before takeOff.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <UAirshipLogHandler> _Nonnull logHandler;)
+ (id <UAirshipLogHandler> _Nonnull)logHandler SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogHandler:(id <UAirshipLogHandler> _Nonnull)newValue;
/// Airship log level. The log level defaults to <code>.debug</code> in developer mode,
/// Sets the Airship log level. The log level defaults to <code>.debug</code> in developer mode,
/// and <code>.error</code> in production. Values set before <code>takeOff</code> will be overridden by
/// the value from the AirshipConfig.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum UALogLevel logLevel;)
+ (enum UALogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum UALogLevel)newValue;
/// note:
/// For internal use only. :nodoc:
+ (id <UAComponent> _Nullable)componentForClassName:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Processes a deep link.
/// note:
/// For internal use only. :nodoc:
/// <code>uairship://</code> deep links will be handled internally. All other deep links will be forwarded to the deep link delegate.
/// \param deepLink The deep link.
///
/// \param completionHandler The result. <code>true</code> if the link was able to be processed, otherwise <code>false</code>.
///
- (void)deepLink:(NSURL * _Nonnull)deepLink completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol UAEvent;
@class UAAssociatedIdentifiers;
enum UASDKExtension : NSInteger;

/// Analytics protocol
/// For internal use only. :nodoc:
SWIFT_PROTOCOL_NAMED("AnalyticsProtocol")
@protocol UAAnalyticsProtocol
/// The conversion send ID. :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable conversionSendID;
/// The conversion push metadata. :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable conversionPushMetadata;
/// The current session ID.
@property (nonatomic, readonly, copy) NSString * _Nullable sessionID;
/// Triggers an analytics event.
/// \param event The event to be triggered
///
- (void)addEvent:(id <UAEvent> _Nonnull)event;
/// Associates identifiers with the device. This call will add a special event
/// that will be batched and sent up with our other analytics events. Previous
/// associated identifiers will be replaced.
/// For internal use only. :nodoc:
/// \param associatedIdentifiers The associated identifiers.
///
- (void)associateDeviceIdentifiers:(UAAssociatedIdentifiers * _Nonnull)associatedIdentifiers;
/// The device’s current associated identifiers.
///
/// returns:
/// The device’s current associated identifiers.
- (UAAssociatedIdentifiers * _Nonnull)currentAssociatedDeviceIdentifiers SWIFT_WARN_UNUSED_RESULT;
/// Initiates screen tracking for a specific app screen, must be called once per tracked screen.
/// \param screen The screen’s identifier.
///
- (void)trackScreen:(NSString * _Nullable)screen;
/// Registers an SDK extension with the analytics module.
/// For internal use only. :nodoc:
/// \param ext The SDK extension.
///
/// \param version The version.
///
- (void)registerSDKExtension:(enum UASDKExtension)ext version:(NSString * _Nonnull)version;
@end


/// The Analytics object provides an interface to the Airship Analytics API.
SWIFT_CLASS_NAMED("AirshipAnalytics")
@interface UAAnalytics : NSObject <UAComponent, UAAnalyticsProtocol>
/// The shared Analytics instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAAnalytics * _Nonnull shared;)
+ (UAAnalytics * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Screen key for ScreenTracked notification. :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull screenKey;)
+ (NSString * _Nonnull)screenKey SWIFT_WARN_UNUSED_RESULT;
/// Event key for customEventAdded and regionEventAdded notifications.. :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull eventKey;)
+ (NSString * _Nonnull)eventKey SWIFT_WARN_UNUSED_RESULT;
/// Custom event added notification. :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull customEventAdded;)
+ (NSNotificationName _Nonnull)customEventAdded SWIFT_WARN_UNUSED_RESULT;
/// Region event added notification. :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull regionEventAdded;)
+ (NSNotificationName _Nonnull)regionEventAdded SWIFT_WARN_UNUSED_RESULT;
/// Screen tracked notification,. :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull screenTracked;)
+ (NSNotificationName _Nonnull)screenTracked SWIFT_WARN_UNUSED_RESULT;
/// The conversion send ID. :nodoc:
@property (nonatomic, copy) NSString * _Nullable conversionSendID;
/// The conversion push metadata. :nodoc:
@property (nonatomic, copy) NSString * _Nullable conversionPushMetadata;
/// The current session ID.
@property (nonatomic, readonly, copy) NSString * _Nullable sessionID;
@property (nonatomic, getter=isComponentEnabled) BOOL componentEnabled;
/// Triggers an analytics event.
/// \param event The event to be triggered
///
- (void)addEvent:(id <UAEvent> _Nonnull)event;
/// Associates identifiers with the device. This call will add a special event
/// that will be batched and sent up with our other analytics events. Previous
/// associated identifiers will be replaced.
/// For internal use only. :nodoc:
/// \param associatedIdentifiers The associated identifiers.
///
- (void)associateDeviceIdentifiers:(UAAssociatedIdentifiers * _Nonnull)associatedIdentifiers;
/// The device’s current associated identifiers.
///
/// returns:
/// The device’s current associated identifiers.
- (UAAssociatedIdentifiers * _Nonnull)currentAssociatedDeviceIdentifiers SWIFT_WARN_UNUSED_RESULT;
/// Initiates screen tracking for a specific app screen, must be called once per tracked screen.
/// \param screen The screen’s identifier.
///
- (void)trackScreen:(NSString * _Nullable)screen;
/// Registers an SDK extension with the analytics module.
/// For internal use only. :nodoc:
/// version:
/// The version.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     ext: The SDK extension.
///   </li>
/// </ul>
- (void)registerSDKExtension:(enum UASDKExtension)ext version:(NSString * _Nonnull)version;
- (void)airshipReady;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSDate;

SWIFT_PROTOCOL_NAMED("AirshipAutomationAudienceCheckerProtocol")
@protocol UAAutomationAudienceCheckerProtocol
- (void)evaluateWithAudience:(id _Nonnull)audience isNewUserEvaluationDate:(NSDate * _Nonnull)isNewUserEvaluationDate contactID:(NSString * _Nullable)contactID completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
@end


SWIFT_CLASS_NAMED("AirshipAutomationAudienceChecker")
@interface UAAutomationAudienceChecker : NSObject <UAAutomationAudienceCheckerProtocol>
- (void)evaluateWithAudience:(id _Nonnull)audience isNewUserEvaluationDate:(NSDate * _Nonnull)isNewUserEvaluationDate contactID:(NSString * _Nullable)contactID completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class UATagEditor;
@class UATagGroupsEditor;
@class UASubscriptionListEditor;
@class UAAttributesEditor;
@class UAAttributeMutations;

/// This singleton provides an interface to the channel functionality.
SWIFT_CLASS_NAMED("AirshipChannel")
@interface UAChannel : NSObject <UAComponent>
/// Notification event when the channel is created.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull channelCreatedEvent;)
+ (NSNotificationName _Nonnull)channelCreatedEvent SWIFT_WARN_UNUSED_RESULT;
/// Channel ID key for channelCreatedEvent and channelUpdatedEvent.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull channelIdentifierKey;)
+ (NSString * _Nonnull)channelIdentifierKey SWIFT_WARN_UNUSED_RESULT;
/// Channel existing key for channelCreatedEvent.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull channelExistingKey;)
+ (NSString * _Nonnull)channelExistingKey SWIFT_WARN_UNUSED_RESULT;
/// Notification event when the channel is updated.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull channelUpdatedEvent;)
+ (NSNotificationName _Nonnull)channelUpdatedEvent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull legacyTagsSettingsKey;)
+ (NSString * _Nonnull)legacyTagsSettingsKey SWIFT_WARN_UNUSED_RESULT;
/// The channel identifier.
@property (nonatomic, readonly, copy) NSString * _Nullable identifier;
/// The channel tags.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull tags;
/// Allows setting tags from the device. Tags can be set from either the server or the device, but not both (without synchronizing the data),
/// so use this flag to explicitly enable or disable the device-side flags.
/// Set this to <code>false</code> to prevent the device from sending any tag information to the server when using server-side tagging. Defaults to <code>true</code>.
@property (nonatomic) BOOL isChannelTagRegistrationEnabled;
@property (nonatomic, getter=isComponentEnabled) BOOL componentEnabled;
/// The shared Channel instance.
/// <ul>
///   <li>
///     Returns The shared Channel instance.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAChannel * _Nonnull shared;)
+ (UAChannel * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Begins a tag editing session
///
/// returns:
/// A TagEditor
- (UATagEditor * _Nonnull)editTags SWIFT_WARN_UNUSED_RESULT;
/// Begins a tag editing session
/// \param editorBlock A tag editor block.
///
///
/// returns:
/// A TagEditor
- (void)editTags:(SWIFT_NOESCAPE void (^ _Nonnull)(UATagEditor * _Nonnull))editorBlock;
/// Begins a tag group editing session
///
/// returns:
/// A TagGroupsEditor
- (UATagGroupsEditor * _Nonnull)editTagGroups SWIFT_WARN_UNUSED_RESULT;
/// Begins a tag group editing session
/// \param editorBlock A tag group editor block.
///
///
/// returns:
/// A TagGroupsEditor
- (void)editTagGroups:(SWIFT_NOESCAPE void (^ _Nonnull)(UATagGroupsEditor * _Nonnull))editorBlock;
/// Begins a subscription list editing session
///
/// returns:
/// A SubscriptionListEditor
- (UASubscriptionListEditor * _Nonnull)editSubscriptionLists SWIFT_WARN_UNUSED_RESULT;
/// Begins a subscription list editing session
/// \param editorBlock A subscription list editor block.
///
///
/// returns:
/// A SubscriptionListEditor
- (void)editSubscriptionLists:(SWIFT_NOESCAPE void (^ _Nonnull)(UASubscriptionListEditor * _Nonnull))editorBlock;
/// Fetches subscription lists.
///
/// returns:
/// Subscriptions lists.
- (void)fetchSubscriptionListsWithCompletionHandler:(void (^ _Nonnull)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completionHandler;
/// Begins an attributes editing session
///
/// returns:
/// An AttributesEditor
- (UAAttributesEditor * _Nonnull)editAttributes SWIFT_WARN_UNUSED_RESULT;
/// Begins an attributes editing session
/// \param editorBlock An attributes editor block. 
///
///
/// returns:
/// An AttributesEditor
- (void)editAttributes:(SWIFT_NOESCAPE void (^ _Nonnull)(UAAttributesEditor * _Nonnull))editorBlock;
/// Adds a device tag.
/// \param tag The tag.
///
- (void)addTag:(NSString * _Nonnull)tag SWIFT_DEPRECATED_MSG("Use editTags instead.");
/// Adds a list of device tags.
/// \param tags The tags.
///
- (void)addTags:(NSArray<NSString *> * _Nonnull)tags SWIFT_DEPRECATED_MSG("Use editTags instead.");
/// Removes a device tag.
/// \param tag The tag.
///
- (void)removeTag:(NSString * _Nonnull)tag SWIFT_DEPRECATED_MSG("Use editTags instead.");
/// Removes a list of device tags.
/// \param tags The tag.
///
- (void)removeTags:(NSArray<NSString *> * _Nonnull)tags SWIFT_DEPRECATED_MSG("Use editTags instead.");
/// Adds a list of tags to a group.
/// \param tags The tags.
///
/// \param group The tag group.
///
- (void)addTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)group SWIFT_DEPRECATED_MSG("Use editTagGroups instead.");
/// Removes a list of tags from a group.
/// \param tags The tags.
///
/// \param group The tag group.
///
- (void)removeTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)group SWIFT_DEPRECATED_MSG("Use editTagGroups instead.");
/// Sets a list of tags to a group.
/// \param tags The tags.
///
/// \param group The tag group.
///
- (void)setTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)group SWIFT_DEPRECATED_MSG("Use editTagGroups instead.");
/// Applies attribute mutations.
/// \param mutations The mutations.
///
- (void)applyAttributeMutations:(UAAttributeMutations * _Nonnull)mutations SWIFT_DEPRECATED_MSG("Use editAttributes instead.");
/// Enables channel creation if channelCreationDelayEnabled was set to <code>YES</code> in the config.
- (void)enableChannelCreation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class UNNotificationResponse;
@class UNNotification;

/// Internal protocol to fan out push handling to UAComponents.
/// note:
/// For internal use only. :nodoc:
SWIFT_PROTOCOL_NAMED("PushableComponent")
@protocol UAPushableComponent
@optional
/// Called when a remote notification is received.
/// \param notification The notification.
///
/// \param completionHandler The completion handler that must be called with the fetch result.
///
- (void)receivedRemoteNotification:(NSDictionary * _Nonnull)notification completionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
/// Called when a notification response is received.
/// \param response The notification response.
///
/// \param completionHandler The completion handler that must be called after processing the response.
///
- (void)receivedNotificationResponse:(UNNotificationResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Called when a notification is about to be presented.
/// \param notification The notification to be presented.
///
/// \param options Default presentation options.
///
///
/// returns:
/// The presentation options.
- (UNNotificationPresentationOptions)presentationOptionsForNotification:(UNNotification * _Nonnull)notification defaultPresentationOptions:(UNNotificationPresentationOptions)options SWIFT_WARN_UNUSED_RESULT;
@end


@interface UAChannel (SWIFT_EXTENSION(AirshipCore)) <UAPushableComponent>
- (void)receivedRemoteNotification:(NSDictionary * _Nonnull)notification completionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
@end

enum UACloudSite : NSInteger;

/// The Config object provides an interface for passing common configurable values to <code>UAirship</code>.
/// The simplest way to use this class is to add an AirshipConfig.plist file in your app’s bundle and set
/// the desired options.
SWIFT_CLASS_NAMED("AirshipConfig")
@interface UAConfig : NSObject <NSCopying>
/// The development app key. This should match the application on go.urbanairship.com that is
/// configured with your development push certificate.
@property (nonatomic, copy) NSString * _Nullable developmentAppKey;
/// The development app secret. This should match the application on go.urbanairship.com that is
/// configured with your development push certificate.
@property (nonatomic, copy) NSString * _Nullable developmentAppSecret;
/// The production app key. This should match the application on go.urbanairship.com that is
/// configured with your production push certificate. This is used for App Store, Ad-Hoc and Enterprise
/// app configurations.
@property (nonatomic, copy) NSString * _Nullable productionAppKey;
/// The production app secret. This should match the application on go.urbanairship.com that is
/// configured with your production push certificate. This is used for App Store, Ad-Hoc and Enterprise
/// app configurations.
@property (nonatomic, copy) NSString * _Nullable productionAppSecret;
/// The log level used for development apps. Defaults to <code>debug</code>.
@property (nonatomic) enum UALogLevel developmentLogLevel;
/// The log level used for production apps. Defaults to <code>error</code>.
@property (nonatomic) enum UALogLevel productionLogLevel;
/// Auto pause InAppAutomation on launch. Defaults to <code>false</code>
@property (nonatomic) BOOL autoPauseInAppAutomationOnLaunch;
/// The airship cloud site. Defaults to <code>us</code>.
@property (nonatomic) enum UACloudSite site;
/// :nodoc:
@property (nonatomic) UAFeatures enabledFeatures;
/// The default app key. Depending on the <code>inProduction</code> status,
/// <code>developmentAppKey</code> or <code>productionAppKey</code> will take priority.
@property (nonatomic, copy) NSString * _Nonnull defaultAppKey;
/// The default app secret. Depending on the <code>inProduction</code> status,
/// <code>developmentAppSecret</code> or <code>productionAppSecret</code> will take priority.
@property (nonatomic, copy) NSString * _Nonnull defaultAppSecret;
/// The production status of this application. This may be set directly, or it may be determined
/// automatically if the <code>detectProvisioningMode</code> flag is set to <code>true</code>.
/// If neither <code>inProduction</code> nor <code>detectProvisioningMode</code> is set,
/// <code>detectProvisioningMode</code> will be enabled.
@property (nonatomic) BOOL inProduction;
/// Apps may be set to self-configure based on the APS-environment set in the
/// embedded.mobileprovision file by using <code>detectProvisioningMode</code>. If
/// <code>detectProvisioningMode</code> is set to <code>true</code>, the <code>inProduction</code> value will
/// be determined at runtime by reading the provisioning profile. If it is set to
/// <code>false</code> (the default), the inProduction flag may be set directly or by using the
/// AirshipConfig.plist file.
/// When this flag is enabled, the <code>inProduction</code> will fallback to <code>true</code> for safety
/// so that the production keys will always be used if the profile cannot be read
/// in a released app. Simulator builds do not include the profile, and the
/// <code>detectProvisioningMode</code> flag does not have any effect in cases where a profile
/// is not present. When a provisioning file is not present, the app will fall
/// back to the <code>inProduction</code> property as set in code or the AirshipConfig.plist
/// file.
@property (nonatomic) BOOL detectProvisioningMode;
/// NOTE: For internal use only. :nodoc:
@property (nonatomic, copy) NSString * _Nullable profilePath;
/// If enabled, the Airship library automatically registers for remote notifications when push is enabled
/// and intercepts incoming notifications in both the foreground and upon launch.
/// Defaults to <code>true</code>. If this is disabled, you will need to register for remote notifications
/// in application:didFinishLaunchingWithOptions: and forward all notification-related app delegate
/// calls to UAPush and UAInbox.
@property (nonatomic) BOOL isAutomaticSetupEnabled;
/// An array of <code>UAURLAllowList</code> entry strings.
/// This url allow list is used for validating which URLs can be opened or load the JavaScript native bridge.
/// It affects landing pages, the open external URL and wallet actions,
/// deep link actions (if a delegate is not set), and HTML in-app messages.
/// note:
/// See <code>UAURLAllowList</code> for pattern entry syntax.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull URLAllowList;
/// An array of<code> UAURLAllowList</code> entry strings.
/// This url allow list is used for validating which URLs can load the JavaScript native bridge,
/// It affects Landing Pages, Message Center and HTML In-App Messages.
/// note:
/// See <code>UAURLAllowList</code> for pattern entry syntax.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull URLAllowListScopeJavaScriptInterface;
/// An array of UAURLAllowList entry strings.
/// This url allow list is used for validating which URLs can be opened.
/// It affects landing pages, the open external URL and wallet actions,
/// deep link actions (if a delegate is not set), and HTML in-app messages.
/// note:
/// See <code>UAURLAllowList</code> for pattern entry syntax.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull URLAllowListScopeOpenURL;
/// The iTunes ID used for Rate App Actions.
@property (nonatomic, copy) NSString * _Nullable itunesID;
/// Toggles Airship analytics. Defaults to <code>true</code>. If set to <code>false</code>, many Airship features will not be
/// available to this application.
@property (nonatomic) BOOL isAnalyticsEnabled;
/// The Airship default message center style configuration file.
@property (nonatomic, copy) NSString * _Nullable messageCenterStyleConfig;
/// If set to <code>true</code>, the Airship user will be cleared if the application is
/// restored on a different device from an encrypted backup.
/// Defaults to <code>false</code>.
@property (nonatomic) BOOL clearUserOnAppRestore;
/// If set to <code>true</code>, the application will clear the previous named user ID on a
/// re-install. Defaults to <code>false</code>.
@property (nonatomic) BOOL clearNamedUserOnAppRestore;
/// Flag indicating whether channel capture feature is enabled or not.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL isChannelCaptureEnabled;
/// Flag indicating whether delayed channel creation is enabled. If set to <code>true</code> channel
/// creation will not occur until channel creation is manually enabled.
/// Defaults to <code>false</code>.
@property (nonatomic) BOOL isChannelCreationDelayEnabled;
/// Flag indicating whether extended broadcasts are enabled. If set to <code>true</code> the AirshipReady NSNotification
/// will contain additional data: the channel identifier and the app key.
/// Defaults to <code>false</code>.
@property (nonatomic) BOOL isExtendedBroadcastsEnabled;
/// If set to ‘YES’, the Airship SDK will request authorization to use
/// notifications from the user. Apps that set this flag to <code>false</code> are
/// required to request authorization themselves.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL requestAuthorizationToUseNotifications;
/// If set to <code>true</code>, the SDK will wait for an initial remote config instead of falling back on default API URLs.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL requireInitialRemoteConfigEnabled;
/// The Airship URL used to pull the initial config. This should only be set
/// if you are using custom domains that forward to Airship.
@property (nonatomic, copy) NSString * _Nullable initialConfigURL;
/// The Airship device API url.
/// note:
/// This option is reserved for internal debugging. :nodoc:
@property (nonatomic, copy) NSString * _Nullable deviceAPIURL;
/// The Airship analytics API url.
/// note:
/// This option is reserved for internal debugging. :nodoc:
@property (nonatomic, copy) NSString * _Nullable analyticsURL;
/// The Airship remote data API url.
/// note:
/// This option is reserved for internal debugging. :nodoc:
@property (nonatomic, copy) NSString * _Nullable remoteDataAPIURL;
/// The Airship chat API URL.
@property (nonatomic, copy) NSString * _Nullable chatURL;
/// The Airship web socket URL.
@property (nonatomic, copy) NSString * _Nullable chatWebSocketURL;
/// Returns the resolved app key.
///
/// returns:
/// The resolved app key or an empty string.
@property (nonatomic, readonly, copy) NSString * _Nonnull appKey;
/// Returns the resolved app secret.
///
/// returns:
/// The resolved app key or an empty string.
@property (nonatomic, readonly, copy) NSString * _Nonnull appSecret;
/// Returns the resolved log level.
///
/// returns:
/// The resolved log level.
@property (nonatomic, readonly) enum UALogLevel logLevel;
/// Creates an instance using the values set in the <code>AirshipConfig.plist</code> file.
///
/// returns:
/// A config with values from <code>AirshipConfig.plist</code> file.
+ (UAConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance using the values found in the specified <code>.plist</code> file.
/// \param path The path of the specified file.
///
///
/// returns:
/// A config with values from the specified file.
+ (UAConfig * _Nonnull)configWithContentsOfFile:(NSString * _Nullable)path SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance with empty values.
///
/// returns:
/// A config with empty values.
+ (UAConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance using the values found in the specified <code>.plist</code> file.
/// \param path The path of the specified file.
///
///
/// returns:
/// A config with values from the specified file.
- (nonnull instancetype)initWithContentsOfFile:(NSString * _Nullable)path;
/// Creates an instance with empty values.
///
/// returns:
/// A Config with empty values.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Validates the current configuration. In addition to performing a strict validation, this method
/// will log warnings and common configuration errors.
///
/// returns:
/// <code>true</code> if the current configuration is valid, otherwise <code>false</code>.
- (BOOL)validate SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isProductionProvisioningProfile:(NSString * _Nonnull)profilePath SWIFT_WARN_UNUSED_RESULT;
- (void)setValue:(id _Nullable)value forUndefinedKey:(NSString * _Nonnull)key;
@end

@class UAEmailRegistrationOptions;
@class UASMSRegistrationOptions;
@class UAOpenRegistrationOptions;
enum UAChannelType : NSInteger;
@class UAScopedSubscriptionListEditor;
@class UAChannelScopes;

/// Airship contact. A contact is distinct from a channel and  represents a “user”
/// within Airship. Contacts may be named and have channels associated with it.
SWIFT_CLASS_NAMED("AirshipContact")
@interface UAContact : NSObject <UAComponent>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull contactConflictEvent;)
+ (NSNotificationName _Nonnull)contactConflictEvent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull contactConflictEventKey;)
+ (NSString * _Nonnull)contactConflictEventKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger maxNamedUserIDLength;)
+ (NSInteger)maxNamedUserIDLength SWIFT_WARN_UNUSED_RESULT;
- (void)getNamedUserIDWithCompletionHandler:(void (^ _Nonnull)(NSString * _Nullable))completionHandler;
@property (nonatomic, getter=isComponentEnabled) BOOL componentEnabled;
/// The shared Contact instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAContact * _Nonnull shared;)
+ (UAContact * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)airshipReady;
/// Identifies the contact.
/// \param namedUserID The named user ID.
///
- (void)identify:(NSString * _Nonnull)namedUserID;
/// Resets the contact.
- (void)reset;
/// Begins a tag groups editing session.
///
/// returns:
/// A TagGroupsEditor
- (UATagGroupsEditor * _Nonnull)editTagGroups SWIFT_WARN_UNUSED_RESULT;
/// Begins a tag groups editing session.
/// \param editorBlock A tag groups editor block.
///
///
/// returns:
/// A TagGroupsEditor
- (void)editTagGroups:(SWIFT_NOESCAPE void (^ _Nonnull)(UATagGroupsEditor * _Nonnull))editorBlock;
/// Begins an attribute editing session.
///
/// returns:
/// An AttributesEditor
- (UAAttributesEditor * _Nonnull)editAttributes SWIFT_WARN_UNUSED_RESULT;
/// Begins an attribute editing session.
/// \param editorBlock An attributes editor block.
///
///
/// returns:
/// An AttributesEditor
- (void)editAttributes:(SWIFT_NOESCAPE void (^ _Nonnull)(UAAttributesEditor * _Nonnull))editorBlock;
/// Associates an Email channel to the contact.
/// \param address The email address.
///
/// \param options The email channel registration options.
///
- (void)registerEmail:(NSString * _Nonnull)address options:(UAEmailRegistrationOptions * _Nonnull)options;
/// Associates a SMS channel to the contact.
/// \param msisdn The SMS msisdn.
///
/// \param options The SMS channel registration options.
///
- (void)registerSMS:(NSString * _Nonnull)msisdn options:(UASMSRegistrationOptions * _Nonnull)options;
/// Associates an open channel to the contact.
/// \param address The open channel address.
///
/// \param options The open channel registration options.
///
- (void)registerOpen:(NSString * _Nonnull)address options:(UAOpenRegistrationOptions * _Nonnull)options;
/// Associates a channel to the contact.
/// \param channelID The channel ID.
///
/// \param type The channel type.
///
- (void)associateChannel:(NSString * _Nonnull)channelID type:(enum UAChannelType)type;
/// Begins a subscription list editing session
///
/// returns:
/// A Scoped subscription list editor
- (UAScopedSubscriptionListEditor * _Nonnull)editSubscriptionLists SWIFT_WARN_UNUSED_RESULT;
/// Begins a subscription list editing session
/// \param editorBlock A scoped subscription list editor block.
///
///
/// returns:
/// A ScopedSubscriptionListEditor
- (void)editSubscriptionLists:(SWIFT_NOESCAPE void (^ _Nonnull)(UAScopedSubscriptionListEditor * _Nonnull))editorBlock;
- (void)fetchSubscriptionListsWithCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, UAChannelScopes *> * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Airship contact. A contact is distinct from a channel and  represents a “user”
/// within Airship. Contacts may be named and have channels associated with it.
SWIFT_PROTOCOL_NAMED("AirshipContactBaseProtocol")
@protocol UAContactProtocol
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull contactConflictEvent;)
+ (NSNotificationName _Nonnull)contactConflictEvent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull contactConflictEventKey;)
+ (NSString * _Nonnull)contactConflictEventKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger maxNamedUserIDLength;)
+ (NSInteger)maxNamedUserIDLength SWIFT_WARN_UNUSED_RESULT;
/// The current named user ID if set through the SDK.
- (void)getNamedUserIDWithCompletionHandler:(void (^ _Nonnull)(NSString * _Nullable))completionHandler;
/// Associates the contact with the given named user identifier.
/// \param namedUserID The named user ID.
///
- (void)identify:(NSString * _Nonnull)namedUserID;
/// Disassociate the channel from its current contact, and create a new
/// un-named contact.
- (void)reset;
/// Edits tags.
///
/// returns:
/// A tag groups editor.
- (UATagGroupsEditor * _Nonnull)editTagGroups SWIFT_WARN_UNUSED_RESULT;
/// Edits tags.
/// \param editorBlock The editor block with the editor. The editor will <code>apply</code> will be called after the block is executed.
///
- (void)editTagGroups:(SWIFT_NOESCAPE void (^ _Nonnull)(UATagGroupsEditor * _Nonnull))editorBlock;
/// Edits attributes.
///
/// returns:
/// An attributes editor.
- (UAAttributesEditor * _Nonnull)editAttributes SWIFT_WARN_UNUSED_RESULT;
/// Edits  attributes.
/// \param editorBlock The editor block with the editor. The editor will <code>apply</code> will be called after the block is executed.
///
- (void)editAttributes:(SWIFT_NOESCAPE void (^ _Nonnull)(UAAttributesEditor * _Nonnull))editorBlock;
/// Associates an Email channel to the contact.
/// \param address The email address.
///
/// \param options The email channel registration options.
///
- (void)registerEmail:(NSString * _Nonnull)address options:(UAEmailRegistrationOptions * _Nonnull)options;
/// Associates a SMS channel to the contact.
/// \param msisdn The SMS msisdn.
///
/// \param options The SMS channel registration options.
///
- (void)registerSMS:(NSString * _Nonnull)msisdn options:(UASMSRegistrationOptions * _Nonnull)options;
/// Associates an Open channel to the contact.
/// \param address The open channel address.
///
/// \param options The open channel registration options.
///
- (void)registerOpen:(NSString * _Nonnull)address options:(UAOpenRegistrationOptions * _Nonnull)options;
/// Associates a channel to the contact.
/// \param channelID The channel ID.
///
/// \param type The channel type.
///
- (void)associateChannel:(NSString * _Nonnull)channelID type:(enum UAChannelType)type;
/// Begins a subscription list editing session
///
/// returns:
/// A Scoped subscription list editor
- (UAScopedSubscriptionListEditor * _Nonnull)editSubscriptionLists SWIFT_WARN_UNUSED_RESULT;
/// Begins a subscription list editing session
/// \param editorBlock A scoped subscription list editor block.
///
- (void)editSubscriptionLists:(SWIFT_NOESCAPE void (^ _Nonnull)(UAScopedSubscriptionListEditor * _Nonnull))editorBlock;
/// Fetches subscription lists.
///
/// returns:
/// Subscriptions lists.
- (void)fetchSubscriptionListsWithCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, UAChannelScopes *> * _Nullable, NSError * _Nullable))completionHandler;
@end

@class NSBundle;

SWIFT_CLASS_NAMED("AirshipCoreResources")
@interface UAirshipCoreResources : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull bundle;)
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("AirshipDate")
@interface UAirshipDate : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAirshipDate * _Nonnull shared;)
+ (UAirshipDate * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSDate * _Nonnull now;
@end

enum UADateFormatterFormat : NSInteger;

/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("AirshipDateFormatter")
@interface UADateFormatter : NSObject
/// Parses ISO 8601 date strings.
/// Supports timestamps with just year all the way up to seconds with and without the optional <code>T</code> delimiter.
/// \param from The ISO 8601 timestamp.
///
///
/// returns:
/// A parsed Date object, or nil if the timestamp is not a valid format.
+ (NSDate * _Nullable)dateFromISOString:(NSString * _Nonnull)from SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)stringFromDate:(NSDate * _Nonnull)date format:(enum UADateFormatterFormat)format SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, UADateFormatterFormat, "Format", open) {
/// ISO 8601
  UADateFormatterFormatIso = 0,
/// ISO 8601 with delimitter
  UADateFormatterFormatIsoDelimitter = 1,
/// Short date & time format
  UADateFormatterFormatRelativeShort = 2,
/// Short date format
  UADateFormatterFormatRelativeShortDate = 3,
/// Full date & time format
  UADateFormatterFormatRelativeFull = 4,
/// Full date format
  UADateFormatterFormatRelativeFullDate = 5,
};


SWIFT_CLASS_NAMED("AirshipErrors")
@interface UAirshipErrors : NSObject
+ (NSError * _Nonnull)parseError:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)error:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("AirshipImageData")
@interface UAirshipImageData : NSObject
- (nullable instancetype)initWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Image provider to extend image loading.
/// note:
/// for internal use only.  :nodoc:
SWIFT_PROTOCOL_NAMED("AirshipImageProvider")
@protocol UAImageProvider
/// Gets the an image.
/// \param url The image URL.
///
///
/// returns:
/// The image or nil to let the image loader fetch it.
- (UAirshipImageData * _Nullable)getWithUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("AirshipLegacyHTTPResponse")
@interface UAHTTPResponse : NSObject
@property (nonatomic, readonly) NSInteger status;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithStatus:(NSInteger)status OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL isSuccess;
@property (nonatomic, readonly) BOOL isClientError;
@property (nonatomic, readonly) BOOL isServerError;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("AirshipLegacyRequest")
@interface UARequest : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull method;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable headers;
@property (nonatomic, readonly, copy) NSData * _Nullable body;
+ (UARequest * _Nonnull)makeChannelAuthRequestWithChannelID:(NSString * _Nonnull)channelID method:(NSString * _Nonnull)method url:(NSURL * _Nonnull)url headers:(NSDictionary<NSString *, NSString *> * _Nullable)headers body:(NSData * _Nullable)body SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSHTTPURLResponse;

SWIFT_CLASS_NAMED("AirshipLegacyRequestSession")
@interface UARequestSession : NSObject
- (nonnull instancetype)initWithConfig:(UARuntimeConfig * _Nonnull)config OBJC_DESIGNATED_INITIALIZER;
- (void)performHTTPRequest:(UARequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSLocale;

SWIFT_PROTOCOL_NAMED("AirshipLocaleManagerProtocol")
@protocol UALocaleManagerProtocol
/// Resets the current locale.
- (void)clearLocale;
/// The current locale used by Airship. Defaults to <code>autoupdatingCurrent</code>.
@property (nonatomic, readonly, copy) NSLocale * _Nonnull currentLocale;
@end


/// Airship locale manager.
SWIFT_CLASS_NAMED("AirshipLocaleManager")
@interface UALocaleManager : NSObject <UALocaleManagerProtocol>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull localeUpdatedEvent;)
+ (NSNotificationName _Nonnull)localeUpdatedEvent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull localeEventKey;)
+ (NSString * _Nonnull)localeEventKey SWIFT_WARN_UNUSED_RESULT;
/// The current locale used by Airship. Defaults to <code>autoupdatingCurrent</code>.
@property (nonatomic, copy) NSLocale * _Nonnull currentLocale;
/// Resets the current locale.
- (void)clearLocale;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Protocol used by Airship to log all log messages within the SDK.
/// A custom log handlers should be set on <code>Airship.logHandler</code> before <code>Airship.takeOff</code>.
SWIFT_PROTOCOL_NAMED("AirshipLogHandler")
@protocol UAirshipLogHandler
/// Called to log a message.
/// \param logLevel The Airship log level.
///
/// \param message The log message.
///
/// \param fileID The file ID.
///
/// \param line The line number.
///
/// \param function The function.
///
- (void)logWithLogLevel:(enum UALogLevel)logLevel message:(NSString * _Nonnull)message fileID:(NSString * _Nonnull)fileID line:(NSUInteger)line function:(NSString * _Nonnull)function;
@end

/// Represents the possible log levels.
typedef SWIFT_ENUM_NAMED(NSInteger, UALogLevel, "AirshipLogLevel", open) {
/// Undefined log level.
  UALogLevelUndefined SWIFT_COMPILE_NAME("undefined") = -1,
/// No log messages.
  UALogLevelNone SWIFT_COMPILE_NAME("none") = 0,
/// Log error messages.
/// Used for critical errors, parse exceptions and other situations that cannot be gracefully handled.
  UALogLevelError SWIFT_COMPILE_NAME("error") = 1,
/// Log warning messages.
/// Used for API deprecations, invalid setup and other potentially problematic situations.
  UALogLevelWarn SWIFT_COMPILE_NAME("warn") = 2,
/// Log informative messages.
/// Used for reporting general SDK status.
  UALogLevelInfo SWIFT_COMPILE_NAME("info") = 3,
/// Log debugging messages.
/// Used for reporting general SDK status with more detailed information.
  UALogLevelDebug SWIFT_COMPILE_NAME("debug") = 4,
/// Log detailed verbose messages.
/// Used for reporting highly detailed SDK status that can be useful when debugging and troubleshooting.
  UALogLevelVerbose SWIFT_COMPILE_NAME("verbose") = 5,
};

/// Airship permissions. Used with <code>PermissionsManager</code>
typedef SWIFT_ENUM_NAMED(NSUInteger, UAPermission, "AirshipPermission", open) {
/// Post notifications
  UAPermissionDisplayNotifications = 0,
/// Location
  UAPermissionLocation = 1,
};

enum UAPermissionStatus : NSUInteger;

/// Permissions manager delegate. Allows for extending permission gathering.
SWIFT_PROTOCOL_NAMED("AirshipPermissionDelegate")
@protocol UAAirshipPermissionDelegate
/// Called when a permission needs to be checked.
///
/// returns:
/// the permission status.
- (void)checkPermissionStatusWithCompletionHandler:(void (^ _Nonnull)(enum UAPermissionStatus))completionHandler;
/// Called when a permission should be requested.
/// note:
/// A permission might be already granted when this method is called.
///
/// returns:
/// the permission status.
- (void)requestPermissionWithCompletionHandler:(void (^ _Nonnull)(enum UAPermissionStatus))completionHandler;
@end

/// Permission status
typedef SWIFT_ENUM_NAMED(NSUInteger, UAPermissionStatus, "AirshipPermissionStatus", open) {
/// Could not determine the permission status.
  UAPermissionStatusNotDetermined = 0,
/// Permission is granted.
  UAPermissionStatusGranted = 1,
/// Permission is denied.
  UAPermissionStatusDenied = 2,
};


/// Airship permissions manager.
/// Airship will provide the default handling for <code>Permission.postNotifications</code>. All other permissions will need
/// to be configured by the app by providing a <code>PermissionDelegate</code> for the given permissions.
SWIFT_CLASS_NAMED("AirshipPermissionsManager")
@interface UAPermissionsManager : NSObject
/// note:
/// For internal use only. :nodoc:
- (void)permissionStatusMapWithCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nonnull))completionHandler;
/// Sets a permission delegate.
/// note:
/// The delegate will be strongly retained.
/// \param delegate The delegate.
///
/// \param permission The permission.
///
- (void)setDelegate:(id <UAAirshipPermissionDelegate> _Nullable)delegate permission:(enum UAPermission)permission;
/// Requests a permission.
/// note:
/// If no permission delegate is set for the given permission this will always return <code>.notDetermined</code>
/// \param permission The permission.
///
- (void)requestPermission:(enum UAPermission)permission completionHandler:(void (^ _Nonnull)(enum UAPermissionStatus))completionHandler;
/// Requests a permission.
/// note:
/// If no permission delegate is set for the given permission this will always return <code>.notDetermined</code>
/// \param permission The permission.
///
/// \param enableAirshipUsageOnGrant <code>true</code> to allow any Airship features that need the permission to be enabled as well, e.g., enabling push privacy manager feature and user notifications if <code>.postNotifications</code> is granted.
///
/// \param completionHandler The completion handler.
///
- (void)requestPermission:(enum UAPermission)permission enableAirshipUsageOnGrant:(BOOL)enableAirshipUsageOnGrant completionHandler:(void (^ _Nonnull)(enum UAPermissionStatus))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UAPreferenceDataStore;

/// The privacy manager allow enabling/disabling features in the SDK.
/// The SDK will not make any network requests or collect data if all features our disabled, with
/// a few exceptions when going from enabled -> disabled. To have the SDK opt-out of all features on startup,
/// set the default enabled features in the Config to an empty option set, or in the
/// airshipconfig.plist file with <code>enabledFeatures = none</code>.
/// If any feature is enabled, the SDK will collect and send the following data:
/// <ul>
///   <li>
///     Channel ID
///   </li>
///   <li>
///     Locale
///   </li>
///   <li>
///     TimeZone
///   </li>
///   <li>
///     Platform
///   </li>
///   <li>
///     Opt in state (push and notifications)
///   </li>
///   <li>
///     SDK version
///   </li>
///   <li>
///     Accengage Device ID (Accengage module for migration)
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("AirshipPrivacyManager")
@interface UAPrivacyManager : NSObject
/// <ul>
///   <li>
///     NSNotification event when enabled feature list is updated.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull changeEvent;)
+ (NSNotificationName _Nonnull)changeEvent SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic) UAFeatures enabledFeatures;
+ (UAPrivacyManager * _Nonnull)privacyManagerWithDataStore:(UAPreferenceDataStore * _Nonnull)dataStore defaultEnabledFeatures:(UAFeatures)defaultEnabledFeatures SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)enableFeatures:(UAFeatures)features;
/// :nodoc:
- (void)disableFeatures:(UAFeatures)features;
/// :nodoc:
- (BOOL)isEnabled:(UAFeatures)features SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Checks if any feature is enabled.
///   </li>
///   <li>
///   </li>
///   <li>
///     <ul>
///       <li>
///         Returns: True if any feature is enabled, otherwise false.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (BOOL)isAnyFeatureEnabled SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UNNotificationCategory;
@protocol UAPushNotificationDelegate;
@protocol UARegistrationDelegate;
@class NSTimeZone;

/// This singleton provides an interface to the functionality provided by the Airship iOS Push API.
SWIFT_CLASS_NAMED("AirshipPush")
@interface UAPush : NSObject <UAComponent>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull notificationStatusUpdateEvent;)
+ (NSNotificationName _Nonnull)notificationStatusUpdateEvent SWIFT_WARN_UNUSED_RESULT;
/// The shared Push instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAPush * _Nonnull shared;)
+ (UAPush * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// NSNotification event when a notification response is received.
/// The event will contain the notification response object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull receivedNotificationResponseEvent;)
+ (NSNotificationName _Nonnull)receivedNotificationResponseEvent SWIFT_WARN_UNUSED_RESULT;
/// Response key for ReceivedNotificationResponseEvent
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull receivedNotificationResponseEventResponseKey;)
+ (NSString * _Nonnull)receivedNotificationResponseEventResponseKey SWIFT_WARN_UNUSED_RESULT;
/// NSNotification event when a foreground notification is received.
/// The event will contain the payload dictionary as user info.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull receivedForegroundNotificationEvent;)
+ (NSNotificationName _Nonnull)receivedForegroundNotificationEvent SWIFT_WARN_UNUSED_RESULT;
/// NSNotification event when a background notification is received.
/// The event will contain the payload dictionary as user info.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull receivedBackgroundNotificationEvent;)
+ (NSNotificationName _Nonnull)receivedBackgroundNotificationEvent SWIFT_WARN_UNUSED_RESULT;
/// Quiet Time dictionary start key. For internal use only :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull quietTimeStartKey;)
+ (NSString * _Nonnull)quietTimeStartKey SWIFT_WARN_UNUSED_RESULT;
/// Quiet Time dictionary end key. For internal use only :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull quietTimeEndKey;)
+ (NSString * _Nonnull)quietTimeEndKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull areNotificationsAllowed;)
+ (NSString * _Nonnull)areNotificationsAllowed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull isOptedIn;)
+ (NSString * _Nonnull)isOptedIn SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull isPushPrivacyFeatureEnabled;)
+ (NSString * _Nonnull)isPushPrivacyFeatureEnabled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull isPushTokenRegistered;)
+ (NSString * _Nonnull)isPushTokenRegistered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull isUserNotificationsEnabled;)
+ (NSString * _Nonnull)isUserNotificationsEnabled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull isUserOptedIn;)
+ (NSString * _Nonnull)isUserOptedIn SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, getter=isComponentEnabled) BOOL componentEnabled;
/// Enables/disables background remote notifications on this device through Airship.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL backgroundPushNotificationsEnabled;
/// Enables/disables user notifications on this device through Airship.
/// Defaults to <code>false</code>. Once set to <code>true</code>, the user will be prompted for remote notifications.
@property (nonatomic) BOOL userPushNotificationsEnabled;
/// When enabled, if the user has ephemeral notification authorization the SDK will prompt the user for
/// notifications.  Defaults to <code>false</code>.
@property (nonatomic) BOOL requestExplicitPermissionWhenEphemeral;
/// The device token for this device, as a hex string.
@property (nonatomic, readonly, copy) NSString * _Nullable deviceToken;
/// User Notification options this app will request from APNS. Changes to this value
/// will not take effect until the next time the app registers with
/// updateRegistration.
/// Defaults to alert, sound and badge.
@property (nonatomic) UANotificationOptions notificationOptions;
/// Custom notification categories. Airship default notification
/// categories will be unaffected by this field.
/// Changes to this value will not take effect until the next time the app registers
/// with updateRegistration.
@property (nonatomic, copy) NSSet<UNNotificationCategory *> * _Nonnull customCategories;
/// The combined set of notification categories from <code>customCategories</code> set by the app
/// and the Airship provided categories.
@property (nonatomic, readonly, copy) NSSet<UNNotificationCategory *> * _Nonnull combinedCategories;
/// Sets authorization required for the default Airship categories. Only applies
/// to background user notification actions.
/// Changes to this value will not take effect until the next time the app registers
/// with updateRegistration.
@property (nonatomic) BOOL requireAuthorizationForDefaultCategories;
/// Set a delegate that implements the PushNotificationDelegate protocol.
@property (nonatomic, weak) id <UAPushNotificationDelegate> _Nullable pushNotificationDelegate;
/// Set a delegate that implements the UARegistrationDelegate protocol.
@property (nonatomic, weak) id <UARegistrationDelegate> _Nullable registrationDelegate;
/// Notification response that launched the application.
@property (nonatomic, readonly, strong) UNNotificationResponse * _Nullable launchNotificationResponse;
/// The current authorized notification settings.
/// If push is disabled in privacy manager, this value could be out of date.
/// Note: this value reflects all the notification settings currently enabled in the
/// Settings app and does not take into account which options were originally requested.
@property (nonatomic, readonly) UAAuthorizedNotificationSettings authorizedNotificationSettings;
/// The current authorization status.
/// If push is disabled in privacy manager, this value could be out of date.
@property (nonatomic, readonly) UAAuthorizationStatus authorizationStatus;
/// Indicates whether the user has been prompted for notifications or not.
/// If push is disabled in privacy manager, this value will be out of date.
@property (nonatomic, readonly) BOOL userPromptedForNotifications;
/// The default presentation options to use for foreground notifications.
@property (nonatomic) UNNotificationPresentationOptions defaultPresentationOptions;
/// Enables user notifications on this device through Airship.
/// note:
/// The completion handler will return the success state of system push authorization as it is defined by the
/// user’s response to the push authorization prompt. The completion handler success state does NOT represent the
/// state of the userPushNotificationsEnabled flag, which will be invariably set to <code>true</code> after the completion of this call.
/// \param completionHandler The completion handler with success flag representing the system authorization state.
///
- (void)enableUserPushNotificationsWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Indicates whether the user is opted in for push notifications or not.
@property (nonatomic, readonly) BOOL isPushNotificationsOptedIn;
/// The current badge number used by the device and on the Airship server.
/// note:
/// This property must be accessed on the main thread.
@property (nonatomic) NSInteger badgeNumber;
/// Toggle the Airship auto-badge feature. Defaults to <code>false</code> If enabled, this will update the
/// badge number stored by Airship every time the app is started or foregrounded.
@property (nonatomic) BOOL autobadgeEnabled;
/// Resets the badge to zero (0) on both the device and on Airships servers. This is a
/// convenience method for setting the <code>badgeNumber</code> property to zero.
/// note:
/// This method must be called on the main thread.
- (void)resetBadge;
/// Quiet time settings for this device.
@property (nonatomic, readonly, copy) NSDictionary * _Nullable quietTime;
/// Time Zone for quiet time. If the time zone is not set, the current
/// local time zone is returned.
@property (nonatomic, strong) NSTimeZone * _Nullable timeZone;
/// Enables/Disables quiet time
@property (nonatomic) BOOL quietTimeEnabled;
/// Sets the quiet time start and end time.  The start and end time does not change
/// if the time zone changes.  To set the time zone, see ‘timeZone’.
/// Update the server after making changes to the quiet time with the
/// <code>updateRegistration</code> call. Batching these calls improves API and client performance.
/// warning:
/// This method does not automatically enable quiet time and does not
/// automatically update the server. Please refer to <code>quietTimeEnabled</code> and
/// <code>updateRegistration</code> for more information.
/// \param startHour Quiet time start hour. Only 0-23 is valid.
///
/// \param startMinute Quiet time start minute. Only 0-59 is valid.
///
/// \param endHour Quiet time end hour. Only 0-23 is valid.
///
/// \param endMinute Quiet time end minute. Only 0-59 is valid.
///
- (void)setQuietTimeStartHour:(NSInteger)startHour startMinute:(NSInteger)startMinute endHour:(NSInteger)endHour endMinute:(NSInteger)endMinute;
/// Registers or updates the current registration with an API call. If push notifications are
/// not enabled, this unregisters the device token.
/// Add a <code>UARegistrationDelegate</code> to <code>UAPush</code> to receive success and failure callbacks.
- (void)updateRegistration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Allowed SDK extension types.
/// note:
/// For internal use only. :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, UASDKExtension, "AirshipSDKExtension", open) {
/// The Cordova SDK extension.
  UASDKExtensionCordova = 0,
/// The Xamarin SDK extension.
  UASDKExtensionXamarin = 1,
/// The Unity SDK extension.
  UASDKExtensionUnity = 2,
/// The Flutter SDK extension.
  UASDKExtensionFlutter = 3,
/// The React Native SDK extension.
  UASDKExtensionReactNative = 4,
/// The Titanium SDK extension.
  UASDKExtensionTitanium = 5,
};

@class UATaskRequestOptions;

/// Task passed to the launcher when ready to execute.
/// note:
/// For internal use only. :nodoc:
SWIFT_PROTOCOL_NAMED("AirshipTask")
@protocol UATask
/// Completion handler. Will be called once task is completed.
@property (nonatomic, copy) void (^ _Nullable completionHandler)(void);
/// The task ID.
@property (nonatomic, readonly, copy) NSString * _Nonnull taskID;
/// The task request options.
@property (nonatomic, readonly, strong) UATaskRequestOptions * _Nonnull requestOptions;
/// The launcher should call this method to signal that the task was completed successfully.
- (void)taskCompleted;
/// The launcher should call this method to signal the task failed and needs to be retried.
- (void)taskFailed;
@end

@class NSDateFormatter;
@class UIWindow;
@class UIWindowScene;

/// The <code>Utils</code> object provides an interface for utility methods.
SWIFT_CLASS_NAMED("AirshipUtils")
@interface UAUtils : NSObject
/// Compares two <code>float</code> values and returns <code>true</code> if the difference between them is less than or equal
/// to the absolute value of the specified <code>accuracy</code>.
/// \param float1 The first <code>float</code>.
///
/// \param float2 The second <code>float</code>.
///
/// \param accuracy The maximum allowed difference between values to be compared as equal.
///
///
/// returns:
/// <code>true</code> if the difference between the two floats is within the given <code>accuracy</code>, <code>false</code> otherwise.
+ (BOOL)float:(CGFloat)float1 isEqualToFloat:(CGFloat)float2 withAccuracy:(CGFloat)accuracy SWIFT_WARN_UNUSED_RESULT;
/// Get the device model name (e.g.,<code> iPhone3,1</code>).
///
/// returns:
/// The device model name.
+ (NSString * _Nullable)deviceModelName SWIFT_WARN_UNUSED_RESULT;
/// Gets the short bundle version string.
///
/// returns:
/// A short bundle version string value.
+ (NSString * _Nullable)bundleShortVersionString SWIFT_WARN_UNUSED_RESULT;
/// Gets the current carrier name.
///
/// returns:
/// The current carrier name.
+ (NSString * _Nullable)carrierName SWIFT_WARN_UNUSED_RESULT;
/// Gets the current connection type.
///
/// returns:
/// The current connection type as a <code>String</code>.
+ (NSString * _Nonnull)connectionType SWIFT_WARN_UNUSED_RESULT;
/// Compares two version strings and determines their order.
/// \param fromVersion The first version.
///
/// \param toVersion The second version.
///
///
/// returns:
/// a <code>ComparisonResult</code>.
+ (NSComparisonResult)compareVersion:(NSString * _Nonnull)fromVersion toVersion:(NSString * _Nonnull)toVersion SWIFT_WARN_UNUSED_RESULT;
/// Creates an ISO dateFormatter (UTC).
/// The Formatter is created with the following attributes:
/// <ul>
///   <li>
///     <code>locale</code> set to <code>en_US_POSIX</code>
///   </li>
///   <li>
///     <code>timestyle</code> set to <code>NSDateFormatterFullStyle</code>
///   </li>
///   <li>
///     <code>dateFormat</code> set to <code>yyyy-MM-dd HH:mm:ss</code>
///   </li>
/// </ul>
///
/// returns:
/// A DateFormatter with the default attributes.
+ (NSDateFormatter * _Nonnull)ISODateFormatterUTC SWIFT_WARN_UNUSED_RESULT;
/// Creates an ISO dateFormatter (UTC).
/// The Formatter is created with the following attributes:
/// <ul>
///   <li>
///     <code>locale</code> set to <code>en_US_POSIX</code>
///   </li>
///   <li>
///     <code>timestyle</code> set to <code>NSDateFormatterFullStyle</code>
///   </li>
///   <li>
///     <code>dateFormat</code> set to <code>yyyy-MM-dd'T'HH:mm:ss</code>.
///   </li>
/// </ul>
/// The formatter returned by this method is identical to that of <code>ISODateFormatterUTC</code>, except that the format matches
/// the optional <code>T</code> delimiter between date and time.
///
/// returns:
/// A DateFormatter with the default attributes, matching the optional <code>T</code> delimiter.
+ (NSDateFormatter * _Nonnull)ISODateFormatterUTCWithDelimiter SWIFT_WARN_UNUSED_RESULT;
/// Parses ISO 8601 date strings.
/// Supports timestamps with just year all the way up to seconds with and without the optional <code>T</code> delimiter.
/// \param from The ISO 8601 timestamp.
///
///
/// returns:
/// A parsed NSDate object, or nil if the timestamp is not a valid format.
+ (NSDate * _Nullable)parseISO8601DateFromString:(NSString * _Nonnull)from SWIFT_WARN_UNUSED_RESULT;
/// Returns the main window for the app.
/// This window will be positioned underneath any other windows added and removed at runtime,
/// by classes such a <code>UIAlertView</code> or <code>UIActionSheet</code>.
///
/// returns:
/// The main window, or <code>nil</code> if the window cannot be found.
+ (UIWindow * _Nullable)mainWindow SWIFT_WARN_UNUSED_RESULT;
/// Returns the main window for the given <code>UIWindowScene</code>.
/// This window will be positioned underneath any other windows added and removed at runtime,
/// by classes such a <code>UIAlertView</code> or <code>UIActionSheet</code>.
/// \param scene The <code>UIWindowScene</code>.
///
///
/// returns:
/// The main window, or <code>nil</code> if the window cannot be found.
+ (UIWindow * _Nullable)mainWindow:(UIWindowScene * _Nonnull)scene SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);
/// Returns the window containing the provided view.
/// \param view The view.
///
///
/// returns:
/// The window containing the view, or <code>nil</code> if the view is not currently displayed.
+ (UIWindow * _Nullable)windowForView:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
+ (UIWindowScene * _Nullable)findWindowSceneAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Takes an array of fetch results and returns the merged result.
/// \param results An <code>Array</code> of fetch results.
///
///
/// returns:
/// The merged fetch result.
+ (UIBackgroundFetchResult)mergeFetchResults:(NSArray<NSNumber *> * _Nonnull)results SWIFT_WARN_UNUSED_RESULT;
/// Determine if the notification payload is a silent push (no notification elements).
/// \param notification The notification payload. 
///
///
/// returns:
/// <code>true</code> the notification is a silent push, <code>false</code> otherwise.
+ (BOOL)isSilentPush:(NSDictionary * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
/// Determine if the notification payload is an alerting push.
/// \param notification The notification payload. 
///
///
/// returns:
/// <code>true</code> the notification is an alerting  push, <code>false</code> otherwise.
+ (BOOL)isAlertingPush:(NSDictionary * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
/// Takes an APNS-provided device token and returns the decoded Airship device token.
/// \param token An APNS-provided device token.
///
///
/// returns:
/// The decoded Airship device token.
+ (NSString * _Nonnull)deviceTokenStringFromDeviceToken:(NSData * _Nonnull)token SWIFT_WARN_UNUSED_RESULT;
/// Generates a <code>SHA256</code> digest for the input string.
/// \param input <code>String</code> for which to calculate SHA.
///
///
/// returns:
/// The <code>SHA256</code> digest as <code>NSData</code>.
+ (NSData * _Nonnull)sha256DigestWithString:(NSString * _Nonnull)input SWIFT_WARN_UNUSED_RESULT;
/// Generates a <code>SHA256</code> hash for the input string.
/// \param input Input string for which to calculate SHA.
///
///
/// returns:
/// SHA256 digest as a hex string
+ (NSString * _Nonnull)sha256HashWithString:(NSString * _Nonnull)input SWIFT_WARN_UNUSED_RESULT;
/// Returns a basic auth header string.
/// \param username The username.
///
/// \param password The password.
///
///
/// returns:
/// An HTTP Basic Auth header string value for the provided credentials in the form of: <code>Basic [Base64 Encoded "username:password"]</code>
+ (NSString * _Nullable)authHeaderStringWithName:(NSString * _Nonnull)username password:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
/// Parse url for the input string.
/// \param value Input string for which to create the URL.
///
///
/// returns:
/// returns the created URL otherwise return nil.
+ (NSURL * _Nullable)parseURL:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Needed to get stringValue in InAppAutomation. Delete after its converted to swift.
/// note:
/// For internal use only. :nodoc:
+ (NSString * _Nonnull)permissionString:(enum UAPermission)permission SWIFT_WARN_UNUSED_RESULT;
/// Needed to get stringValue in InAppAutomation. Delete after its converted to swift.
/// note:
/// For internal use only. :nodoc:
+ (NSString * _Nonnull)permissionStatusString:(enum UAPermissionStatus)status SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("AirshipVersion")
@interface UAirshipVersion : NSObject
+ (NSString * _Nonnull)get SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, AirshipWorkRequestConflictPolicy, open) {
  UAirshipWorkRequestConflictPolicyAppend SWIFT_COMPILE_NAME("append") = 0,
  UAirshipWorkRequestConflictPolicyReplace SWIFT_COMPILE_NAME("replace") = 1,
  UAirshipWorkRequestConflictPolicyKeepIfNotStarted SWIFT_COMPILE_NAME("keepIfNotStarted") = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, UAirshipWorkerType, "AirshipWorkerType", open) {
  UAirshipWorkerTypeSerial = 0,
  UAirshipWorkerTypeConcurrent = 1,
};


@protocol UAAppIntegrationDelegate;
@class UIApplication;
@class UNUserNotificationCenter;

/// Application hooks required by Airship. If <code>automaticSetupEnabled</code> is enabled
/// (enabled by default), Airship will automatically integrate these calls into
/// the application by swizzling methods. If <code>automaticSetupEnabled</code> is disabled,
/// the application must call through to every method provided by this class.
SWIFT_CLASS_NAMED("AppIntegration")
@interface UAAppIntegration : NSObject
/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <UAAppIntegrationDelegate> _Nullable integrationDelegate;)
+ (id <UAAppIntegrationDelegate> _Nullable)integrationDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setIntegrationDelegate:(id <UAAppIntegrationDelegate> _Nullable)value;
/// Must be called by the UIApplicationDelegate’s
/// application:performFetchWithCompletionHandler:.
/// \param application The application
///
/// \param completionHandler The completion handler.
///
+ (void)applicatin:(UIApplication * _Nonnull)application performFetchWithCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler SWIFT_DEPRECATED_MSG("Use application(_:performFetchWithCompletionHandler:) instead");
/// Must be called by the UIApplicationDelegate’s
/// application:performFetchWithCompletionHandler:.
/// \param application The application
///
/// \param completionHandler The completion handler.
///
+ (void)application:(UIApplication * _Nonnull)application performFetchWithCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
/// Must be called by the UIApplicationDelegate’s
/// application:didRegisterForRemoteNotificationsWithDeviceToken:.
/// \param application The application
///
/// \param deviceToken The device token.
///
+ (void)application:(UIApplication * _Nonnull)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// Must be called by the UIApplicationDelegate’s
/// application:didFailToRegisterForRemoteNotificationsWithError:.
/// \param application The application
///
/// \param error The error.
///
+ (void)application:(UIApplication * _Nonnull)application didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
/// Must be called by the UIApplicationDelegate’s
/// application:didReceiveRemoteNotification:fetchCompletionHandler:.
/// \param application The application
///
/// \param userInfo The remote notification.
///
/// \param completionHandler The completion handler.
///
+ (void)application:(UIApplication * _Nonnull)application didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
/// Must be called by the UNUserNotificationDelegate’s
/// userNotificationCenter:willPresentNotification:withCompletionHandler.
/// \param center The notification center.
///
/// \param notification The notification.
///
/// \param completionHandler The completion handler.
///
+ (void)userNotificationCenterWithCenter:(UNUserNotificationCenter * _Nonnull)center willPresentNotification:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler SWIFT_DEPRECATED_MSG("Use userNotificationCenter(_:willPresent:withCompletionHandler:) instead");
/// Must be called by the UNUserNotificationDelegate’s
/// userNotificationCenter:willPresentNotification:withCompletionHandler.
/// \param center The notification center.
///
/// \param notification The notification.
///
/// \param completionHandler The completion handler.
///
+ (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center willPresentNotification:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
/// Must be called by the UNUserNotificationDelegate’s
/// userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler.
/// \param center The notification center.
///
/// \param response The notification response.
///
/// \param completionHandler The completion handler.
///
+ (void)userNotificationCenterWithCenter:(UNUserNotificationCenter * _Nonnull)center didReceiveNotificationResponse:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_DEPRECATED_MSG("Use userNotificationCenter(_:didReceive:withCompletionHandler:) instead");
/// Must be called by the UNUserNotificationDelegate’s
/// userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler.
/// \param center The notification center.
///
/// \param response The notification response.
///
/// \param completionHandler The completion handler.
///
+ (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center didReceiveNotificationResponse:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum UAApplicationState : NSInteger;

SWIFT_CLASS_NAMED("AppStateTracker")
@interface UAAppStateTracker : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didBecomeActiveNotification;)
+ (NSNotificationName _Nonnull)didBecomeActiveNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull willEnterForegroundNotification;)
+ (NSNotificationName _Nonnull)willEnterForegroundNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didEnterBackgroundNotification;)
+ (NSNotificationName _Nonnull)didEnterBackgroundNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull willResignActiveNotification;)
+ (NSNotificationName _Nonnull)willResignActiveNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull willTerminateNotification;)
+ (NSNotificationName _Nonnull)willTerminateNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didTransitionToBackground;)
+ (NSNotificationName _Nonnull)didTransitionToBackground SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didTransitionToForeground;)
+ (NSNotificationName _Nonnull)didTransitionToForeground SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAAppStateTracker * _Nonnull shared;)
+ (UAAppStateTracker * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) enum UAApplicationState state;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The ApplicationMetrics class keeps track of application-related metrics.
SWIFT_CLASS_NAMED("ApplicationMetrics")
@interface UAApplicationMetrics : NSObject
/// Determines whether the application’s short version string has been updated.
/// Only tracked if Feature.inAppAutomation or Feature.analytics are enabled in the privacy manager.
@property (nonatomic, readonly) BOOL isAppVersionUpdated;
/// The date of the last time the application was active.
/// Only tracked if Feature.inAppAutomation or Feature.analytics are enabled in the privacy manager.
@property (nonatomic, readonly, copy) NSDate * _Nullable lastApplicationOpenDate;
/// The application’s current short version string.
@property (nonatomic, readonly, copy) NSString * _Nullable currentAppVersion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Platform independent representation of application state.
/// note:
/// For internal use only. :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, UAApplicationState, "ApplicationState", open) {
/// The active state.
  UAApplicationStateActive = 0,
/// The inactive state.
  UAApplicationStateInactive = 1,
/// The background state.
  UAApplicationStateBackground = 2,
};


/// Associated channel data.
SWIFT_CLASS_NAMED("AssociatedChannel")
@interface UAAssociatedChannel : NSObject
/// Channel type
@property (nonatomic, readonly) enum UAChannelType channelType;
/// channel ID
@property (nonatomic, readonly, copy) NSString * _Nonnull channelID;
- (nonnull instancetype)initWithChannelType:(enum UAChannelType)channelType channelID:(NSString * _Nonnull)channelID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Defines analytics identifiers to be associated with
/// the device.
SWIFT_CLASS_NAMED("AssociatedIdentifiers")
@interface UAAssociatedIdentifiers : NSObject
/// Maximum number of associated IDs that can be set.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger maxCount;)
+ (NSInteger)maxCount SWIFT_WARN_UNUSED_RESULT;
/// Character limit for associated IDs or keys.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger maxCharacterCount;)
+ (NSInteger)maxCharacterCount SWIFT_WARN_UNUSED_RESULT;
/// The advertising ID.
@property (nonatomic, copy) NSString * _Nullable advertisingID;
/// The application’s vendor ID.
@property (nonatomic, copy) NSString * _Nullable vendorID;
/// Indicates whether the user has limited ad tracking.
@property (nonatomic) BOOL advertisingTrackingEnabled;
/// A map of all the associated identifiers.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull allIDs;
- (nonnull instancetype)initWithIdentifiers:(NSDictionary<NSString *, NSString *> * _Nullable)identifiers OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDictionary:(NSDictionary<NSString *, NSString *> * _Nullable)dictionary;
- (nonnull instancetype)init;
/// Factory method to create an empty identifiers object.
///
/// returns:
/// The created associated identifiers.
+ (UAAssociatedIdentifiers * _Nonnull)identifiers SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create an associated identifiers instance with a dictionary
/// of custom identifiers (containing strings only).
///
/// returns:
/// The created associated identifiers.
+ (UAAssociatedIdentifiers * _Nonnull)identifiersWithDictionary:(NSDictionary<NSString *, NSString *> * _Nullable)identifiers SWIFT_WARN_UNUSED_RESULT;
/// Sets an identifier mapping.
/// \param identifier The value of the identifier, or <code>nil</code> to remove the identifier.
/// @parm key The key for the identifier
///
- (void)setIdentifier:(NSString * _Nullable)identifier forKey:(NSString * _Nonnull)key;
@end


/// Defines attributes mutations.
SWIFT_CLASS_NAMED("AttributeMutations") SWIFT_DEPRECATED_MSG("Use Contact#editAttributes() or Channel#editAttributes() instead.")
@interface UAAttributeMutations : NSObject
/// Sets an attribute.
/// \param string The value.
///
/// \param forAttribute The attribute
///
- (void)setString:(NSString * _Nonnull)string forAttribute:(NSString * _Nonnull)forAttribute;
/// Sets an attribute.
/// \param number The value.
///
/// \param forAttribute The attribute
///
- (void)setNumber:(NSNumber * _Nonnull)number forAttribute:(NSString * _Nonnull)forAttribute;
/// Sets an attribute.
/// \param date The value.
///
/// \param forAttribute The attribute
///
- (void)setDate:(NSDate * _Nonnull)date forAttribute:(NSString * _Nonnull)forAttribute;
/// Removes an attribute.
/// \param attribute The attribute
///
- (void)removeAttribute:(NSString * _Nonnull)attribute;
/// Generates an empty mutation.
///
/// returns:
/// An empty mutation object.
+ (UAAttributeMutations * _Nonnull)mutations SWIFT_WARN_UNUSED_RESULT;
- (void)applyMutationsWithEditor:(UAAttributesEditor * _Nonnull)editor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Predefined attributes.
SWIFT_CLASS_NAMED("Attributes")
@interface UAAttributes : NSObject
/// <ul>
///   <li>
///     Title attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull title;)
+ (NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     First name attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull firstName;)
+ (NSString * _Nonnull)firstName SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Last name attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull lastName;)
+ (NSString * _Nonnull)lastName SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Full name attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fullName;)
+ (NSString * _Nonnull)fullName SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Gender attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gender;)
+ (NSString * _Nonnull)gender SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Zip code attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull zipCode;)
+ (NSString * _Nonnull)zipCode SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     City attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull city;)
+ (NSString * _Nonnull)city SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Region attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull region;)
+ (NSString * _Nonnull)region SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Country attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull country;)
+ (NSString * _Nonnull)country SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Birthdate attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull birthdate;)
+ (NSString * _Nonnull)birthdate SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Age attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull age;)
+ (NSString * _Nonnull)age SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Mobile phone attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mobilePhone;)
+ (NSString * _Nonnull)mobilePhone SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Home phone attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull homePhone;)
+ (NSString * _Nonnull)homePhone SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Work phone attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull workPhone;)
+ (NSString * _Nonnull)workPhone SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Loyalty tier attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull loyaltyTier;)
+ (NSString * _Nonnull)loyaltyTier SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Company attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull company;)
+ (NSString * _Nonnull)company SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Username attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull username;)
+ (NSString * _Nonnull)username SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Account creation attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull accountCreation;)
+ (NSString * _Nonnull)accountCreation SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Email attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull email;)
+ (NSString * _Nonnull)email SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Advertising id attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull advertisingId;)
+ (NSString * _Nonnull)advertisingId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Attributes editor.
SWIFT_CLASS_NAMED("AttributesEditor")
@interface UAAttributesEditor : NSObject
/// Removes an attribute.
/// \param attribute The attribute.
///
- (void)removeAttribute:(NSString * _Nonnull)attribute;
/// Sets the attribute.
/// \param date The value
///
/// \param attribute The attribute
///
- (void)setDate:(NSDate * _Nonnull)date attribute:(NSString * _Nonnull)attribute;
/// Sets the attribute.
/// \param number The value.
///
/// \param attribute The attribute.
///
- (void)setNumber:(NSNumber * _Nonnull)number attribute:(NSString * _Nonnull)attribute;
/// Sets the attribute.
/// \param string The value.
///
/// \param attribute The attribute.
///
- (void)setString:(NSString * _Nonnull)string attribute:(NSString * _Nonnull)attribute;
/// Applies the attribute changes.
- (void)apply;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("Base64")
@interface UABase64 : NSObject
+ (NSData * _Nullable)dataFromString:(NSString * _Nonnull)base64String SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)stringFromData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Airship Channel protocol.
SWIFT_PROTOCOL_NAMED("BaseAirshipChannelProtocol")
@protocol UAChannelProtocol
/// The Channel ID.
@property (nonatomic, readonly, copy) NSString * _Nullable identifier;
/// Device tags
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull tags;
/// Allows setting tags from the device. Tags can be set from either the server or the device, but
/// not both (without synchronizing the data), so use this flag to explicitly enable or disable
/// the device-side flags.
/// Set this to <code>false</code> to prevent the device from sending any tag information to the server when using
/// server-side tagging. Defaults to <code>true</code>.
@property (nonatomic) BOOL isChannelTagRegistrationEnabled;
/// Edits channel tags.
///
/// returns:
/// Tag editor.
- (UATagEditor * _Nonnull)editTags SWIFT_WARN_UNUSED_RESULT;
/// Edits channel tags.
/// \param editorBlock The editor block with the editor. The editor will <code>apply</code> will be called after the block is executed.
///
- (void)editTags:(SWIFT_NOESCAPE void (^ _Nonnull)(UATagEditor * _Nonnull))editorBlock;
/// Edits channel tags groups.
///
/// returns:
/// Tag group editor.
- (UATagGroupsEditor * _Nonnull)editTagGroups SWIFT_WARN_UNUSED_RESULT;
/// Edits channel tag groups tags.
/// \param editorBlock The editor block with the editor. The editor will <code>apply</code> will be called after the block is executed.
///
- (void)editTagGroups:(SWIFT_NOESCAPE void (^ _Nonnull)(UATagGroupsEditor * _Nonnull))editorBlock;
/// Edits channel subscription lists.
///
/// returns:
/// Subscription list editor.
- (UASubscriptionListEditor * _Nonnull)editSubscriptionLists SWIFT_WARN_UNUSED_RESULT;
/// Edits channel subscription lists.
/// \param editorBlock The editor block with the editor. The editor will <code>apply</code> will be called after the block is executed.
///
- (void)editSubscriptionLists:(SWIFT_NOESCAPE void (^ _Nonnull)(UASubscriptionListEditor * _Nonnull))editorBlock;
/// Fetches current subscription lists.
///
/// returns:
/// The subscription lists
- (void)fetchSubscriptionListsWithCompletionHandler:(void (^ _Nonnull)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completionHandler;
/// Edits channel attributes.
///
/// returns:
/// Attribute editor.
- (UAAttributesEditor * _Nonnull)editAttributes SWIFT_WARN_UNUSED_RESULT;
/// Edits channel attributes.
/// \param editorBlock The editor block with the editor. The editor will <code>apply</code> will be called after the block is executed.
///
- (void)editAttributes:(SWIFT_NOESCAPE void (^ _Nonnull)(UAAttributesEditor * _Nonnull))editorBlock;
/// Enables channel creation if channelCreationDelayEnabled was set to <code>YES</code> in the config.
- (void)enableChannelCreation;
@end


/// Airship Push protocol.
SWIFT_PROTOCOL_NAMED("BasePushProtocol")
@protocol UAPushProtocol
/// Checks to see if push notifications are opted in.
@property (nonatomic, readonly) BOOL isPushNotificationsOptedIn;
/// Enables/disables background remote notifications on this device through Airship.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL backgroundPushNotificationsEnabled;
/// Enables/disables user notifications on this device through Airship.
/// Defaults to <code>false</code>. Once set to <code>true</code>, the user will be prompted for remote notifications.
@property (nonatomic) BOOL userPushNotificationsEnabled;
/// When enabled, if the user has ephemeral notification authorization the SDK will prompt the user for
/// notifications.  Defaults to <code>false</code>.
@property (nonatomic) BOOL requestExplicitPermissionWhenEphemeral;
/// The device token for this device, as a hex string.
@property (nonatomic, readonly, copy) NSString * _Nullable deviceToken;
/// User Notification options this app will request from APNS. Changes to this value
/// will not take effect until the next time the app registers with
/// updateRegistration.
/// Defaults to alert, sound and badge.
@property (nonatomic) UANotificationOptions notificationOptions;
/// Custom notification categories. Airship default notification
/// categories will be unaffected by this field.
/// Changes to this value will not take effect until the next time the app registers
/// with updateRegistration.
@property (nonatomic, copy) NSSet<UNNotificationCategory *> * _Nonnull customCategories;
/// The combined set of notification categories from <code>customCategories</code> set by the app
/// and the Airship provided categories.
@property (nonatomic, readonly, copy) NSSet<UNNotificationCategory *> * _Nonnull combinedCategories;
/// Sets authorization required for the default Airship categories. Only applies
/// to background user notification actions.
/// Changes to this value will not take effect until the next time the app registers
/// with updateRegistration.
@property (nonatomic) BOOL requireAuthorizationForDefaultCategories;
/// Set a delegate that implements the PushNotificationDelegate protocol.
@property (nonatomic, weak) id <UAPushNotificationDelegate> _Nullable pushNotificationDelegate;
/// Set a delegate that implements the RegistrationDelegate protocol.
@property (nonatomic, weak) id <UARegistrationDelegate> _Nullable registrationDelegate;
/// Notification response that launched the application.
@property (nonatomic, readonly, strong) UNNotificationResponse * _Nullable launchNotificationResponse;
/// The current authorized notification settings.
/// If push is disabled in privacy manager, this value could be out of date.
/// Note: this value reflects all the notification settings currently enabled in the
/// Settings app and does not take into account which options were originally requested.
@property (nonatomic, readonly) UAAuthorizedNotificationSettings authorizedNotificationSettings;
/// The current authorization status.
/// If push is disabled in privacy manager, this value could be out of date.
@property (nonatomic, readonly) UAAuthorizationStatus authorizationStatus;
/// Indicates whether the user has been prompted for notifications or not.
/// If push is disabled in privacy manager, this value will be out of date.
@property (nonatomic, readonly) BOOL userPromptedForNotifications;
/// The default presentation options to use for foreground notifications.
@property (nonatomic) UNNotificationPresentationOptions defaultPresentationOptions;
/// The current badge number used by the device and on the Airship server.
/// note:
/// This property must be accessed on the main thread.
@property (nonatomic) NSInteger badgeNumber;
@end

@class NSCoder;

/// An abstraction around a nicer looking
/// loading indicator that embeds a UIActivityIndicatorView
/// in a translucent black beveled rect.
SWIFT_CLASS_NAMED("BeveledLoadingIndicator")
@interface UABeveledLoadingIndicator : UIView
@property (nonatomic, getter=isHidden) BOOL hidden;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
/// Show and animate the indicator
- (void)show;
/// Hide the indicator.
- (void)hide;
@end


/// Channel Capture copies the channelId to the device clipboard after a specific number of
/// knocks (app foregrounds) within a specific timeframe. Channel Capture can be enabled
/// or disabled in Airship Config.
SWIFT_CLASS_NAMED("ChannelCapture") SWIFT_AVAILABILITY(tvos,unavailable)
@interface UAChannelCapture : NSObject
/// Flag indicating whether channel capture is enabled. Clear to disable. Set to enable.
/// Note: Does not persist through app launches.
@property (nonatomic) BOOL enabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Channel scope.
typedef SWIFT_ENUM_NAMED(NSInteger, UAChannelScope, "ChannelScope", open) {
/// App channels - amazon, android, iOS
  UAChannelScopeApp = 0,
/// Web channels
  UAChannelScopeWeb = 1,
/// Email channels
  UAChannelScopeEmail = 2,
/// SMS channels
  UAChannelScopeSms = 3,
};


/// Channel scopes.
SWIFT_CLASS_NAMED("ChannelScopes")
@interface UAChannelScopes : NSObject
/// The raw channel scope values.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull values;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Channel type
typedef SWIFT_ENUM_NAMED(NSInteger, UAChannelType, "ChannelType", open) {
/// Email channel
  UAChannelTypeEmail = 0,
/// SMS channel
  UAChannelTypeSms = 1,
/// Open channel
  UAChannelTypeOpen = 2,
};


/// A  circular region defines a radius, and latitude and longitude from its center.
SWIFT_CLASS_NAMED("CircularRegion")
@interface UACircularRegion : NSObject
/// Default constructor.
/// \param radius The radius of the circular region in meters.
///
/// \param latitude The latitude of the circular region’s center point in degrees.
///
/// \param longitude The longitude of the circular region’s center point in degrees.
///
///
/// returns:
/// Circular region object or <code>nil</code> if error occurs
- (nullable instancetype)initWithRadius:(double)radius latitude:(double)latitude longitude:(double)longitude OBJC_DESIGNATED_INITIALIZER;
/// Factory method for creating a circular region.
/// \param radius The radius of the circular region in meters.
///
/// \param latitude The latitude of the circular region’s center point in degrees.
///
/// \param longitude The longitude of the circular region’s center point in degrees.
///
///
/// returns:
/// Circular region object or <code>nil</code> if error occurs
+ (UACircularRegion * _Nullable)circularRegionWithRadius:(double)radius latitude:(double)latitude longitude:(double)longitude SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the possible sites.
typedef SWIFT_ENUM_NAMED(NSInteger, UACloudSite, "CloudSite", open) {
/// Represents the US cloud site. This is the default value.
/// Projects available at go.airship.com must use this value.
  UACloudSiteUS SWIFT_COMPILE_NAME("us") = 0,
/// Represents the EU cloud site.
/// Projects available at go.airship.eu must use this value.
  UACloudSiteEU SWIFT_COMPILE_NAME("eu") = 1,
};

@class UIColor;

/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("ColorUtils")
@interface UAColorUtils : NSObject
+ (UIColor * _Nullable)colorWithHexString:(NSString * _Nonnull)hexString SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)hexStringWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// NOTE: For internal use only. :nodoc:
SWIFT_CLASS_NAMED("ComponentDisableHelper")
@interface UAComponentDisableHelper : NSObject
@property (nonatomic, copy) void (^ _Nullable onChange)(void);
@property (nonatomic) BOOL enabled;
- (nonnull instancetype)initWithDataStore:(UAPreferenceDataStore * _Nonnull)dataStore className:(NSString * _Nonnull)className OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Representations of various device connection types.
SWIFT_CLASS_NAMED("ConnectionType")
@interface UAConnectionType : NSObject
/// Network is unreachable.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull none;)
+ (NSString * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
/// Network is a cellular or mobile network.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull cell;)
+ (NSString * _Nonnull)cell SWIFT_WARN_UNUSED_RESULT;
/// Network is a WiFi network.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wifi;)
+ (NSString * _Nonnull)wifi SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Contact data.
SWIFT_CLASS_NAMED("ContactConflictEvent")
@interface UAContactConflictEvent : NSObject
/// The named user ID if the conflict was caused by an identify operation with an existing named user through the SDK.
@property (nonatomic, readonly, copy) NSString * _Nullable conflictingNamedUserID;
/// Subscription lists.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, UAChannelScopes *> * _Nonnull subscriptionLists;
/// Tag groups.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull tags;
/// Attributes.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nonnull attributes;
/// Associated channels.
@property (nonatomic, readonly, copy) NSArray<UAAssociatedChannel *> * _Nonnull channels;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSPersistentStore;
@class NSManagedObjectContext;

/// note:
/// For internal use only. :nodoc:
SWIFT_PROTOCOL_NAMED("CoreDataDelegate")
@protocol UACoreDataDelegate
- (void)persistentStoreCreated:(NSPersistentStore * _Nonnull)store name:(NSString * _Nonnull)name context:(NSManagedObjectContext * _Nonnull)context;
@end


/// CustomEvent captures information regarding a custom event for
/// Analytics.
SWIFT_CLASS_NAMED("CustomEvent")
@interface UACustomEvent : NSObject <UAEvent>
/// The max number of properties.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger maxPropertiesSize;)
+ (NSInteger)maxPropertiesSize SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull eventNameKey;)
+ (NSString * _Nonnull)eventNameKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull eventValueKey;)
+ (NSString * _Nonnull)eventValueKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull eventPropertiesKey;)
+ (NSString * _Nonnull)eventPropertiesKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull eventTransactionIDKey;)
+ (NSString * _Nonnull)eventTransactionIDKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull eventInteractionIDKey;)
+ (NSString * _Nonnull)eventInteractionIDKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull eventInteractionTypeKey;)
+ (NSString * _Nonnull)eventInteractionTypeKey SWIFT_WARN_UNUSED_RESULT;
/// The send ID that triggered the event.
/// note:
/// For internal use only. :nodoc:
@property (nonatomic, copy) NSString * _Nullable conversionSendID;
/// The conversion push metadata.
/// note:
/// For internal use only. :nodoc:
@property (nonatomic, copy) NSString * _Nullable conversionPushMetadata;
/// The event’s template type. The template type’s length must not exceed 255 characters or it will
/// invalidate the event.
/// note:
/// For internal use only. :nodoc:
@property (nonatomic, copy) NSString * _Nullable templateType;
/// The event’s value. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
@property (nonatomic, strong) NSNumber * _Nullable eventValue;
/// The event’s name. The name’s length must not exceed 255 characters or it will
/// invalidate the event.
@property (nonatomic, copy) NSString * _Nullable eventName;
/// The event’s transaction ID. The ID’s length must not exceed 255 characters or it will
/// invalidate the event.
@property (nonatomic, copy) NSString * _Nullable transactionID;
/// The event’s interaction type. The type’s length must not exceed 255 characters or it will
/// invalidate the event.
@property (nonatomic, copy) NSString * _Nullable interactionType;
/// The event’s interaction ID. The ID’s length must not exceed 255 characters or it will
/// invalidate the event.
@property (nonatomic, copy) NSString * _Nullable interactionID;
/// The event’s properties. Properties must be valid JSON.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull properties;
@property (nonatomic, readonly, copy) NSString * _Nonnull eventType;
@property (nonatomic, readonly) UAEventPriority priority;
/// Constructor for testing. :nodoc:
/// \param name The name of the event. The event’s name must not exceed
/// 255 characters or it will invalidate the event.
///
/// \param value The event value.
///
///
/// returns:
/// A Custom event instance
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name value:(NSNumber * _Nullable)value OBJC_DESIGNATED_INITIALIZER;
/// Constructor
/// \param name The name of the event. The event’s name must not exceed
/// 255 characters or it will invalidate the event.
///
/// \param stringValue The value of the event as a string. The value must be a valid
/// number between -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Custom event instance
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name stringValue:(NSString * _Nullable)stringValue;
/// Factory method for creating a custom event.
/// \param name The name of the event. The event’s name must not exceed
/// 255 characters or it will invalidate the event.
///
///
/// returns:
/// A Custom event instance
+ (UACustomEvent * _Nonnull)eventWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a custom event with a value from a string.
/// \param name The name of the event. The event’s name must not exceed
/// 255 characters or it will invalidate the event.
///
/// \param string The value of the event as a string. The value must be a valid
/// number between -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Custom event instance
+ (UACustomEvent * _Nonnull)eventWithName:(NSString * _Nonnull)name valueFromString:(NSString * _Nullable)string SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a custom event with a value.
/// \param name The name of the event. The event’s name must not exceed
/// 255 characters or it will invalidate the event.
///
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Custom event instance
+ (UACustomEvent * _Nonnull)eventWithName:(NSString * _Nonnull)name value:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
/// Sets the custom event’s interaction type and identifier as coming from a Message Center message.
/// note:
/// For internal use only. :nodoc:
/// \param messageID The message ID.
///
- (void)setInteractionFromMessageCenterMessage:(NSString * _Nullable)messageID;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull data;
/// note:
/// For internal use only. :nodoc:
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull payload;
/// Adds the event to analytics.
- (void)track;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol to be implemented by deep link handlers.
SWIFT_PROTOCOL_NAMED("DeepLinkDelegate")
@protocol UADeepLinkDelegate
/// Called when a deep link has been triggered from Airship. If implemented, the delegate is responsible for processing the provided url.
/// \param deepLink The deep link.
///
- (void)receivedDeepLink:(NSURL * _Nonnull)deepLink completionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

/// note:
/// For internal use only. :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, UADispatcherTimeBase, "DispatcherTimeBase", open) {
/// Wall time.
  UADispatcherTimeBaseWall = 0,
/// System time.
  UADispatcherTimeBaseSystem = 1,
};


/// Email registration options
SWIFT_CLASS_NAMED("EmailRegistrationOptions")
@interface UAEmailRegistrationOptions : NSObject
/// Returns an Email registration options with double opt-in value to false
/// \param transactionalOptedIn The transactional opted-in value
///
/// \param commercialOptedIn The commercial opted-in value
///
/// \param properties The properties. They must be JSON serializable.
///
///
/// returns:
/// An Email registration options.
+ (UAEmailRegistrationOptions * _Nonnull)commercialOptionsWithTransactionalOptedIn:(NSDate * _Nullable)transactionalOptedIn commercialOptedIn:(NSDate * _Nullable)commercialOptedIn properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
/// Returns an Email registration options.
/// \param transactionalOptedIn The transactional opted-in date.
///
/// \param properties The properties. They must be JSON serializable.
///
/// \param doubleOptIn The double opt-in value
///
///
/// returns:
/// An Email registration options.
+ (UAEmailRegistrationOptions * _Nonnull)optionsWithTransactionalOptedIn:(NSDate * _Nullable)transactionalOptedIn properties:(NSDictionary<NSString *, id> * _Nullable)properties doubleOptIn:(BOOL)doubleOptIn SWIFT_WARN_UNUSED_RESULT;
/// Returns an Email registration options.
/// \param properties The properties. They must be JSON serializable.
///
/// \param doubleOptIn The double opt-in value
///
///
/// returns:
/// An Email registration options.
+ (UAEmailRegistrationOptions * _Nonnull)optionsWithProperties:(NSDictionary<NSString *, id> * _Nullable)properties doubleOptIn:(BOOL)doubleOptIn SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UAExperimentMessageInfo;
@class UAExperimentResult;

SWIFT_PROTOCOL_NAMED("ExperimentDataProvider")
@protocol UAExperimentDataProvider
- (void)evaluateExperimentsWithInfo:(UAExperimentMessageInfo * _Nonnull)info contactID:(NSString * _Nullable)contactID completionHandler:(void (^ _Nonnull)(UAExperimentResult * _Nullable, NSError * _Nullable))completionHandler;
@end


SWIFT_CLASS_NAMED("ExperimentResult")
@interface UAExperimentResult : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull channelID;
@property (nonatomic, readonly, copy) NSString * _Nonnull contactID;
@property (nonatomic, readonly) BOOL isMatch;
@property (nonatomic, readonly, copy) NSArray * _Nonnull evaluatedExperimentsReportingData;
- (nonnull instancetype)initWithChannelId:(NSString * _Nonnull)channelId contactId:(NSString * _Nonnull)contactId isMatch:(BOOL)isMatch reportingMetadata:(NSArray * _Nonnull)reportingMetadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Event to track install attributions.
SWIFT_CLASS_NAMED("InstallAttributionEvent")
@interface UAInstallAttributionEvent : NSObject <UAEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull eventType;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull data;
@property (nonatomic, readonly) UAEventPriority priority;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAppPurchaseDate:(NSDate * _Nonnull)appPurchaseDate iAdImpressionDate:(NSDate * _Nonnull)iAdImpressionDate OBJC_DESIGNATED_INITIALIZER;
/// Factory method to create a InstallAttributionEvent.
/// \param appPurchaseDate The app purchase date.
///
/// \param iAdImpressionDate The iAD impression date.
///
///
/// returns:
/// InstallAttributionEvent instance.
+ (UAInstallAttributionEvent * _Nonnull)eventWithAppPurchaseDate:(NSDate * _Nonnull)appPurchaseDate iAdImpressionDate:(NSDate * _Nonnull)iAdImpressionDate SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create an InstallAttributionEvent.
///
/// returns:
/// InstallAttributionEvent instance.
+ (UAInstallAttributionEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
@end

@class UNNotificationAction;

/// note:
/// For Internal use only :nodoc:
SWIFT_CLASS_NAMED("InteractiveNotificationEvent") SWIFT_AVAILABILITY(tvos,unavailable)
@interface UAInteractiveNotificationEvent : NSObject <UAEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull eventType;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull data;
@property (nonatomic, readonly) UAEventPriority priority;
- (nonnull instancetype)initWithAction:(UNNotificationAction * _Nonnull)action category:(NSString * _Nonnull)category notification:(NSDictionary * _Nonnull)notification responseText:(NSString * _Nullable)responseText OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UAJSONValueMatcher;

/// Matcher for a JSON payload.
SWIFT_CLASS_NAMED("JSONMatcher")
@interface UAJSONMatcher : NSObject
/// Factory method to create a JSON matcher.
/// \param valueMatcher Matcher to apply to the value. 
///
///
/// returns:
/// A JSONMatcher instance.
- (nonnull instancetype)initWithValueMatcher:(UAJSONValueMatcher * _Nonnull)valueMatcher;
/// Factory method to create a JSON matcher.
/// \param valueMatcher Matcher to apply to the value. 
///
/// \param scope Used to path into the object before evaluating the value. 
///
///
/// returns:
/// A JSONMatcher instance.
- (nonnull instancetype)initWithValueMatcher:(UAJSONValueMatcher * _Nonnull)valueMatcher scope:(NSArray<NSString *> * _Nonnull)scope;
/// note:
/// For internal use only. :nodoc:
- (nonnull instancetype)initWithValueMatcher:(UAJSONValueMatcher * _Nonnull)valueMatcher ignoreCase:(BOOL)ignoreCase;
/// note:
/// For internal use only. :nodoc:
- (nonnull instancetype)initWithValueMatcher:(UAJSONValueMatcher * _Nonnull)valueMatcher key:(NSString * _Nonnull)key;
/// note:
/// For internal use only. :nodoc:
- (nonnull instancetype)initWithValueMatcher:(UAJSONValueMatcher * _Nonnull)valueMatcher key:(NSString * _Nonnull)key scope:(NSArray<NSString *> * _Nonnull)scope;
/// note:
/// For internal use only. :nodoc:
- (nonnull instancetype)initWithValueMatcher:(UAJSONValueMatcher * _Nonnull)valueMatcher scope:(NSArray<NSString *> * _Nonnull)scope ignoreCase:(BOOL)ignoreCase;
/// Factory method to create a matcher from a JSON payload.
/// \param json The JSON payload. 
///
/// \param error An NSError pointer for storing errors, if applicable. 
///
///
/// returns:
/// A JSONMatcher instance or <code>nil</code> if the JSON is invalid.
- (nullable instancetype)initWithJSON:(id _Nullable)json error:(NSError * _Nullable * _Nullable)error;
/// The matcher’s JSON payload.
- (NSDictionary<NSString *, id> * _Nonnull)payload SWIFT_WARN_UNUSED_RESULT;
/// Evaluates the object with the matcher.
/// \param value The object to evaluate.
///
///
/// returns:
/// true if the matcher matches the object, otherwise false.
- (BOOL)evaluateObject:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// note:
/// For internal use only. :nodoc:
- (BOOL)evaluateObject:(id _Nullable)value ignoreCase:(BOOL)ignoreCase SWIFT_WARN_UNUSED_RESULT;
/// note:
/// For internal use only. :nodoc:
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
/// note:
/// For internal use only. :nodoc:
- (BOOL)isEqualToJSONMatcher:(UAJSONMatcher * _Nonnull)matcher SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Predicate for JSON payloads.
SWIFT_CLASS_NAMED("JSONPredicate")
@interface UAJSONPredicate : NSObject
/// Factory method to create a predicate from a JSON payload.
/// \param json The JSON payload. 
///
///
/// returns:
/// A predicate or <code>nil</code> if the JSON is invalid.
- (nullable instancetype)initWithJSON:(id _Nullable)json error:(NSError * _Nullable * _Nullable)error;
/// Gets the predicate’s JSON payload.
///
/// returns:
/// The predicate’s JSON payload.
- (NSDictionary<NSString *, id> * _Nonnull)payload SWIFT_WARN_UNUSED_RESULT;
/// Evaluates the object with the predicate.
/// \param object The object to evaluate.
///
///
/// returns:
/// true if the predicate matches the object, otherwise false.
- (BOOL)evaluateObject:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a JSON predicate from a JSONMatcher.
/// \param matcher A JSON matcher.
///
///
/// returns:
/// A JSON predicate.
- (nonnull instancetype)initWithJSONMatcher:(UAJSONMatcher * _Nullable)matcher;
/// Factory method to create a JSON predicate formed by AND-ing an array of predicates.
/// \param subpredicates An array of predicates.
///
///
/// returns:
/// A JSON predicate.
+ (UAJSONPredicate * _Nonnull)andPredicateWithSubpredicates:(NSArray<UAJSONPredicate *> * _Nullable)subpredicates SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a JSON predicate formed by OR-ing an array of predicates.
/// \param subpredicates An array of predicates.
///
///
/// returns:
/// A JSON predicate.
+ (UAJSONPredicate * _Nonnull)orPredicateWithSubpredicates:(NSArray<UAJSONPredicate *> * _Nullable)subpredicates SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a JSON predicate by NOT-ing a predicate.
/// \param subpredicate A predicate.
///
///
/// returns:
/// A JSON predicate.
+ (UAJSONPredicate * _Nonnull)notPredicateWithSubpredicate:(UAJSONPredicate * _Nonnull)subpredicate SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("JSONUtils")
@interface UAJSONUtils : NSObject
+ (NSData * _Nullable)dataWithObject:(id _Nonnull)obj options:(NSJSONWritingOptions)options error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)stringWithObject:(id _Nonnull)obj options:(NSJSONWritingOptions)options error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)stringWithObject:(id _Nonnull)obj SWIFT_WARN_UNUSED_RESULT;
+ (id _Nullable)objectWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (id _Nullable)objectWithString:(NSString * _Nonnull)string options:(NSJSONReadingOptions)options error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Defines a JSON value matcher.
SWIFT_CLASS_NAMED("JSONValueMatcher")
@interface UAJSONValueMatcher : NSObject
/// The matcher’s JSON payload.
- (NSDictionary<NSString *, id> * _Nonnull)payload SWIFT_WARN_UNUSED_RESULT;
/// Evaluates the object with the matcher.
/// \param value The object to evaluate.
///
///
/// returns:
/// true  if the matcher matches the object, otherwise false.
- (BOOL)evaluateObject:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Evaluates the object with the matcher.
/// \param value The object to evaluate.
///
/// \param ignoreCase YES to ignore case when checking String values, NO to check case.
/// Strings contained in arrays and dictionaries also follow this rule.
///
///
/// returns:
/// true if the matcher matches the object, otherwise false.
- (BOOL)evaluateObject:(id _Nullable)value ignoreCase:(BOOL)ignoreCase SWIFT_WARN_UNUSED_RESULT;
/// note:
/// For internal use only. :nodoc:
- (BOOL)value:(id _Nullable)valueOne isEqualToValue:(id _Nullable)valueTwo ignoreCase:(BOOL)ignoreCase SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for a number that is
/// at least the specified number.
/// \param number The lower bound for the number.
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nonnull)matcherWhereNumberAtLeast:(NSNumber * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for a number between
/// the lowerNumber and higherNumber.
/// \param lowerNumber The lower bound for the number.
///
/// \param higherNumber The upper bound for the number.
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nonnull)matcherWhereNumberAtLeast:(NSNumber * _Nonnull)lowerNumber atMost:(NSNumber * _Nonnull)higherNumber SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for a number that is
/// at most the specified number.
/// \param number The upper bound for the number.
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nonnull)matcherWhereNumberAtMost:(NSNumber * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for an exact number.
/// \param number The expected number value.
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nonnull)matcherWhereNumberEquals:(NSNumber * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for an exact boolean.
/// \param boolean The expected boolean value.
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nonnull)matcherWhereBooleanEquals:(BOOL)boolean SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for an exact string.
/// \param string The expected string value.
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nonnull)matcherWhereStringEquals:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for the presence of a value.
/// \param present true if the value must be present, otherwise false.
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nonnull)matcherWhereValueIsPresent:(BOOL)present SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for a version constraint.
/// \param versionConstraint The version constraint to be matched against. 
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nullable)matcherWithVersionConstraint:(NSString * _Nonnull)versionConstraint SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for an array value.
/// \param predicate A predicate to be used to evaluate each value in the array for a match. 
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nullable)matcherWithArrayContainsPredicate:(UAJSONPredicate * _Nonnull)predicate SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for a value in an array.
/// \param predicate A predicate to be used to evaluate the value at the index. 
///
/// \param index The array index. 
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nullable)matcherWithArrayContainsPredicate:(UAJSONPredicate * _Nonnull)predicate atIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher from a JSON payload.
/// \param json The JSON payload. 
///
/// \param error An NSError pointer for storing errors, if applicable. 
///
///
/// returns:
/// A value matcher, or <code>nil</code> if the JSON is invalid.
+ (UAJSONValueMatcher * _Nullable)matcherWithJSON:(id _Nullable)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// note:
/// For internal use only. :nodoc:
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("JSONValueTransformer")
@interface UAJSONValueTransformer : NSValueTransformer
+ (Class _Nonnull)transformedValueClass SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)allowsReverseTransformation SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)transformedValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)reverseTransformedValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("JavaScriptCommand")
@interface UAJavaScriptCommand : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull arguments;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull options;
@property (nonatomic, readonly, copy) NSURL * _Nonnull URL;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKWebView;

/// A standard protocol for handling commands from the NativeBridge..
SWIFT_PROTOCOL_NAMED("JavaScriptCommandDelegate")
@protocol UAJavaScriptCommandDelegate
/// Delegates must implement this method. Implementations take a model object representing
/// the JavaScript command which includes the command name, an array of string arguments,
/// and a dictionary of key-value pairs (all strings).
/// If the passed command name is not one the delegate responds to return <code>NO</code>. If the command is handled, return
/// <code>YES</code> and the command will not be handled by another delegate.
/// To pass information to the delegate from a webview, insert links with a “uairship” scheme,
/// args in the path and key-value option pairs in the query string. The host
/// portion of the URL is treated as the command name.
/// The basic URL format:
/// uairship:///command-name/<args>?<key/value options>
/// For example, to invoke a command named “foo”, and pass in three args (arg1, arg2 and arg3)
/// and three key-value options {option1:one, option2:two, option3:three}:
/// uairship:///foo/arg1/arg2/arg3?option1=one&option2=two&option3=three
/// \param command The javascript command
///
/// \param webView The web view
///
///
/// returns:
/// <code>true</code> if the command was handled, otherwise <code>false</code>
- (BOOL)performCommand:(UAJavaScriptCommand * _Nonnull)command webView:(WKWebView * _Nonnull)webView SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("JavaScriptEnvironmentProtocol")
@protocol UAJavaScriptEnvironmentProtocol
/// Adds a string getter to the Airship JavaScript environment.
/// \param getter The getter’s name.
///
/// \param string The getter’s value.
///
- (void)addStringGetter:(NSString * _Nonnull)getter value:(NSString * _Nullable)string;
/// Adds a number getter to the Airship JavaScript environment.
/// \param getter The getter’s name.
///
/// \param number The getter’s value.
///
- (void)addNumberGetter:(NSString * _Nonnull)getter value:(NSNumber * _Nullable)number;
/// Adds a dictionary getter to the Airship JavaScript environment.
/// \param getter The getter’s name.
///
/// \param dictionary The getter’s value.
///
- (void)addDictionaryGetter:(NSString * _Nonnull)getter value:(NSDictionary * _Nullable)dictionary;
/// Builds the script that can be injected into a web view.
///
/// returns:
/// The script.
- (void)buildWithCompletionHandler:(void (^ _Nonnull)(NSString * _Nonnull))completionHandler;
@end


/// The JavaScript environment builder that is used by the native bridge.
SWIFT_CLASS_NAMED("JavaScriptEnvironment")
@interface UAJavaScriptEnvironment : NSObject <UAJavaScriptEnvironmentProtocol>
- (nonnull instancetype)init;
- (void)addStringGetter:(NSString * _Nonnull)getter value:(NSString * _Nullable)string;
- (void)addNumberGetter:(NSString * _Nonnull)getter value:(NSNumber * _Nullable)number;
- (void)addDictionaryGetter:(NSString * _Nonnull)getter value:(NSDictionary * _Nullable)dictionary;
- (void)buildWithCompletionHandler:(void (^ _Nonnull)(NSString * _Nonnull))completionHandler;
@end



/// note:
/// Internal use only :nodoc:
SWIFT_CLASS_NAMED("LocalizationUtils")
@interface UALocalizationUtils : NSObject
/// Returns a localized string associated to the receiver by the given table, returning the receiver if the
/// string cannot be found. This method searches the main bundle before falling back on AirshipCore, and
/// finally the provided module bundle, allowing for developers to override or supplement any officially bundled localizations.
/// \param string The string. 
///
/// \param table The table. 
///
/// \param moduleBundle The module bundle. 
///
/// \param defaultValue The default value. 
///
///
/// returns:
/// The localized string corresponding to the key and table, or the default value if it cannot be found.
+ (NSString * _Nullable)localizedString:(NSString * _Nonnull)string withTable:(NSString * _Nonnull)table moduleBundle:(NSBundle * _Nullable)moduleBundle defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Returns a localized string associated to the receiver by the given table, returning the receiver if the
/// string cannot be found. This method searches the main bundle before falling back on AirshipCore, and
/// finally the provided module bundle, allowing for developers to override or supplement any officially bundled localizations.
/// \param string The string. 
///
/// \param table The table. 
///
/// \param moduleBundle The module bundle. 
///
///
/// returns:
/// The localized string corresponding to the key and table, or the key if it cannot be found.
+ (NSString * _Nullable)localizedString:(NSString * _Nonnull)string withTable:(NSString * _Nonnull)table moduleBundle:(NSBundle * _Nullable)moduleBundle SWIFT_WARN_UNUSED_RESULT;
/// Returns a localized string associated to the receiver by the given table, falling back on the provided
/// locale and finally the receiver if the string cannot be found. This method searches the main bundle before
/// falling back on AirshipCore, and finally the the provided module bundle, allowing for developers to override
/// or supplement any officially bundled localizations.
/// \param string The string. 
///
/// \param table The table. 
///
/// \param moduleBundle The module bundle. 
///
/// \param fallbackLocale The locale to use in case a localized string for the current locale cannot be found. 
///
///
/// returns:
/// The localized string corresponding to the key and table, or the key if it cannot be found.
+ (NSString * _Nullable)localizedString:(NSString * _Nonnull)string withTable:(NSString * _Nonnull)table moduleBundle:(NSBundle * _Nullable)moduleBundle fallbackLocale:(NSString * _Nullable)fallbackLocale SWIFT_WARN_UNUSED_RESULT;
/// Checks if a localized string associated to the receiver exists in the given table. This method searches
/// the main bundle before falling back on AirshipCore, and finally the provided module bundle, allowing for developers
/// to override or supplement any officially bundled localizations.
/// \param string The string. 
///
/// \param table The table. 
///
/// \param moduleBundle The module bundle. 
///
///
/// returns:
/// YES if a localized string corresponding to the key and table was found, or NO if it cannot be found.
+ (BOOL)localizedStringExists:(NSString * _Nonnull)string inTable:(NSString * _Nonnull)table moduleBundle:(NSBundle * _Nullable)moduleBundle SWIFT_WARN_UNUSED_RESULT;
/// Checks if a localized string associated to the receiver exists in the given table, falling back on the provided
/// locale. This method searches the main bundle before falling back on AirshipCore, and finally the provided module bundle,
/// allowing for developers to override or supplement any officially bundled localizations.
/// \param string The string. 
///
/// \param table The table. 
///
/// \param moduleBundle The module bundle. 
///
/// \param fallbackLocale The locale to use in case a localized string for the current locale cannot be found. 
///
///
/// returns:
/// YES if a localized string corresponding to the key and table was found, or NO if it cannot be found.
+ (BOOL)localizedStringExists:(NSString * _Nonnull)string inTable:(NSString * _Nonnull)table moduleBundle:(NSBundle * _Nullable)moduleBundle fallbackLocale:(NSString * _Nullable)fallbackLocale SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A MediaEventTemplate represents a custom media event template for the
/// application.
SWIFT_CLASS_NAMED("MediaEventTemplate")
@interface UAMediaEventTemplate : NSObject
/// The event’s ID.
@property (nonatomic, copy) NSString * _Nullable identifier;
/// The event’s category.
@property (nonatomic, copy) NSString * _Nullable category;
/// The event’s type.
@property (nonatomic, copy) NSString * _Nullable type;
/// The event’s description.
@property (nonatomic, copy) NSString * _Nullable eventDescription;
/// <code>YES</code> if the event is a feature, else <code>NO</code>.
@property (nonatomic) BOOL isFeature;
/// The event’s author. The author’s length must not exceed 255 characters
/// or it will invalidate the event.
@property (nonatomic, copy) NSString * _Nullable author;
/// The event’s publishedDate. The publishedDate’s length must not exceed 255 characters
/// or it will invalidate the event.
@property (nonatomic, copy) NSString * _Nullable publishedDate;
/// Factory method for creating a browsed content event template.
///
/// returns:
/// A Media event template instance
+ (UAMediaEventTemplate * _Nonnull)browsedTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a starred content event template.
///
/// returns:
/// A Media event template instance
+ (UAMediaEventTemplate * _Nonnull)starredTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a shared content event template.
///
/// returns:
/// A Media event template instance
+ (UAMediaEventTemplate * _Nonnull)sharedTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a shared content event template.
/// If the source or medium exceeds 255 characters it will cause the event to be invalid.
/// \param source The source as an NSString.
///
/// \param medium The medium as an NSString.
///
///
/// returns:
/// A Media event template instance
+ (UAMediaEventTemplate * _Nonnull)sharedTemplateWithSource:(NSString * _Nullable)source withMedium:(NSString * _Nullable)medium SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a consumed content event template.
///
/// returns:
/// A Media event template instance
+ (UAMediaEventTemplate * _Nonnull)consumedTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a consumed content event template with a value.
/// \param valueString The value of the event as as string. The value must be between
/// -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Media event template instance
+ (UAMediaEventTemplate * _Nonnull)consumedTemplateWithValueFromString:(NSString * _Nullable)valueString SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a consumed content event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Media event template instance
+ (UAMediaEventTemplate * _Nonnull)consumedTemplateWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Creates the custom media event.
- (UACustomEvent * _Nonnull)createEvent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("MessageInfo")
@interface UAExperimentMessageInfo : NSObject
- (nonnull instancetype)initWithMessageType:(NSString * _Nonnull)messageType campaignsJSON:(id _Nullable)campaignsJSON OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("NSArrayValueTransformer")
@interface UANSArrayValueTransformer : NSValueTransformer
+ (Class _Nonnull)transformedValueClass SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)allowsReverseTransformation SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)transformedValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)reverseTransformedValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("NSDictionaryValueTransformer")
@interface UANSDictionaryValueTransformer : NSValueTransformer
+ (Class _Nonnull)transformedValueClass SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)allowsReverseTransformation SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)transformedValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)reverseTransformedValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("NSURLValueTransformer")
@interface UANSURLValueTransformer : NSValueTransformer
+ (Class _Nonnull)transformedValueClass SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)allowsReverseTransformation SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)transformedValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)reverseTransformedValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol UANativeBridgeDelegate;
@protocol UANavigationDelegate;
@protocol UANativeBridgeExtensionDelegate;
@class WKNavigationAction;
@class WKNavigationResponse;
@class WKNavigation;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;

/// The native bridge will automatically load the Airship JavaScript environment into whitlelisted sites. The native
/// bridge must be assigned as the navigation delegate on a <code>WKWebView</code> in order to function.
SWIFT_CLASS_NAMED("NativeBridge")
@interface UANativeBridge : NSObject <WKNavigationDelegate>
/// Delegate to support additional native bridge features such as <code>close</code>.
@property (nonatomic, weak) id <UANativeBridgeDelegate> _Nullable nativeBridgeDelegate;
/// Optional delegate to forward any WKNavigationDelegate calls.
@property (nonatomic, weak) id <UANavigationDelegate> _Nullable forwardNavigationDelegate;
/// Optional delegate to support custom JavaScript commands.
@property (nonatomic, weak) id <UAJavaScriptCommandDelegate> _Nullable javaScriptCommandDelegate;
/// Optional delegate to extend the native bridge.
@property (nonatomic, weak) id <UANativeBridgeExtensionDelegate> _Nullable nativeBridgeExtensionDelegate;
/// NativeBridge initializer.
- (nonnull instancetype)init;
/// Decide whether to allow or cancel a navigation. :nodoc:
/// If a uairship:// URL, process it ourselves
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
/// Decide whether to allow or cancel a navigation after its response is known. :nodoc:
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationResponse:(WKNavigationResponse * _Nonnull)navigationResponse decisionHandler:(void (^ _Nonnull)(WKNavigationResponsePolicy))decisionHandler;
/// Called when the navigation is complete. :nodoc:
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
/// Called when the web view begins to receive web content. :nodoc:
- (void)webView:(WKWebView * _Nonnull)webView didCommitNavigation:(WKNavigation * _Null_unspecified)navigation;
/// Called when the web view’s web content process is terminated. :nodoc:
- (void)webViewWebContentProcessDidTerminate:(WKWebView * _Nonnull)webView;
/// Called when web content begins to load in a web view. :nodoc:
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
/// Called when a web view receives a server redirect. :nodoc:
- (void)webView:(WKWebView * _Nonnull)webView didReceiveServerRedirectForProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
/// Called when an error occurs during navigation. :nodoc:
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
/// Called when an error occurs while the web view is loading content. :nodoc:
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
/// Called when the web view needs to respond to an authentication challenge. :nodoc:
- (void)webView:(WKWebView * _Nonnull)webView didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
@end


SWIFT_PROTOCOL_NAMED("NativeBridgeDelegate")
@protocol UANativeBridgeDelegate
/// Called when <code>UAirship.close()</code> is triggered from the JavaScript environment.
- (void)close;
@end


/// Delegate to extend the native bridge.
SWIFT_PROTOCOL_NAMED("NativeBridgeExtensionDelegate")
@protocol UANativeBridgeExtensionDelegate
/// Called when an action is triggered from the JavaScript Environment. This method should return the metadata used in the <code>ActionArgument</code>.
/// \param command The JavaScript command. 
///
/// \param webView The webview. 
/// @return The action metadata.
///
- (NSDictionary<NSString *, NSString *> * _Nonnull)actionsMetadataForCommand:(UAJavaScriptCommand * _Nonnull)command webView:(WKWebView * _Nonnull)webView SWIFT_WARN_UNUSED_RESULT;
/// Called before the JavaScript environment is being injected into the web view.
/// \param js The JavaScript environment. 
///
/// \param webView  The web view. 
///
/// \param completionHandler The completion handler when finished. 
///
- (void)extendJavaScriptEnvironment:(id <UAJavaScriptEnvironmentProtocol> _Nonnull)js webView:(WKWebView * _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
@end


/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("NetworkMonitor")
@interface UANetworkMonitor : NSObject
@property (nonatomic, copy) void (^ _Nullable connectionUpdates)(BOOL);
@property (nonatomic, readonly) BOOL isConnected;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Utility methods to create categories from plist files or dictionaries.
SWIFT_CLASS_NAMED("NotificationCategories")
@interface UANotificationCategories : NSObject
/// Factory method to create the default set of user notification categories.
/// Background user notification actions will default to requiring authorization.
///
/// returns:
/// A set of user notification categories
+ (NSSet<UNNotificationCategory *> * _Nonnull)defaultCategories SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create the default set of user notification categories.
/// \param requireAuth If background actions should default to requiring authorization or not.
///
///
/// returns:
/// A set of user notification categories.
+ (NSSet<UNNotificationCategory *> * _Nonnull)defaultCategoriesWithRequireAuth:(BOOL)requireAuth SWIFT_WARN_UNUSED_RESULT;
/// Creates a set of categories from the specified <code>.plist</code> file.
/// Categories are defined in a plist dictionary with the category ID
/// followed by an array of user notification action definitions. The
/// action definitions use the same keys as the properties on the action,
/// with the exception of “foreground” mapping to either UIUserNotificationActivationModeForeground
/// or UIUserNotificationActivationModeBackground. The required action definition
/// title can be defined with either the “title” or “title_resource” key, where
/// the latter takes precedence. If “title_resource” does not exist, the action
/// definition title will fall back to the value of “title”. If the required action
/// definition title is not defined, the category will not be created.
/// Example:
/// {
/// “category_id” : [
/// {
/// “identifier” : “action ID”,
/// “title_resource” : “action title resource”,
/// “title” : “action title”,
/// “foreground” : true,
/// “authenticationRequired” : false,
/// “destructive” : false
/// }]
/// }
/// \param path The path of the <code>plist</code> file
///
///
/// returns:
/// A set of categories
+ (NSSet<UNNotificationCategory *> * _Nonnull)createCategoriesFromFile:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a user notification category with the specified ID and action definitions.
/// \param categoryId The category identifier
///
/// \param actionDefinitions An array of user notification action dictionaries used to construct UNNotificationAction for the category.
///
///
/// returns:
/// The user notification category created, or <code>nil</code> if an error occurred.
+ (UNNotificationCategory * _Nullable)createCategory:(NSString * _Nonnull)categoryId actions:(NSArray<NSDictionary *> * _Nonnull)actionDefinitions SWIFT_WARN_UNUSED_RESULT;
/// Creates a user notification category with the specified ID, action definitions, and
/// hiddenPreviewsBodyPlaceholder.
/// \param categoryId The category identifier
///
/// \param actionDefinitions An array of user notification action dictionaries used to construct UNNotificationAction for the category.
///
/// \param hiddenPreviewsBodyPlaceholder A placeholder string to display when the user has disabled notification previews for the app.
///
///
/// returns:
/// The user notification category created or <code>nil</code> if an error occurred.
+ (UNNotificationCategory * _Nullable)createCategory:(NSString * _Nonnull)categoryId actions:(NSArray<NSDictionary *> * _Nonnull)actionDefinitions hiddenPreviewsBodyPlaceholder:(NSString * _Nonnull)hiddenPreviewsBodyPlaceholder SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Open registration options
SWIFT_CLASS_NAMED("OpenRegistrationOptions")
@interface UAOpenRegistrationOptions : NSObject
/// Returns an open registration options with opt-in status
/// \param platformName The platform name
///
/// \param identifiers The identifiers
///
///
/// returns:
/// An open registration options.
+ (UAOpenRegistrationOptions * _Nonnull)optInPlatformName:(NSString * _Nonnull)platformName identifiers:(NSDictionary<NSString *, NSString *> * _Nullable)identifiers SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Preference data store.
/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("PreferenceDataStore")
@interface UAPreferenceDataStore : NSObject
- (nonnull instancetype)initWithAppKey:(NSString * _Nonnull)appKey;
- (id _Nullable)valueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
- (void)removeObjectForKey:(NSString * _Nonnull)key;
- (BOOL)keyExists:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)objectForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)stringForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSObject *> * _Nullable)arrayForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nullable)dictionaryForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSObject *> * _Nullable)stringArrayForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)integerForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (float)floatForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (double)doubleForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (double)doubleForKey:(NSString * _Nonnull)key defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)boolForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)boolForKey:(NSString * _Nonnull)key defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setInteger:(NSInteger)int_ forKey:(NSString * _Nonnull)key;
- (void)setFloat:(float)float_ forKey:(NSString * _Nonnull)key;
- (void)setDouble:(double)double_ forKey:(NSString * _Nonnull)key;
- (void)setBool:(BOOL)bool_ forKey:(NSString * _Nonnull)key;
- (void)setObject:(id _Nullable)object forKey:(NSString * _Nonnull)key;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface UAPreferenceDataStore (SWIFT_EXTENSION(AirshipCore))
- (void)storeExperimentResult:(UAExperimentResult * _Nullable)experiment forKey:(NSString * _Nonnull)key;
- (UAExperimentResult * _Nullable)experimentResultForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


/// A proximity region defines an identifier, major and minor.
SWIFT_CLASS_NAMED("ProximityRegion")
@interface UAProximityRegion : NSObject
/// Factory method for creating a proximity region.
/// \param proximityID The ID of the proximity region.
///
/// \param major The major.
///
/// \param minor The minor.
///
///
/// returns:
/// Proximity region object or <code>nil</code> if error occurs.
+ (UAProximityRegion * _Nullable)proximityRegionWithID:(NSString * _Nonnull)proximityID major:(double)major minor:(double)minor SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a proximity region.
/// \param proximityID The ID of the proximity region.
///
/// \param major The major.
///
/// \param minor The minor.
///
/// \param rssi The rssi.
///
///
/// returns:
/// Proximity region object or <code>nil</code> if error occurs.
+ (UAProximityRegion * _Nullable)proximityRegionWithID:(NSString * _Nonnull)proximityID major:(double)major minor:(double)minor rssi:(double)rssi SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a proximity region.
/// \param proximityID The ID of the proximity region.
///
/// \param major The major.
///
/// \param minor The minor.
///
/// \param latitude The latitude of the circular region’s center point in degrees.
///
/// \param longitude The longitude of the circular region’s center point in degrees.
///
///
/// returns:
/// Proximity region object or <code>nil</code> if error occurs.
+ (UAProximityRegion * _Nullable)proximityRegionWithID:(NSString * _Nonnull)proximityID major:(double)major minor:(double)minor latitude:(double)latitude longitude:(double)longitude SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a proximity region.
/// \param proximityID The ID of the proximity region.
///
/// \param major The major.
///
/// \param minor The minor.
///
/// \param rssi The rssi.
///
/// \param latitude The latitude of the circular region’s center point in degrees.
///
/// \param longitude The longitude of the circular region’s center point in degrees.
///
///
/// returns:
/// Proximity region object or <code>nil</code> if error occurs.
+ (UAProximityRegion * _Nullable)proximityRegionWithID:(NSString * _Nonnull)proximityID major:(double)major minor:(double)minor rssi:(double)rssi latitude:(double)latitude longitude:(double)longitude SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol to be implemented by push notification clients. All methods are optional.
SWIFT_PROTOCOL_NAMED("PushNotificationDelegate")
@protocol UAPushNotificationDelegate <NSObject>
@optional
/// Called when a notification is received in the foreground.
/// \param userInfo The notification info
///
/// \param completionHandler the completion handler to execute when notification processing is complete.
///
- (void)receivedForegroundNotification:(NSDictionary * _Nonnull)userInfo completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Called when a notification is received in the background.
/// \param userInfo The notification info
///
/// \param completionHandler the completion handler to execute when notification processing is complete.
///
- (void)receivedBackgroundNotification:(NSDictionary * _Nonnull)userInfo completionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
/// Called when a notification is received in the background or foreground and results in a user interaction.
/// User interactions can include launching the application from the push, or using an interactive control on the notification interface
/// such as a button or text field.
/// \param notificationResponse UNNotificationResponse object representing the user’s response
/// to the notification and the associated notification contents.
///
/// \param completionHandler the completion handler to execute when processing the user’s response has completed.
///
- (void)receivedNotificationResponse:(UNNotificationResponse * _Nonnull)notificationResponse completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Called when a notification has arrived in the foreground and is available for display.
/// \param options The notification presentation options.
///
/// \param notification The notification.
///
///
/// returns:
/// a UNNotificationPresentationOptions enum value indicating the presentation options for the notification.
- (UNNotificationPresentationOptions)extendPresentationOptions:(UNNotificationPresentationOptions)options notification:(UNNotification * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
/// Called when a notification has arrived in the foreground and is available for display.
/// \param options The notification presentation options.
///
/// \param notification The notification.
///
/// \param completionHandler The completion handler.
///
- (void)extendPresentationOptions:(UNNotificationPresentationOptions)options notification:(UNNotification * _Nonnull)notification completionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
@end


enum UABoundaryEvent : NSInteger;

/// A region event captures information regarding a region event for analytics.
SWIFT_CLASS_NAMED("RegionEvent")
@interface UARegionEvent : NSObject <UAEvent>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull regionIDKey;)
+ (NSString * _Nonnull)regionIDKey SWIFT_WARN_UNUSED_RESULT;
/// The region’s identifier.
@property (nonatomic, readonly, copy) NSString * _Nonnull regionID;
/// The source of the event.
@property (nonatomic, readonly, copy) NSString * _Nonnull source;
/// The type of boundary event.
@property (nonatomic, readonly) enum UABoundaryEvent boundaryEvent;
/// A circular region with a radius, and latitude/longitude from its center.
@property (nonatomic, readonly, strong) UACircularRegion * _Nullable circularRegion;
/// A proximity region with an identifier, major and minor.
@property (nonatomic, readonly, strong) UAProximityRegion * _Nullable proximityRegion;
@property (nonatomic, readonly, copy) NSString * _Nonnull eventType;
@property (nonatomic, readonly) UAEventPriority priority;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull data;
/// note:
/// For internal use only. :nodoc:
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull payload;
/// Factory method for creating a region event.
/// \param regionID The ID of the region.
///
/// \param source The source of the event.
///
/// \param boundaryEvent The type of boundary crossing event.
///
///
/// returns:
/// Region event object or <code>nil</code> if error occurs.
+ (UARegionEvent * _Nullable)regionEventWithRegionID:(NSString * _Nonnull)regionID source:(NSString * _Nonnull)source boundaryEvent:(enum UABoundaryEvent)boundaryEvent SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a region event.
/// \param regionID The ID of the region.
///
/// \param source The source of the event.
///
/// \param boundaryEvent The type of boundary crossing event.
///
/// \param circularRegion The circular region info.
///
/// \param proximityRegion The proximity region info.
///
///
/// returns:
/// Region event object or <code>nil</code> if error occurs.
+ (UARegionEvent * _Nullable)regionEventWithRegionID:(NSString * _Nonnull)regionID source:(NSString * _Nonnull)source boundaryEvent:(enum UABoundaryEvent)boundaryEvent circularRegion:(UACircularRegion * _Nullable)circularRegion proximityRegion:(UAProximityRegion * _Nullable)proximityRegion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Implement this protocol and add as a Push.registrationDelegate to receive
/// registration success and failure callbacks.
SWIFT_PROTOCOL_NAMED("RegistrationDelegate")
@protocol UARegistrationDelegate <NSObject>
@optional
/// Called when APNS registration completes.
/// \param authorizedSettings The settings that were authorized at the time of registration.
///
/// \param categories Set of the categories that were most recently registered.
///
/// \param status The authorization status.
///
- (void)notificationRegistrationFinishedWithAuthorizedSettings:(UAAuthorizedNotificationSettings)authorizedSettings categories:(NSSet<UNNotificationCategory *> * _Nonnull)categories status:(UAAuthorizationStatus)status;
/// Called when APNS registration completes.
/// \param authorizedSettings The settings that were authorized at the time of registration.
///
/// \param status The authorization status.
///
- (void)notificationRegistrationFinishedWithAuthorizedSettings:(UAAuthorizedNotificationSettings)authorizedSettings status:(UAAuthorizationStatus)status;
/// Called when notification authentication changes with the new authorized settings.
/// \param authorizedSettings UAAuthorizedNotificationSettings The newly changed authorized settings.
///
- (void)notificationAuthorizedSettingsDidChange:(UAAuthorizedNotificationSettings)authorizedSettings;
/// Called when the UIApplicationDelegate’s application:didRegisterForRemoteNotificationsWithDeviceToken:
/// delegate method is called.
/// \param deviceToken The APNS device token.
///
- (void)apnsRegistrationSucceededWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// Called when the UIApplicationDelegate’s application:didFailToRegisterForRemoteNotificationsWithError:
/// delegate method is called.
/// \param error An NSError object that encapsulates information why registration did not succeed.
///
- (void)apnsRegistrationFailedWithError:(NSError * _Nonnull)error;
@end

enum UARemoteDataSource : NSInteger;

SWIFT_CLASS_NAMED("RemoteDataInfo")
@interface UARemoteDataInfo : NSObject <NSCopying>
@property (nonatomic, readonly) enum UARemoteDataSource source;
@property (nonatomic, readonly, copy) NSString * _Nullable contactID;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (UARemoteDataInfo * _Nullable)fromJSONWithString:(NSString * _Nonnull)string error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)toEncodedJSONStringAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("RemoteDataPayload")
@interface UARemoteDataPayload : NSObject
/// The payload type
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// The timestamp of the most recent change to this data payload
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
/// The actual data associated with this payload
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull data;
@property (nonatomic, readonly, strong) UARemoteDataInfo * _Nullable remoteDataInfo;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, UARemoteDataSource, "RemoteDataSource", open) {
  UARemoteDataSourceApp = 0,
  UARemoteDataSourceContact = 1,
};


/// A RetailEventTemplate represents a custom retail event template for the
/// application.
SWIFT_CLASS_NAMED("RetailEventTemplate")
@interface UARetailEventTemplate : NSObject
/// The event’s value. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
@property (nonatomic, strong) NSNumber * _Nullable eventValue;
/// The event’s transaction ID. The transaction ID’s length must not exceed 255
/// characters or it will invalidate the event.
@property (nonatomic, copy) NSString * _Nullable transactionID;
/// The event’s ID.
@property (nonatomic, copy) NSString * _Nullable identifier;
/// The event’s category.
@property (nonatomic, copy) NSString * _Nullable category;
/// The event’s description.
@property (nonatomic, copy) NSString * _Nullable eventDescription;
/// The brand..
@property (nonatomic, copy) NSString * _Nullable brand;
/// If the item is new or not.
@property (nonatomic) BOOL isNewItem;
/// Factory method for creating a browsed event template.
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)browsedTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a browsed event template with a value.
/// \param valueString The value of the event as as string. The value must be between
/// -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)browsedTemplateWithValueFromString:(NSString * _Nullable)valueString SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a browsed event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)browsedTemplateWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating an addedToCart event template.
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)addedToCartTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating an addedToCart event template with a value.
/// \param valueString The value of the event as as string. The value must be between
/// -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)addedToCartTemplateWithValueFromString:(NSString * _Nullable)valueString SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating an addedToCart event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)addedToCartTemplateWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a starredProduct event template
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)starredProductTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a starredProduct event template with a value.
/// \param valueString The value of the event as as string. The value must be between
/// -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)starredProductTemplateWithValueFromString:(NSString * _Nullable)valueString SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a starredProduct event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)starredProductTemplateWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a purchased event template.
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)purchasedTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a purchased event template with a value.
/// \param valueString The value of the event as as string. The value must be between
/// -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)purchasedTemplateWithValueFromString:(NSString * _Nullable)valueString SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a purchased event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)purchasedTemplateWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a sharedProduct template event.
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)sharedProductTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a sharedProduct event template with a value.
/// \param valueString The value of the event as as string. The value must be between
/// -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)sharedProductTemplateWithValueFromString:(NSString * _Nullable)valueString SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a sharedProduct event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)sharedProductTemplateWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a sharedProduct event template.
/// \param source The source as an NSString.
///
/// \param medium The medium as an NSString
///
///
/// returns:
/// A Retail event template instance.
+ (UARetailEventTemplate * _Nonnull)sharedProductTemplateWithSource:(NSString * _Nullable)source withMedium:(NSString * _Nullable)medium SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a sharedProduct event template with a value.
/// \param valueString The value of the event as as string. The value must be between
/// -2^31 and 2^31 - 1 or it will invalidate the event.
///
/// \param source The source as an NSString.
///
/// \param medium The medium as an NSString.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)sharedProductTemplateWithValueFromString:(NSString * _Nullable)valueString withSource:(NSString * _Nullable)source withMedium:(NSString * _Nullable)medium SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a sharedProduct event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
/// \param source The source as an NSString.
///
/// \param medium The medium as an NSString.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)sharedProductTemplateWithValue:(NSNumber * _Nullable)value withSource:(NSString * _Nullable)source withMedium:(NSString * _Nullable)medium SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a wishlist event template.
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)wishlistTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a wishlist event template with a wishlist name and ID.
/// \param name The name of the wishlist as as string.
///
/// \param wishlistID The ID of the wishlist as as string.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)wishlistTemplateWithName:(NSString * _Nullable)name wishlistID:(NSString * _Nullable)wishlistID SWIFT_WARN_UNUSED_RESULT;
/// Creates the custom media event.
- (UACustomEvent * _Nonnull)createEvent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Airship config needed for runtime. Generated from <code>UAConfig</code> during takeOff.
SWIFT_CLASS_NAMED("RuntimeConfig")
@interface UARuntimeConfig : NSObject
/// note:
/// This option is reserved for internal debugging. :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull configUpdatedEvent;)
+ (NSNotificationName _Nonnull)configUpdatedEvent SWIFT_WARN_UNUSED_RESULT;
/// The current app key (resolved using the inProduction flag).
@property (nonatomic, readonly, copy) NSString * _Nonnull appKey;
/// The current app secret (resolved using the inProduction flag).
@property (nonatomic, readonly, copy) NSString * _Nonnull appSecret;
/// The current default Airship log level.
@property (nonatomic, readonly) enum UALogLevel logLevel;
/// The production status of this application.
@property (nonatomic, readonly) BOOL inProduction;
/// Auto pause InAppAutomation on launch.
@property (nonatomic, readonly) BOOL autoPauseInAppAutomationOnLaunch;
/// If enabled, the Airship library automatically registers for remote notifications when push is enabled
/// and intercepts incoming notifications in both the foreground and upon launch.
/// Defaults to enabled. If this is disabled, you will need to register for remote notifications
/// in application:didFinishLaunchingWithOptions: and forward all notification-related app delegate
/// calls to UAPush and UAInbox.
@property (nonatomic, readonly) BOOL isAutomaticSetupEnabled;
/// An array of UAURLAllowList entry strings.
/// This url allow list is used for validating which URLs can be opened or load the JavaScript native bridge.
/// It affects landing pages, the open external URL and wallet actions,
/// deep link actions (if a delegate is not set), and HTML in-app messages.
/// note:
/// See UAURLAllowList for pattern entry syntax.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable URLAllowList;
/// An array of UAURLAllowList entry strings.
/// This url allow list is used for validating which URLs can load the JavaScript native bridge.
/// It affects Landing Pages, Message Center and HTML In-App Messages.
/// note:
/// See UAURLAllowList for pattern entry syntax.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable URLAllowListScopeJavaScriptInterface;
/// An array of UAURLAllowList entry strings.
/// This url allow list is used for validating which URLs can be opened.
/// It affects landing pages, the open external URL and wallet actions,
/// deep link actions (if a delegate is not set), and HTML in-app messages.
/// note:
/// See UAURLAllowList for pattern entry syntax.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable URLAllowListScopeOpenURL;
/// Toggles Airship analytics. Defaults to <code>true</code>. If set to <code>false</code>, many Airship features will not be
/// available to this application.
@property (nonatomic, readonly) BOOL isAnalyticsEnabled;
/// The Airship default message center style configuration file.
@property (nonatomic, readonly, copy) NSString * _Nullable messageCenterStyleConfig;
/// The iTunes ID used for Rate App Actions.
@property (nonatomic, readonly, copy) NSString * _Nullable itunesID;
/// If set to <code>true</code>, the Airship user will be cleared if the application is
/// restored on a different device from an encrypted backup.
/// Defaults to <code>false</code>.
@property (nonatomic, readonly) BOOL clearUserOnAppRestore;
/// If set to <code>true</code>, the application will clear the previous named user ID on a
/// re-install. Defaults to <code>false</code>.
@property (nonatomic, readonly) BOOL clearNamedUserOnAppRestore;
/// Flag indicating whether channel capture feature is enabled or not.
/// Defaults to <code>false</code>.
@property (nonatomic, readonly) BOOL isChannelCaptureEnabled;
/// Flag indicating whether delayed channel creation is enabled. If set to <code>true</code> channel
/// creation will not occur until channel creation is manually enabled.
/// Defaults to <code>false</code>.
@property (nonatomic, readonly) BOOL isChannelCreationDelayEnabled;
/// Flag indicating whether extended broadcasts are enabled. If set to <code>true</code> the AirshipReady NSNotification
/// will contain additional data: the channel identifier and the app key.
/// Defaults to <code>false</code>.
@property (nonatomic, readonly) BOOL isExtendedBroadcastsEnabled;
/// If set to ‘YES’, the Airship SDK will request authorization to use
/// notifications from the user. Apps that set this flag to <code>false</code> are
/// required to request authorization themselves.
/// Defaults to <code>true</code>.
@property (nonatomic, readonly) BOOL requestAuthorizationToUseNotifications;
/// If set to <code>true</code>, the SDK will wait for an initial remote config instead of falling back on default API URLs.
/// Defaults to <code>false</code>.
@property (nonatomic, readonly) BOOL requireInitialRemoteConfigEnabled;
/// note:
/// This option is reserved for internal debugging. :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable deviceAPIURL;
/// note:
/// This option is reserved for internal debugging. :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable remoteDataAPIURL;
/// note:
/// This option is reserved for internal debugging. :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable analyticsURL;
/// note:
/// This option is reserved for internal debugging. :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable chatURL;
/// note:
/// This option is reserved for internal debugging. :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable chatWebSocketURL;
- (nonnull instancetype)initWithConfig:(UAConfig * _Nonnull)config dataStore:(UAPreferenceDataStore * _Nonnull)dataStore;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// NOTE: For internal use only. :nodoc:
SWIFT_CLASS_NAMED("SDKDependencyKeys")
@interface UASDKDependencyKeys : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull channel;)
+ (NSString * _Nonnull)channel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull contact;)
+ (NSString * _Nonnull)contact SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull push;)
+ (NSString * _Nonnull)push SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull remoteData;)
+ (NSString * _Nonnull)remoteData SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull remoteDataAutomation;)
+ (NSString * _Nonnull)remoteDataAutomation SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull config;)
+ (NSString * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dataStore;)
+ (NSString * _Nonnull)dataStore SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull analytics;)
+ (NSString * _Nonnull)analytics SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull privacyManager;)
+ (NSString * _Nonnull)privacyManager SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull permissionsManager;)
+ (NSString * _Nonnull)permissionsManager SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull workManager;)
+ (NSString * _Nonnull)workManager SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull automationAudienceOverridesProvider;)
+ (NSString * _Nonnull)automationAudienceOverridesProvider SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull experimentsManager;)
+ (NSString * _Nonnull)experimentsManager SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// SMS registration options
SWIFT_CLASS_NAMED("SMSRegistrationOptions")
@interface UASMSRegistrationOptions : NSObject
/// Returns a SMS registration options with opt-in status
/// \param senderID The sender ID
///
///
/// returns:
/// A SMS registration options.
+ (UASMSRegistrationOptions * _Nonnull)optInSenderID:(NSString * _Nonnull)senderID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Scoped subscription list editor.
SWIFT_CLASS_NAMED("ScopedSubscriptionListEditor")
@interface UAScopedSubscriptionListEditor : NSObject
/// Subscribes to a list.
/// \param subscriptionListID The subscription list identifier.
///
/// \param scope Defines the channel types that the change applies to.
///
- (void)subscribe:(NSString * _Nonnull)subscriptionListID scope:(enum UAChannelScope)scope;
/// Unsubscribes from a list.
/// \param subscriptionListID The subscription list identifier.
///
/// \param scope Defines the channel types that the change applies to.
///
- (void)unsubscribe:(NSString * _Nonnull)subscriptionListID scope:(enum UAChannelScope)scope;
/// Applies subscription list changes.
- (void)apply;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A SearchEventTemplate represents a custom search event template for the
/// application.
SWIFT_CLASS_NAMED("SearchEventTemplate")
@interface SearchEventTemplate : NSObject
/// The event’s value. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
@property (nonatomic, strong) NSNumber * _Nullable eventValue;
/// The event’s type.
@property (nonatomic, copy) NSString * _Nullable type;
/// The event’s identifier.
@property (nonatomic, copy) NSString * _Nullable identifier;
/// The event’s category.
@property (nonatomic, copy) NSString * _Nullable category;
/// The event’s query.
@property (nonatomic, copy) NSString * _Nullable query;
/// The event’s total results.
@property (nonatomic) NSInteger totalResults;
/// Factory method for creating a search event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// SearchEventTemplate instance.
+ (SearchEventTemplate * _Nonnull)templateWithValue:(NSNumber * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a search event template.
///
/// returns:
/// SearchEventTemplate instance.
+ (SearchEventTemplate * _Nonnull)template SWIFT_WARN_UNUSED_RESULT;
/// Creates the custom search event.
///
/// returns:
/// Created UACustomEvent instance.
- (UACustomEvent * _Nonnull)createEvent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("Semaphore")
@interface UASemaphore : NSObject
- (nonnull instancetype)init;
- (nonnull instancetype)initWithValue:(NSInteger)value OBJC_DESIGNATED_INITIALIZER;
- (void)wait;
- (BOOL)wait:(NSTimeInterval)timeout;
- (BOOL)signal;
@end


/// Subscription list editor.
SWIFT_CLASS_NAMED("SubscriptionListEditor")
@interface UASubscriptionListEditor : NSObject
/// Subscribes to a list.
/// \param subscriptionListID The subscription list identifier.
///
- (void)subscribe:(NSString * _Nonnull)subscriptionListID;
/// Unsubscribes from a list.
/// \param subscriptionListID The subscription list identifier.
///
- (void)unsubscribe:(NSString * _Nonnull)subscriptionListID;
/// Applies subscription list changes.
- (void)apply;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Tag editor.
SWIFT_CLASS_NAMED("TagEditor")
@interface UATagEditor : NSObject
/// Adds tags.
/// \param tags The tags.
///
- (void)addTags:(NSArray<NSString *> * _Nonnull)tags;
/// Adds a single tag.
/// \param tag The tag.
///
- (void)addTag:(NSString * _Nonnull)tag;
/// Removes tags from the given group.
/// \param tags The tags.
///
- (void)removeTags:(NSArray<NSString *> * _Nonnull)tags;
/// Removes a single tag.
/// \param tag The tag.
///
- (void)removeTag:(NSString * _Nonnull)tag;
/// Sets tags on the given group.
/// \param tags The tags.
///
- (void)setTags:(NSArray<NSString *> * _Nonnull)tags;
/// Clears tags.
- (void)clearTags;
/// Applies tag changes.
- (void)apply;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Tag groups editor.
SWIFT_CLASS_NAMED("TagGroupsEditor")
@interface UATagGroupsEditor : NSObject
/// Adds tags to the given group.
/// \param tags The tags.
///
/// \param group The tag group.
///
- (void)addTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)group;
/// Removes tags from the given group.
/// \param tags The tags.
///
/// \param group The tag group.
///
- (void)removeTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)group;
/// Sets tags on the given group.
/// \param tags The tags.
///
/// \param group The tag group.
///
- (void)setTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)group;
/// Applies tag changes.
- (void)apply;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UADispatcher;

SWIFT_PROTOCOL("_TtP11AirshipCore19TaskManagerProtocol_")
@protocol TaskManagerProtocol
- (void)registerForTaskWithID:(NSString * _Nonnull)taskID type:(enum UAirshipWorkerType)type launchHandler:(void (^ _Nonnull)(id <UATask> _Nonnull))launchHandler;
- (void)registerForTaskWithID:(NSString * _Nonnull)taskID type:(enum UAirshipWorkerType)type dispatcher:(UADispatcher * _Nonnull)dispatcher launchHandler:(void (^ _Nonnull)(id <UATask> _Nonnull))launchHandler;
- (void)enqueueRequestWithID:(NSString * _Nonnull)taskID options:(UATaskRequestOptions * _Nonnull)options;
- (void)enqueueRequestWithID:(NSString * _Nonnull)taskID options:(UATaskRequestOptions * _Nonnull)options initialDelay:(NSTimeInterval)initialDelay;
- (BOOL)setRateLimitForID:(NSString * _Nonnull)rateLimitID rate:(NSInteger)rate timeInterval:(NSTimeInterval)timeInterval error:(NSError * _Nullable * _Nullable)error;
- (void)enqueueRequestWithID:(NSString * _Nonnull)taskID rateLimitIDs:(NSArray<NSString *> * _Nonnull)rateLimitIDs options:(UATaskRequestOptions * _Nonnull)options minDelay:(NSTimeInterval)minDelay;
- (void)enqueueRequestWithID:(NSString * _Nonnull)taskID rateLimitIDs:(NSArray<NSString *> * _Nonnull)rateLimitIDs options:(UATaskRequestOptions * _Nonnull)options;
@end


SWIFT_CLASS_NAMED("TaskManager")
@interface UATaskManager : NSObject <TaskManagerProtocol>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UATaskManager * _Nonnull shared;)
+ (UATaskManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)registerForTaskWithID:(NSString * _Nonnull)taskID type:(enum UAirshipWorkerType)type launchHandler:(void (^ _Nonnull)(id <UATask> _Nonnull))launchHandler;
- (void)registerForTaskWithID:(NSString * _Nonnull)taskID type:(enum UAirshipWorkerType)type dispatcher:(UADispatcher * _Nonnull)dispatcher launchHandler:(void (^ _Nonnull)(id <UATask> _Nonnull))launchHandler;
- (BOOL)setRateLimitForID:(NSString * _Nonnull)rateLimitID rate:(NSInteger)rate timeInterval:(NSTimeInterval)timeInterval error:(NSError * _Nullable * _Nullable)error;
- (void)enqueueRequestWithID:(NSString * _Nonnull)taskID options:(UATaskRequestOptions * _Nonnull)options;
- (void)enqueueRequestWithID:(NSString * _Nonnull)taskID options:(UATaskRequestOptions * _Nonnull)options initialDelay:(NSTimeInterval)initialDelay;
- (void)enqueueRequestWithID:(NSString * _Nonnull)taskID rateLimitIDs:(NSArray<NSString *> * _Nonnull)rateLimitIDs options:(UATaskRequestOptions * _Nonnull)options;
- (void)enqueueRequestWithID:(NSString * _Nonnull)taskID rateLimitIDs:(NSArray<NSString *> * _Nonnull)rateLimitIDs options:(UATaskRequestOptions * _Nonnull)options minDelay:(NSTimeInterval)minDelay;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("TaskRequestOptions")
@interface UATaskRequestOptions : NSObject
@property (nonatomic, readonly) enum AirshipWorkRequestConflictPolicy conflictPolicy;
@property (nonatomic, readonly) BOOL isNetworkRequired;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull extras;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UATaskRequestOptions * _Nonnull defaultOptions;)
+ (UATaskRequestOptions * _Nonnull)defaultOptions SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithConflictPolicy:(enum AirshipWorkRequestConflictPolicy)conflictPolicy requiresNetwork:(BOOL)requiresNetwork extras:(NSDictionary<NSString *, NSString *> * _Nullable)extras OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UAURLInfo;
@class UAThomasExtensions;
@protocol UAThomasDelegate;
@class UADisposable;

/// Airship rendering engine.
/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("Thomas")
@interface UAThomas : NSObject
+ (BOOL)validateWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)validateWithJson:(id _Nonnull)json error:(NSError * _Nullable * _Nullable)error;
+ (NSArray<UAURLInfo *> * _Nullable)urlsWithJson:(id _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (UADisposable * _Nonnull (^ _Nullable)(void))deferredDisplayWithJson:(id _Nonnull)json scene:(UIWindowScene * _Nonnull)scene extensions:(UAThomasExtensions * _Nullable)extensions delegate:(id <UAThomasDelegate> _Nonnull)delegate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (UADisposable * _Nonnull (^ _Nullable)(void))deferredDisplayWithData:(NSData * _Nonnull)data scene:(UIWindowScene * _Nonnull)scene extensions:(UAThomasExtensions * _Nullable)extensions delegate:(id <UAThomasDelegate> _Nonnull)delegate error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("ThomasButtonInfo")
@interface UAThomasButtonInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UAThomasFormResult;
@class UAThomasLayoutContext;
@class UAThomasFormInfo;
@class UAThomasPagerInfo;

/// note:
/// for internal use only.  :nodoc:
SWIFT_PROTOCOL_NAMED("ThomasDelegate")
@protocol UAThomasDelegate
/// Called when a form is submitted
/// \param formResult The form result.
///
/// \param layoutContext The layout context.
///
- (void)onFormSubmittedWithFormResult:(UAThomasFormResult * _Nonnull)formResult layoutContext:(UAThomasLayoutContext * _Nonnull)layoutContext;
/// Called when a form is displayed for the first time
/// \param formInfo The form info.
///
/// \param layoutContext The layout context.
///
- (void)onFormDisplayedWithFormInfo:(UAThomasFormInfo * _Nonnull)formInfo layoutContext:(UAThomasLayoutContext * _Nonnull)layoutContext;
/// Called when a button is tapped.
/// \param buttonIdentifier The button id.
///
/// \param metadata the reporting metadata.
///
/// \param layoutContext The layout context.
///
- (void)onButtonTappedWithButtonIdentifier:(NSString * _Nonnull)buttonIdentifier metadata:(id _Nullable)metadata layoutContext:(UAThomasLayoutContext * _Nonnull)layoutContext;
/// Called when the view is dismissed.
/// \param layoutContext The layout context.
///
- (void)onDismissedWithLayoutContext:(UAThomasLayoutContext * _Nullable)layoutContext;
/// Called when the view is dismissed from a button tap.
/// \param buttonIdentifier The  button id.
///
/// \param buttonDescription The button description.
///
/// \param cancel If the view should be cancelled.
///
/// \param layoutContext The layout context.
///
- (void)onDismissedWithButtonIdentifier:(NSString * _Nonnull)buttonIdentifier buttonDescription:(NSString * _Nonnull)buttonDescription cancel:(BOOL)cancel layoutContext:(UAThomasLayoutContext * _Nonnull)layoutContext;
/// Called when a form is dismissed because it timed out.
/// \param layoutContext The layout context.
///
- (void)onTimedOutWithLayoutContext:(UAThomasLayoutContext * _Nullable)layoutContext;
/// Called when a pager page is viewed.
/// \param pagerInfo The pager info.
///
/// \param layoutContext The layout context.
///
- (void)onPageViewedWithPagerInfo:(UAThomasPagerInfo * _Nonnull)pagerInfo layoutContext:(UAThomasLayoutContext * _Nonnull)layoutContext;
/// Called when a pager page has a gesture.
/// \param identifier The pager gesture identifier.
///
/// \param metadata the reporting metadata.
///
/// \param layoutContext The layout context.
///
- (void)onPageGestureWithIdentifier:(NSString * _Nonnull)identifier metadata:(id _Nullable)metadata layoutContext:(UAThomasLayoutContext * _Nonnull)layoutContext;
/// Called when a pager page changed automatically after a delay.
/// \param identifier The automated action identifier.
///
/// \param metadata the reporting metadata.
///
/// \param layoutContext The layout context.
///
- (void)onPageAutomatedActionWithIdentifier:(NSString * _Nonnull)identifier metadata:(id _Nullable)metadata layoutContext:(UAThomasLayoutContext * _Nonnull)layoutContext;
/// Called when a pager page changed due to a swipe.
/// \param from The originated pager info
///
/// \param to The resulting pager info
///
/// \param layoutContext The layout context.
///
- (void)onPageSwipedFrom:(UAThomasPagerInfo * _Nonnull)from to:(UAThomasPagerInfo * _Nonnull)to layoutContext:(UAThomasLayoutContext * _Nonnull)layoutContext;
/// Called when actions should be ran.
/// \param permission The permission.
///
/// \param startingStatus The starting status.
///
/// \param endingStatus The ending status.
///
/// \param layoutContext The layout context.
///
- (void)onPromptPermissionResultWithPermission:(enum UAPermission)permission startingStatus:(enum UAPermissionStatus)startingStatus endingStatus:(enum UAPermissionStatus)endingStatus layoutContext:(UAThomasLayoutContext * _Nonnull)layoutContext;
@end


/// Airship rendering engine extensions.
/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("ThomasExtensions")
@interface UAThomasExtensions : NSObject
- (nonnull instancetype)initWithNativeBridgeExtension:(id <UANativeBridgeExtensionDelegate> _Nullable)nativeBridgeExtension imageProvider:(id <UAImageProvider> _Nullable)imageProvider OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("ThomasFormInfo")
@interface UAThomasFormInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly) BOOL submitted;
@property (nonatomic, readonly, copy) NSString * _Nonnull formType;
@property (nonatomic, readonly, copy) NSString * _Nullable formResponseType;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier submitted:(BOOL)submitted formType:(NSString * _Nonnull)formType formResponseType:(NSString * _Nullable)formResponseType OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("ThomasFormResult")
@interface UAThomasFormResult : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull formData;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier formData:(NSDictionary<NSString *, id> * _Nonnull)formData OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("ThomasLayoutContext")
@interface UAThomasLayoutContext : NSObject
@property (nonatomic, readonly, strong) UAThomasFormInfo * _Nullable formInfo;
@property (nonatomic, readonly, strong) UAThomasPagerInfo * _Nullable pagerInfo;
@property (nonatomic, readonly, strong) UAThomasButtonInfo * _Nullable buttonInfo;
- (nonnull instancetype)initWithFormInfo:(UAThomasFormInfo * _Nullable)formInfo pagerInfo:(UAThomasPagerInfo * _Nullable)pagerInfo buttonInfo:(UAThomasButtonInfo * _Nullable)buttonInfo OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("ThomasPagerInfo")
@interface UAThomasPagerInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly) NSInteger pageIndex;
@property (nonatomic, readonly, copy) NSString * _Nonnull pageIdentifier;
@property (nonatomic, readonly) NSInteger pageCount;
@property (nonatomic, readonly) BOOL completed;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier pageIndex:(NSInteger)pageIndex pageIdentifier:(NSString * _Nonnull)pageIdentifier pageCount:(NSInteger)pageCount completed:(BOOL)completed OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the boundary crossing event type.
typedef SWIFT_ENUM(NSInteger, UABoundaryEvent, open) {
/// Enter event
  UABoundaryEventEnter = 1,
/// Exit event
  UABoundaryEventExit = 2,
};


/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("UACoreData")
@interface UACoreData : NSObject
@property (nonatomic, readonly) BOOL inMemory;
@property (nonatomic, weak) id <UACoreDataDelegate> _Nullable delegate;
- (nonnull instancetype)initWithModelURL:(NSURL * _Nonnull)modelURL inMemory:(BOOL)inMemory stores:(NSArray<NSString *> * _Nonnull)stores;
- (nonnull instancetype)initWithModelURL:(NSURL * _Nonnull)modelURL inMemory:(BOOL)inMemory stores:(NSArray<NSString *> * _Nonnull)stores mergePolicy:(id _Nullable)mergePolicy;
- (void)safePerformBlock:(void (^ _Nonnull)(BOOL, NSManagedObjectContext * _Nonnull))block;
- (void)safePerformBlockAndWait:(void (^ _Nonnull)(BOOL, NSManagedObjectContext * _Nonnull))block;
- (void)performBlockIfStoresExist:(void (^ _Nonnull)(BOOL, NSManagedObjectContext * _Nonnull))block;
- (void)shutDown;
- (void)waitForIdle;
+ (BOOL)safeSave:(NSManagedObjectContext * _Nullable)context;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("UADispatcher")
@interface UADispatcher : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UADispatcher * _Nonnull main;)
+ (UADispatcher * _Nonnull)main SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UADispatcher * _Nonnull sharedSerialUtility;)
+ (UADispatcher * _Nonnull)sharedSerialUtility SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UADispatcher * _Nonnull global;)
+ (UADispatcher * _Nonnull)global SWIFT_WARN_UNUSED_RESULT;
+ (UADispatcher * _Nonnull)serial SWIFT_WARN_UNUSED_RESULT;
+ (UADispatcher * _Nonnull)serialUtility SWIFT_WARN_UNUSED_RESULT;
- (void)dispatchSync:(void (^ _Nonnull)(void))block;
- (void)doSync:(void (^ _Nonnull)(void))block;
- (void)dispatchAsyncIfNecessary:(void (^ _Nonnull)(void))block;
- (void)dispatchAsync:(void (^ _Nonnull)(void))block;
- (UADisposable * _Nonnull)dispatchAfter:(NSTimeInterval)delay timebase:(enum UADispatcherTimeBase)timebase block:(void (^ _Nonnull)(void))block;
- (UADisposable * _Nonnull)dispatchAfter:(NSTimeInterval)delay block:(void (^ _Nonnull)(void))block;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP11AirshipCore20UANavigationDelegate_")
@protocol UANavigationDelegate <WKNavigationDelegate>
@optional
- (void)closeWindow:(BOOL)animated;
@end





@interface UIImage (SWIFT_EXTENSION(AirshipCore))
/// Image factory method that supports animated data.
/// \param data The data. 
///
/// \param fillIn If the images should be expanded to fill in the frames for smoother animations in UIKit.
///
///
/// returns:
/// The animated image if it is a gif, otherwise the still frame will be loaded.
+ (UIImage * _Nullable)fancyImageWithData:(NSData * _Nullable)data fillIn:(BOOL)fillIn SWIFT_WARN_UNUSED_RESULT;
/// Image factory method that supports animated data.
/// \param data The data. 
///
///
/// returns:
/// The animated image if it is a gif, otherwise the still frame will be loaded.
+ (UIImage * _Nullable)fancyImageWithData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end






/// NOTE: For internal use only. :nodoc:
SWIFT_PROTOCOL_NAMED("URLAllowListProtocol")
@protocol UAURLAllowListProtocol
- (BOOL)isAllowed:(NSURL * _Nullable)url SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAllowed:(NSURL * _Nullable)url scope:(UAURLAllowListScope)scope SWIFT_WARN_UNUSED_RESULT;
- (BOOL)addEntry:(NSString * _Nonnull)patternString scope:(UAURLAllowListScope)scope;
- (BOOL)addEntry:(NSString * _Nonnull)patternString;
@end

@protocol UAURLAllowListDelegate;

/// Class for accepting and verifying webview URLs.
/// URL allow list entries are written as URL patterns with optional wildcard matching:
/// \code
/// <scheme> := <any char combination, '*' are treated as wildcards>
///
/// <host> := '*' | '*.'<any char combination except '/' and '*'> | <any char combination except '/' and '*'>
///
/// <path> := <any char combination, '*' are treated as wildcards>
///
/// <pattern> := '*' | <scheme>://<host>/<path> | <scheme>://<host> | <scheme>:/<path> | <scheme>:///<path>
///
/// \endcodeA single wildcard will match any URI.
/// Wildcards in the scheme pattern will match any characters, and a single wildcard in the scheme will match any scheme.
/// The wildcard in a host pattern <code>"*.mydomain.com"</code> will match anything within the mydomain.com domain.
/// Wildcards in the path pattern will match any characters, including subdirectories.
/// Note that NSURL does not support internationalized domains containing non-ASCII characters.
/// All URL allow list entries for internationalized domains must be in ASCII IDNA format as
/// specified in https://tools.ietf.org/html/rfc3490
SWIFT_CLASS_NAMED("URLAllowList")
@interface UAURLAllowList : NSObject <UAURLAllowListProtocol>
/// Create a default URL allow list with entries specified in a config object.
/// note:
/// The entry “*.urbanairship.com” is added by default.
/// \param config An instance of UARuntimeConfig.
///
///
/// returns:
/// An instance of UAURLAllowList
+ (UAURLAllowList * _Nonnull)allowListWithConfig:(UARuntimeConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
/// The URL allow list delegate.
/// note:
/// The delegate is not retained.
@property (nonatomic, weak) id <UAURLAllowListDelegate> _Nullable delegate;
/// Add an entry to the URL allow list, with the implicit scope <code>URLAllowListScope.all</code>.
/// \param patternString A URL allow list pattern string.
///
///
/// returns:
/// <code>true</code> if the URL allow list pattern was validated and added, <code>false</code> otherwise.
- (BOOL)addEntry:(NSString * _Nonnull)patternString;
/// Add an entry to the URL allow list.
/// \param patternString A URL allow list pattern string.
///
/// \param scope The scope of the pattern.
///
///
/// returns:
/// <code>true</code> if the URL allow list pattern was validated and added, <code>false</code> otherwise.
- (BOOL)addEntry:(NSString * _Nonnull)patternString scope:(UAURLAllowListScope)scope;
/// Determines whether a given URL is allowed, with the implicit scope <code>URLAllowListScope.all</code>.
/// \param url The URL under consideration.
///
///
/// returns:
/// <code>true</code> if the URL is allowed, <code>false</code> otherwise.
- (BOOL)isAllowed:(NSURL * _Nullable)url SWIFT_WARN_UNUSED_RESULT;
/// Determines whether a given URL is allowed.
/// \param url The URL under consideration.
///
/// \param scope The scope of the desired match.
///
///
/// returns:
/// <code>true</code> if the URL is allowed, <code>false</code> otherwise.
- (BOOL)isAllowed:(NSURL * _Nullable)url scope:(UAURLAllowListScope)scope SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Delegate protocol for accepting and rejecting URLs.
SWIFT_PROTOCOL_NAMED("URLAllowListDelegate")
@protocol UAURLAllowListDelegate
/// Called when a URL has been allowed by the SDK, but before the URL is fetched.
/// \param url The URL allowed by the SDK.
///
/// \param scope The scope of the desired match.
///
///
/// returns:
/// <code>true</code> to accept this URL, <code>false</code>  to reject this URL.
- (BOOL)allowURL:(NSURL * _Nonnull)url scope:(UAURLAllowListScope)scope SWIFT_WARN_UNUSED_RESULT;
@end


enum UAURLInfoURLType : NSInteger;

/// Url Info
/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("URLInfo")
@interface UAURLInfo : NSObject
@property (nonatomic, readonly) enum UAURLInfoURLType urlType;
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
- (nonnull instancetype)initWithUrlType:(enum UAURLInfoURLType)urlType url:(NSString * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, UAURLInfoURLType, "URLType", open) {
  UAURLInfoURLTypeWeb = 0,
  UAURLInfoURLTypeVideo = 1,
  UAURLInfoURLTypeImage = 2,
};


typedef SWIFT_ENUM(NSInteger, UrlTypes, open) {
  UrlTypesImage = 0,
  UrlTypesVideo = 1,
  UrlTypesWeb = 2,
};


/// Version matcher.
SWIFT_CLASS_NAMED("VersionMatcher")
@interface UAVersionMatcher : NSObject
/// NOTE: For internal use only. :nodoc:
- (nullable instancetype)initWithVersionConstraint:(NSString * _Nonnull)versionConstraint OBJC_DESIGNATED_INITIALIZER;
/// Create a matcher for the supplied version constraint
/// \param versionConstraint constraint that matches one of our supported patterns
///
///
/// returns:
/// matcher or nil if versionConstraint does not match any of the expected patterns
+ (UAVersionMatcher * _Nullable)matcherWithVersionConstraint:(NSString * _Nonnull)versionConstraint SWIFT_WARN_UNUSED_RESULT;
/// Evaluates the object with the matcher.
/// \param value The object to evaluate.
///
///
/// returns:
/// true if the matcher matches the object, otherwise false.
- (BOOL)evaluateObject:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Check if versionConstraint matches the “exact version” pattern
/// \param versionConstraint constraint string
///
///
/// returns:
/// true if versionConstraint matches the “exact version” pattern
+ (BOOL)isExactVersion:(NSString * _Nonnull)versionConstraint SWIFT_WARN_UNUSED_RESULT;
/// Check if versionConstraint matches the “sub version” pattern
/// \param versionConstraint constraint string
///
///
/// returns:
/// true if versionConstraint matches the “sub version” pattern
+ (BOOL)isSubVersion:(NSString * _Nonnull)versionConstraint SWIFT_WARN_UNUSED_RESULT;
/// Check if versionConstraint matches the “version range” pattern
/// \param versionConstraint constraint string
///
///
/// returns:
/// true if versionConstraint matches the “version range” pattern
+ (BOOL)isVersionRange:(NSString * _Nonnull)versionConstraint SWIFT_WARN_UNUSED_RESULT;
/// note:
/// For internal use only. :nodoc:
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("ViewUtils")
@interface UAViewUtils : NSObject
+ (void)applyContainerConstraintsToContainer:(UIView * _Nullable)container containedView:(UIView * _Nullable)contained;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSURLRequest;
@class WKWebViewConfiguration;

SWIFT_CLASS_NAMED("WebView") SWIFT_AVAILABILITY(tvos,unavailable)
@interface UAWebView : WKWebView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (WKNavigation * _Nullable)loadRequest:(NSURLRequest * _Nonnull)request;
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("_AutomationAudienceOverrides")
@interface UAAutomationAudienceOverrides : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSDictionary<NSString *, NSArray<NSString *> *> *> * _Nullable tagsPayload;
@property (nonatomic, readonly, copy) NSArray<NSDictionary<NSString *, id> *> * _Nullable attributesPayload;
- (nonnull instancetype)initWithTagsPayload:(NSDictionary<NSString *, NSDictionary<NSString *, NSArray<NSString *> *> *> * _Nullable)tagsPayload attributesPayload:(NSArray<NSDictionary<NSString *, id> *> * _Nullable)attributesPayload OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_AutomationAudienceOverridesProvider")
@interface UAAutomationAudienceOverridesProvider : NSObject
- (void)audienceOverridesWithChannelID:(NSString * _Nonnull)channelID completionHandler:(void (^ _Nonnull)(UAAutomationAudienceOverrides * _Nonnull))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_RemoteDataAutomationAccess")
@interface UARemoteDataAutomationAccess : NSObject
- (UADisposable * _Nonnull)subscribeWithTypes:(NSArray<NSString *> * _Nonnull)types block:(void (^ _Nonnull)(NSArray<UARemoteDataPayload *> * _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
- (void)isCurrentWithRemoteDataInfo:(UARemoteDataInfo * _Nullable)remoteDataInfo completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)requiresUpdateWithRemoteDataInfo:(UARemoteDataInfo * _Nullable)remoteDataInfo completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)waitFullRefreshWithRemoteDataInfo:(UARemoteDataInfo * _Nullable)remoteDataInfo completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (void)bestEffortRefreshWithRemoteDataInfo:(UARemoteDataInfo * _Nullable)remoteDataInfo completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)notifyOutdatedWithRemoteDataInfo:(UARemoteDataInfo * _Nullable)remoteDataInfo completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
#ifndef AIRSHIPCORE_SWIFT_H
#define AIRSHIPCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AirshipBasement;
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AirshipCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSNumber;
@class NSString;
@class UACustomEvent;

/// AccountEventTemplate represents a custom account event template for the
/// application.
SWIFT_CLASS_NAMED("AccountEventTemplate")
@interface UAAccountEventTemplate : NSObject
/// The event’s value. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
@property (nonatomic, strong) NSNumber * _Nullable eventValue;
/// The event’s transaction ID. The transaction ID’s length must not exceed 255
/// characters or it will invalidate the event.
@property (nonatomic, copy) NSString * _Nullable transactionID;
/// The event’s identifier.
@property (nonatomic, copy) NSString * _Nullable userID;
/// The event’s category.
@property (nonatomic, copy) NSString * _Nullable category;
/// The event’s type.
@property (nonatomic, copy) NSString * _Nullable type;
/// Factory method for creating a registered account event template.
///
/// returns:
/// An Account event template instance
+ (UAAccountEventTemplate * _Nonnull)registeredTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a registered account event template with a value from a string.
/// \param valueString The value of the event as a string. The value must be a valid
/// number between -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// An Account event template instance
+ (UAAccountEventTemplate * _Nonnull)registeredTemplateWithValueFromString:(NSString * _Nullable)valueString SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a registered account event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// An Account event template instance
+ (UAAccountEventTemplate * _Nonnull)registeredTemplateWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a logged in account event template.
///
/// returns:
/// An Account event template instance
+ (UAAccountEventTemplate * _Nonnull)loggedInTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a logged in account event template with a value from a string.
/// \param valueString The value of the event as a string. The value must be a valid
/// number between -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// An Account event template instance
+ (UAAccountEventTemplate * _Nonnull)loggedInTemplateWithValueFromString:(NSString * _Nullable)valueString SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a logged in account event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// An Account event template instance
+ (UAAccountEventTemplate * _Nonnull)loggedInTemplateWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a logged out account event template.
///
/// returns:
/// An Account event template instance
+ (UAAccountEventTemplate * _Nonnull)loggedOutTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a logged out account event template with a value from a string.
/// \param valueString The value of the event as a string. The value must be a valid
/// number between -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// An Account event template instance
+ (UAAccountEventTemplate * _Nonnull)loggedOutTemplateWithValueFromString:(NSString * _Nullable)valueString SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a logged out account event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// An Account event template instance
+ (UAAccountEventTemplate * _Nonnull)loggedOutTemplateWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Creates the custom account event.
- (UACustomEvent * _Nullable)createEvent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum UAActionSituation : NSInteger;

/// A helper class for running actions by name or by reference.
SWIFT_CLASS_NAMED("ActionRunner")
@interface UAActionRunner : NSObject
+ (void)runActions:(NSDictionary<NSString *, id> * _Nonnull)actionsPayload situation:(enum UAActionSituation)situation completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Action situations
typedef SWIFT_ENUM_NAMED(NSInteger, UAActionSituation, "ActionSituation", open) {
/// Action invoked manually
  UAActionSituationManualInvocation = 0,
/// Action invoked from the app being launched from a push notification
  UAActionSituationLaunchedFromPush = 1,
/// Action invoked from a foreground push
  UAActionSituationForegroundPush = 2,
/// Action invoked from a background push
  UAActionSituationBackgroundPush = 3,
/// Action invoked from a web view
  UAActionSituationWebViewInvocation = 4,
/// Action invoked from a foreground action button
  UAActionSituationForegroundInteractiveButton = 5,
/// Action invoked from a background action button
  UAActionSituationBackgroundInteractiveButton = 6,
/// Action invoked from an automation
  UAActionSituationAutomation = 7,
};

@class UIPopoverPresentationController;
@class UIView;
@class UIActivity;

SWIFT_CLASS_NAMED("ActivityViewController")
@interface UAActivityViewController : UIActivityViewController <UIPopoverControllerDelegate, UIPopoverPresentationControllerDelegate>
@property (nonatomic, copy) void (^ _Nullable dismissalBlock)(void);
- (void)viewDidDisappear:(BOOL)animated;
/// Returns the desired source rect dimensions for the popover.
///
/// returns:
/// popover dimensions.
- (CGRect)sourceRect SWIFT_WARN_UNUSED_RESULT;
- (void)popoverPresentationController:(UIPopoverPresentationController * _Nonnull)popoverPresentationController willRepositionPopoverToRect:(CGRect * _Nonnull)rect inView:(UIView * _Nonnull * _Nonnull)view;
- (nonnull instancetype)initWithActivityItems:(NSArray * _Nonnull)activityItems applicationActivities:(NSArray<UIActivity *> * _Nullable)applicationActivities OBJC_DESIGNATED_INITIALIZER;
@end

@class UARuntimeConfig;
@class UAApplicationMetrics;
@class UAPermissionsManager;
@protocol UAJavaScriptCommandDelegate;
@class UAChannelCapture;
@protocol UADeepLinkDelegate;
@class UAURLAllowList;
@class UALocaleManager;
@class UAPrivacyManager;
@protocol UAComponent;
@class UAPush;
@class UAContact;
@class UAAnalytics;
@class UAChannel;
@class UAConfig;
@protocol UAirshipLogHandler;
enum UALogLevel : NSInteger;
@class NSURL;

/// Main entry point for Airship. The application must call <code>takeOff</code> during <code>application:didFinishLaunchingWithOptions:</code>
/// before accessing any instances on Airship or Airship modules.
SWIFT_CLASS_NAMED("Airship")
@interface UAirship : NSObject
/// Airship deep link scheme
/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deepLinkScheme;)
+ (NSString * _Nonnull)deepLinkScheme SWIFT_WARN_UNUSED_RESULT;
/// Notification when Airship is ready.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull airshipReadyNotification;)
+ (NSNotificationName _Nonnull)airshipReadyNotification SWIFT_WARN_UNUSED_RESULT;
/// Airship ready channel ID key. Only available if <code>extendedBroadcastEnabled</code> is true in config.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull airshipReadyChannelIdentifier;)
+ (NSString * _Nonnull)airshipReadyChannelIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Airship ready app key. Only available if <code>extendedBroadcastEnabled</code> is true in config.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull airshipReadyAppKey;)
+ (NSString * _Nonnull)airshipReadyAppKey SWIFT_WARN_UNUSED_RESULT;
/// Airship ready payload version. Only available if <code>extendedBroadcastEnabled</code> is true in config.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull airshipReadyPayloadVersion;)
+ (NSString * _Nonnull)airshipReadyPayloadVersion SWIFT_WARN_UNUSED_RESULT;
/// A flag that checks if the Airship instance is available. <code>true</code> if available, otherwise <code>false</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isFlying;)
+ (BOOL)isFlying SWIFT_WARN_UNUSED_RESULT;
/// Airship config.
@property (nonatomic, readonly, strong) UARuntimeConfig * _Nonnull config;
/// Stores common application metrics such as last open.
@property (nonatomic, readonly, strong) UAApplicationMetrics * _Nonnull applicationMetrics;
/// The Airship permissions manager.
@property (nonatomic, readonly, strong) UAPermissionsManager * _Nonnull permissionsManager;
/// A user configurable UAJavaScriptCommandDelegate
/// note:
/// this delegate is not retained.
@property (nonatomic, weak) id <UAJavaScriptCommandDelegate> _Nullable javaScriptCommandDelegate;
/// The channel capture utility.
@property (nonatomic, readonly, strong) UAChannelCapture * _Nonnull channelCapture;
/// A user configurable deep link delegate.
/// note:
/// this delegate is not retained.
@property (nonatomic, weak) id <UADeepLinkDelegate> _Nullable deepLinkDelegate;
/// The URL allow list used for validating URLs for landing pages,
/// wallet action, open external URL action, deep link
/// action (if delegate is not set), and HTML in-app messages.
@property (nonatomic, readonly, strong) UAURLAllowList * _Nonnull URLAllowList;
/// The locale manager.
@property (nonatomic, readonly, strong) UALocaleManager * _Nonnull localeManager;
/// The privacy manager
@property (nonatomic, readonly, strong) UAPrivacyManager * _Nonnull privacyManager;
/// note:
/// For internal use only. :nodoc:
@property (nonatomic, readonly, copy) NSArray<id <UAComponent>> * _Nonnull components;
/// Shared Airship instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAirship * _Nonnull shared;)
+ (UAirship * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Shared Push instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAPush * _Nonnull push;)
+ (UAPush * _Nonnull)push SWIFT_WARN_UNUSED_RESULT;
/// Shared Contact instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAContact * _Nonnull contact;)
+ (UAContact * _Nonnull)contact SWIFT_WARN_UNUSED_RESULT;
/// Shared Analytics instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAAnalytics * _Nonnull analytics;)
+ (UAAnalytics * _Nonnull)analytics SWIFT_WARN_UNUSED_RESULT;
/// Shared Channel instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAChannel * _Nonnull channel;)
+ (UAChannel * _Nonnull)channel SWIFT_WARN_UNUSED_RESULT;
/// Initializes Airship. Config will be read from <code>AirshipConfig.plist</code>.
/// \param launchOptions The launch options passed into <code>application:didFinishLaunchingWithOptions:</code>.
///
+ (void)takeOffWithLaunchOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
/// Initializes Airship.
/// \param config The Airship config.
///
/// \param launchOptions The launch options passed into <code>application:didFinishLaunchingWithOptions:</code>.
///
+ (void)takeOff:(UAConfig * _Nullable)config launchOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
/// Airship log handler. All Airship log will be routed through the handler.
/// The default logger will os.Logger on iOS 14+, and <code>print</code> on older devices.
/// Custom loggers should be set before takeOff.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <UAirshipLogHandler> _Nonnull logHandler;)
+ (id <UAirshipLogHandler> _Nonnull)logHandler SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogHandler:(id <UAirshipLogHandler> _Nonnull)newValue;
/// Airship log level. The log level defaults to <code>.debug</code> in developer mode,
/// Sets the Airship log level. The log level defaults to <code>.debug</code> in developer mode,
/// and <code>.error</code> in production. Values set before <code>takeOff</code> will be overridden by
/// the value from the AirshipConfig.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum UALogLevel logLevel;)
+ (enum UALogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum UALogLevel)newValue;
/// note:
/// For internal use only. :nodoc:
+ (id <UAComponent> _Nullable)componentForClassName:(NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
/// Processes a deep link.
/// note:
/// For internal use only. :nodoc:
/// <code>uairship://</code> deep links will be handled internally. All other deep links will be forwarded to the deep link delegate.
/// \param deepLink The deep link.
///
/// \param completionHandler The result. <code>true</code> if the link was able to be processed, otherwise <code>false</code>.
///
- (void)deepLink:(NSURL * _Nonnull)deepLink completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol UAEvent;
@class UAAssociatedIdentifiers;
enum UASDKExtension : NSInteger;

/// Analytics protocol
/// For internal use only. :nodoc:
SWIFT_PROTOCOL_NAMED("AnalyticsProtocol")
@protocol UAAnalyticsProtocol
/// The conversion send ID. :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable conversionSendID;
/// The conversion push metadata. :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable conversionPushMetadata;
/// The current session ID.
@property (nonatomic, readonly, copy) NSString * _Nullable sessionID;
/// Triggers an analytics event.
/// \param event The event to be triggered
///
- (void)addEvent:(id <UAEvent> _Nonnull)event;
/// Associates identifiers with the device. This call will add a special event
/// that will be batched and sent up with our other analytics events. Previous
/// associated identifiers will be replaced.
/// For internal use only. :nodoc:
/// \param associatedIdentifiers The associated identifiers.
///
- (void)associateDeviceIdentifiers:(UAAssociatedIdentifiers * _Nonnull)associatedIdentifiers;
/// The device’s current associated identifiers.
///
/// returns:
/// The device’s current associated identifiers.
- (UAAssociatedIdentifiers * _Nonnull)currentAssociatedDeviceIdentifiers SWIFT_WARN_UNUSED_RESULT;
/// Initiates screen tracking for a specific app screen, must be called once per tracked screen.
/// \param screen The screen’s identifier.
///
- (void)trackScreen:(NSString * _Nullable)screen;
/// Registers an SDK extension with the analytics module.
/// For internal use only. :nodoc:
/// \param ext The SDK extension.
///
/// \param version The version.
///
- (void)registerSDKExtension:(enum UASDKExtension)ext version:(NSString * _Nonnull)version;
@end


/// The Analytics object provides an interface to the Airship Analytics API.
SWIFT_CLASS_NAMED("AirshipAnalytics")
@interface UAAnalytics : NSObject <UAComponent, UAAnalyticsProtocol>
/// The shared Analytics instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAAnalytics * _Nonnull shared;)
+ (UAAnalytics * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Screen key for ScreenTracked notification. :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull screenKey;)
+ (NSString * _Nonnull)screenKey SWIFT_WARN_UNUSED_RESULT;
/// Event key for customEventAdded and regionEventAdded notifications.. :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull eventKey;)
+ (NSString * _Nonnull)eventKey SWIFT_WARN_UNUSED_RESULT;
/// Custom event added notification. :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull customEventAdded;)
+ (NSNotificationName _Nonnull)customEventAdded SWIFT_WARN_UNUSED_RESULT;
/// Region event added notification. :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull regionEventAdded;)
+ (NSNotificationName _Nonnull)regionEventAdded SWIFT_WARN_UNUSED_RESULT;
/// Screen tracked notification,. :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull screenTracked;)
+ (NSNotificationName _Nonnull)screenTracked SWIFT_WARN_UNUSED_RESULT;
/// The conversion send ID. :nodoc:
@property (nonatomic, copy) NSString * _Nullable conversionSendID;
/// The conversion push metadata. :nodoc:
@property (nonatomic, copy) NSString * _Nullable conversionPushMetadata;
/// The current session ID.
@property (nonatomic, readonly, copy) NSString * _Nullable sessionID;
@property (nonatomic, getter=isComponentEnabled) BOOL componentEnabled;
/// Triggers an analytics event.
/// \param event The event to be triggered
///
- (void)addEvent:(id <UAEvent> _Nonnull)event;
/// Associates identifiers with the device. This call will add a special event
/// that will be batched and sent up with our other analytics events. Previous
/// associated identifiers will be replaced.
/// For internal use only. :nodoc:
/// \param associatedIdentifiers The associated identifiers.
///
- (void)associateDeviceIdentifiers:(UAAssociatedIdentifiers * _Nonnull)associatedIdentifiers;
/// The device’s current associated identifiers.
///
/// returns:
/// The device’s current associated identifiers.
- (UAAssociatedIdentifiers * _Nonnull)currentAssociatedDeviceIdentifiers SWIFT_WARN_UNUSED_RESULT;
/// Initiates screen tracking for a specific app screen, must be called once per tracked screen.
/// \param screen The screen’s identifier.
///
- (void)trackScreen:(NSString * _Nullable)screen;
/// Registers an SDK extension with the analytics module.
/// For internal use only. :nodoc:
/// version:
/// The version.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     ext: The SDK extension.
///   </li>
/// </ul>
- (void)registerSDKExtension:(enum UASDKExtension)ext version:(NSString * _Nonnull)version;
- (void)airshipReady;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSDate;

SWIFT_PROTOCOL_NAMED("AirshipAutomationAudienceCheckerProtocol")
@protocol UAAutomationAudienceCheckerProtocol
- (void)evaluateWithAudience:(id _Nonnull)audience isNewUserEvaluationDate:(NSDate * _Nonnull)isNewUserEvaluationDate contactID:(NSString * _Nullable)contactID completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
@end


SWIFT_CLASS_NAMED("AirshipAutomationAudienceChecker")
@interface UAAutomationAudienceChecker : NSObject <UAAutomationAudienceCheckerProtocol>
- (void)evaluateWithAudience:(id _Nonnull)audience isNewUserEvaluationDate:(NSDate * _Nonnull)isNewUserEvaluationDate contactID:(NSString * _Nullable)contactID completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class UATagEditor;
@class UATagGroupsEditor;
@class UASubscriptionListEditor;
@class UAAttributesEditor;
@class UAAttributeMutations;

/// This singleton provides an interface to the channel functionality.
SWIFT_CLASS_NAMED("AirshipChannel")
@interface UAChannel : NSObject <UAComponent>
/// Notification event when the channel is created.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull channelCreatedEvent;)
+ (NSNotificationName _Nonnull)channelCreatedEvent SWIFT_WARN_UNUSED_RESULT;
/// Channel ID key for channelCreatedEvent and channelUpdatedEvent.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull channelIdentifierKey;)
+ (NSString * _Nonnull)channelIdentifierKey SWIFT_WARN_UNUSED_RESULT;
/// Channel existing key for channelCreatedEvent.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull channelExistingKey;)
+ (NSString * _Nonnull)channelExistingKey SWIFT_WARN_UNUSED_RESULT;
/// Notification event when the channel is updated.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull channelUpdatedEvent;)
+ (NSNotificationName _Nonnull)channelUpdatedEvent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull legacyTagsSettingsKey;)
+ (NSString * _Nonnull)legacyTagsSettingsKey SWIFT_WARN_UNUSED_RESULT;
/// The channel identifier.
@property (nonatomic, readonly, copy) NSString * _Nullable identifier;
/// The channel tags.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull tags;
/// Allows setting tags from the device. Tags can be set from either the server or the device, but not both (without synchronizing the data),
/// so use this flag to explicitly enable or disable the device-side flags.
/// Set this to <code>false</code> to prevent the device from sending any tag information to the server when using server-side tagging. Defaults to <code>true</code>.
@property (nonatomic) BOOL isChannelTagRegistrationEnabled;
@property (nonatomic, getter=isComponentEnabled) BOOL componentEnabled;
/// The shared Channel instance.
/// <ul>
///   <li>
///     Returns The shared Channel instance.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAChannel * _Nonnull shared;)
+ (UAChannel * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Begins a tag editing session
///
/// returns:
/// A TagEditor
- (UATagEditor * _Nonnull)editTags SWIFT_WARN_UNUSED_RESULT;
/// Begins a tag editing session
/// \param editorBlock A tag editor block.
///
///
/// returns:
/// A TagEditor
- (void)editTags:(SWIFT_NOESCAPE void (^ _Nonnull)(UATagEditor * _Nonnull))editorBlock;
/// Begins a tag group editing session
///
/// returns:
/// A TagGroupsEditor
- (UATagGroupsEditor * _Nonnull)editTagGroups SWIFT_WARN_UNUSED_RESULT;
/// Begins a tag group editing session
/// \param editorBlock A tag group editor block.
///
///
/// returns:
/// A TagGroupsEditor
- (void)editTagGroups:(SWIFT_NOESCAPE void (^ _Nonnull)(UATagGroupsEditor * _Nonnull))editorBlock;
/// Begins a subscription list editing session
///
/// returns:
/// A SubscriptionListEditor
- (UASubscriptionListEditor * _Nonnull)editSubscriptionLists SWIFT_WARN_UNUSED_RESULT;
/// Begins a subscription list editing session
/// \param editorBlock A subscription list editor block.
///
///
/// returns:
/// A SubscriptionListEditor
- (void)editSubscriptionLists:(SWIFT_NOESCAPE void (^ _Nonnull)(UASubscriptionListEditor * _Nonnull))editorBlock;
/// Fetches subscription lists.
///
/// returns:
/// Subscriptions lists.
- (void)fetchSubscriptionListsWithCompletionHandler:(void (^ _Nonnull)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completionHandler;
/// Begins an attributes editing session
///
/// returns:
/// An AttributesEditor
- (UAAttributesEditor * _Nonnull)editAttributes SWIFT_WARN_UNUSED_RESULT;
/// Begins an attributes editing session
/// \param editorBlock An attributes editor block. 
///
///
/// returns:
/// An AttributesEditor
- (void)editAttributes:(SWIFT_NOESCAPE void (^ _Nonnull)(UAAttributesEditor * _Nonnull))editorBlock;
/// Adds a device tag.
/// \param tag The tag.
///
- (void)addTag:(NSString * _Nonnull)tag SWIFT_DEPRECATED_MSG("Use editTags instead.");
/// Adds a list of device tags.
/// \param tags The tags.
///
- (void)addTags:(NSArray<NSString *> * _Nonnull)tags SWIFT_DEPRECATED_MSG("Use editTags instead.");
/// Removes a device tag.
/// \param tag The tag.
///
- (void)removeTag:(NSString * _Nonnull)tag SWIFT_DEPRECATED_MSG("Use editTags instead.");
/// Removes a list of device tags.
/// \param tags The tag.
///
- (void)removeTags:(NSArray<NSString *> * _Nonnull)tags SWIFT_DEPRECATED_MSG("Use editTags instead.");
/// Adds a list of tags to a group.
/// \param tags The tags.
///
/// \param group The tag group.
///
- (void)addTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)group SWIFT_DEPRECATED_MSG("Use editTagGroups instead.");
/// Removes a list of tags from a group.
/// \param tags The tags.
///
/// \param group The tag group.
///
- (void)removeTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)group SWIFT_DEPRECATED_MSG("Use editTagGroups instead.");
/// Sets a list of tags to a group.
/// \param tags The tags.
///
/// \param group The tag group.
///
- (void)setTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)group SWIFT_DEPRECATED_MSG("Use editTagGroups instead.");
/// Applies attribute mutations.
/// \param mutations The mutations.
///
- (void)applyAttributeMutations:(UAAttributeMutations * _Nonnull)mutations SWIFT_DEPRECATED_MSG("Use editAttributes instead.");
/// Enables channel creation if channelCreationDelayEnabled was set to <code>YES</code> in the config.
- (void)enableChannelCreation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class UNNotificationResponse;
@class UNNotification;

/// Internal protocol to fan out push handling to UAComponents.
/// note:
/// For internal use only. :nodoc:
SWIFT_PROTOCOL_NAMED("PushableComponent")
@protocol UAPushableComponent
@optional
/// Called when a remote notification is received.
/// \param notification The notification.
///
/// \param completionHandler The completion handler that must be called with the fetch result.
///
- (void)receivedRemoteNotification:(NSDictionary * _Nonnull)notification completionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
/// Called when a notification response is received.
/// \param response The notification response.
///
/// \param completionHandler The completion handler that must be called after processing the response.
///
- (void)receivedNotificationResponse:(UNNotificationResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Called when a notification is about to be presented.
/// \param notification The notification to be presented.
///
/// \param options Default presentation options.
///
///
/// returns:
/// The presentation options.
- (UNNotificationPresentationOptions)presentationOptionsForNotification:(UNNotification * _Nonnull)notification defaultPresentationOptions:(UNNotificationPresentationOptions)options SWIFT_WARN_UNUSED_RESULT;
@end


@interface UAChannel (SWIFT_EXTENSION(AirshipCore)) <UAPushableComponent>
- (void)receivedRemoteNotification:(NSDictionary * _Nonnull)notification completionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
@end

enum UACloudSite : NSInteger;

/// The Config object provides an interface for passing common configurable values to <code>UAirship</code>.
/// The simplest way to use this class is to add an AirshipConfig.plist file in your app’s bundle and set
/// the desired options.
SWIFT_CLASS_NAMED("AirshipConfig")
@interface UAConfig : NSObject <NSCopying>
/// The development app key. This should match the application on go.urbanairship.com that is
/// configured with your development push certificate.
@property (nonatomic, copy) NSString * _Nullable developmentAppKey;
/// The development app secret. This should match the application on go.urbanairship.com that is
/// configured with your development push certificate.
@property (nonatomic, copy) NSString * _Nullable developmentAppSecret;
/// The production app key. This should match the application on go.urbanairship.com that is
/// configured with your production push certificate. This is used for App Store, Ad-Hoc and Enterprise
/// app configurations.
@property (nonatomic, copy) NSString * _Nullable productionAppKey;
/// The production app secret. This should match the application on go.urbanairship.com that is
/// configured with your production push certificate. This is used for App Store, Ad-Hoc and Enterprise
/// app configurations.
@property (nonatomic, copy) NSString * _Nullable productionAppSecret;
/// The log level used for development apps. Defaults to <code>debug</code>.
@property (nonatomic) enum UALogLevel developmentLogLevel;
/// The log level used for production apps. Defaults to <code>error</code>.
@property (nonatomic) enum UALogLevel productionLogLevel;
/// Auto pause InAppAutomation on launch. Defaults to <code>false</code>
@property (nonatomic) BOOL autoPauseInAppAutomationOnLaunch;
/// The airship cloud site. Defaults to <code>us</code>.
@property (nonatomic) enum UACloudSite site;
/// :nodoc:
@property (nonatomic) UAFeatures enabledFeatures;
/// The default app key. Depending on the <code>inProduction</code> status,
/// <code>developmentAppKey</code> or <code>productionAppKey</code> will take priority.
@property (nonatomic, copy) NSString * _Nonnull defaultAppKey;
/// The default app secret. Depending on the <code>inProduction</code> status,
/// <code>developmentAppSecret</code> or <code>productionAppSecret</code> will take priority.
@property (nonatomic, copy) NSString * _Nonnull defaultAppSecret;
/// The production status of this application. This may be set directly, or it may be determined
/// automatically if the <code>detectProvisioningMode</code> flag is set to <code>true</code>.
/// If neither <code>inProduction</code> nor <code>detectProvisioningMode</code> is set,
/// <code>detectProvisioningMode</code> will be enabled.
@property (nonatomic) BOOL inProduction;
/// Apps may be set to self-configure based on the APS-environment set in the
/// embedded.mobileprovision file by using <code>detectProvisioningMode</code>. If
/// <code>detectProvisioningMode</code> is set to <code>true</code>, the <code>inProduction</code> value will
/// be determined at runtime by reading the provisioning profile. If it is set to
/// <code>false</code> (the default), the inProduction flag may be set directly or by using the
/// AirshipConfig.plist file.
/// When this flag is enabled, the <code>inProduction</code> will fallback to <code>true</code> for safety
/// so that the production keys will always be used if the profile cannot be read
/// in a released app. Simulator builds do not include the profile, and the
/// <code>detectProvisioningMode</code> flag does not have any effect in cases where a profile
/// is not present. When a provisioning file is not present, the app will fall
/// back to the <code>inProduction</code> property as set in code or the AirshipConfig.plist
/// file.
@property (nonatomic) BOOL detectProvisioningMode;
/// NOTE: For internal use only. :nodoc:
@property (nonatomic, copy) NSString * _Nullable profilePath;
/// If enabled, the Airship library automatically registers for remote notifications when push is enabled
/// and intercepts incoming notifications in both the foreground and upon launch.
/// Defaults to <code>true</code>. If this is disabled, you will need to register for remote notifications
/// in application:didFinishLaunchingWithOptions: and forward all notification-related app delegate
/// calls to UAPush and UAInbox.
@property (nonatomic) BOOL isAutomaticSetupEnabled;
/// An array of <code>UAURLAllowList</code> entry strings.
/// This url allow list is used for validating which URLs can be opened or load the JavaScript native bridge.
/// It affects landing pages, the open external URL and wallet actions,
/// deep link actions (if a delegate is not set), and HTML in-app messages.
/// note:
/// See <code>UAURLAllowList</code> for pattern entry syntax.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull URLAllowList;
/// An array of<code> UAURLAllowList</code> entry strings.
/// This url allow list is used for validating which URLs can load the JavaScript native bridge,
/// It affects Landing Pages, Message Center and HTML In-App Messages.
/// note:
/// See <code>UAURLAllowList</code> for pattern entry syntax.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull URLAllowListScopeJavaScriptInterface;
/// An array of UAURLAllowList entry strings.
/// This url allow list is used for validating which URLs can be opened.
/// It affects landing pages, the open external URL and wallet actions,
/// deep link actions (if a delegate is not set), and HTML in-app messages.
/// note:
/// See <code>UAURLAllowList</code> for pattern entry syntax.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull URLAllowListScopeOpenURL;
/// The iTunes ID used for Rate App Actions.
@property (nonatomic, copy) NSString * _Nullable itunesID;
/// Toggles Airship analytics. Defaults to <code>true</code>. If set to <code>false</code>, many Airship features will not be
/// available to this application.
@property (nonatomic) BOOL isAnalyticsEnabled;
/// The Airship default message center style configuration file.
@property (nonatomic, copy) NSString * _Nullable messageCenterStyleConfig;
/// If set to <code>true</code>, the Airship user will be cleared if the application is
/// restored on a different device from an encrypted backup.
/// Defaults to <code>false</code>.
@property (nonatomic) BOOL clearUserOnAppRestore;
/// If set to <code>true</code>, the application will clear the previous named user ID on a
/// re-install. Defaults to <code>false</code>.
@property (nonatomic) BOOL clearNamedUserOnAppRestore;
/// Flag indicating whether channel capture feature is enabled or not.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL isChannelCaptureEnabled;
/// Flag indicating whether delayed channel creation is enabled. If set to <code>true</code> channel
/// creation will not occur until channel creation is manually enabled.
/// Defaults to <code>false</code>.
@property (nonatomic) BOOL isChannelCreationDelayEnabled;
/// Flag indicating whether extended broadcasts are enabled. If set to <code>true</code> the AirshipReady NSNotification
/// will contain additional data: the channel identifier and the app key.
/// Defaults to <code>false</code>.
@property (nonatomic) BOOL isExtendedBroadcastsEnabled;
/// If set to ‘YES’, the Airship SDK will request authorization to use
/// notifications from the user. Apps that set this flag to <code>false</code> are
/// required to request authorization themselves.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL requestAuthorizationToUseNotifications;
/// If set to <code>true</code>, the SDK will wait for an initial remote config instead of falling back on default API URLs.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL requireInitialRemoteConfigEnabled;
/// The Airship URL used to pull the initial config. This should only be set
/// if you are using custom domains that forward to Airship.
@property (nonatomic, copy) NSString * _Nullable initialConfigURL;
/// The Airship device API url.
/// note:
/// This option is reserved for internal debugging. :nodoc:
@property (nonatomic, copy) NSString * _Nullable deviceAPIURL;
/// The Airship analytics API url.
/// note:
/// This option is reserved for internal debugging. :nodoc:
@property (nonatomic, copy) NSString * _Nullable analyticsURL;
/// The Airship remote data API url.
/// note:
/// This option is reserved for internal debugging. :nodoc:
@property (nonatomic, copy) NSString * _Nullable remoteDataAPIURL;
/// The Airship chat API URL.
@property (nonatomic, copy) NSString * _Nullable chatURL;
/// The Airship web socket URL.
@property (nonatomic, copy) NSString * _Nullable chatWebSocketURL;
/// Returns the resolved app key.
///
/// returns:
/// The resolved app key or an empty string.
@property (nonatomic, readonly, copy) NSString * _Nonnull appKey;
/// Returns the resolved app secret.
///
/// returns:
/// The resolved app key or an empty string.
@property (nonatomic, readonly, copy) NSString * _Nonnull appSecret;
/// Returns the resolved log level.
///
/// returns:
/// The resolved log level.
@property (nonatomic, readonly) enum UALogLevel logLevel;
/// Creates an instance using the values set in the <code>AirshipConfig.plist</code> file.
///
/// returns:
/// A config with values from <code>AirshipConfig.plist</code> file.
+ (UAConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance using the values found in the specified <code>.plist</code> file.
/// \param path The path of the specified file.
///
///
/// returns:
/// A config with values from the specified file.
+ (UAConfig * _Nonnull)configWithContentsOfFile:(NSString * _Nullable)path SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance with empty values.
///
/// returns:
/// A config with empty values.
+ (UAConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance using the values found in the specified <code>.plist</code> file.
/// \param path The path of the specified file.
///
///
/// returns:
/// A config with values from the specified file.
- (nonnull instancetype)initWithContentsOfFile:(NSString * _Nullable)path;
/// Creates an instance with empty values.
///
/// returns:
/// A Config with empty values.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Validates the current configuration. In addition to performing a strict validation, this method
/// will log warnings and common configuration errors.
///
/// returns:
/// <code>true</code> if the current configuration is valid, otherwise <code>false</code>.
- (BOOL)validate SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isProductionProvisioningProfile:(NSString * _Nonnull)profilePath SWIFT_WARN_UNUSED_RESULT;
- (void)setValue:(id _Nullable)value forUndefinedKey:(NSString * _Nonnull)key;
@end

@class UAEmailRegistrationOptions;
@class UASMSRegistrationOptions;
@class UAOpenRegistrationOptions;
enum UAChannelType : NSInteger;
@class UAScopedSubscriptionListEditor;
@class UAChannelScopes;

/// Airship contact. A contact is distinct from a channel and  represents a “user”
/// within Airship. Contacts may be named and have channels associated with it.
SWIFT_CLASS_NAMED("AirshipContact")
@interface UAContact : NSObject <UAComponent>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull contactConflictEvent;)
+ (NSNotificationName _Nonnull)contactConflictEvent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull contactConflictEventKey;)
+ (NSString * _Nonnull)contactConflictEventKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger maxNamedUserIDLength;)
+ (NSInteger)maxNamedUserIDLength SWIFT_WARN_UNUSED_RESULT;
- (void)getNamedUserIDWithCompletionHandler:(void (^ _Nonnull)(NSString * _Nullable))completionHandler;
@property (nonatomic, getter=isComponentEnabled) BOOL componentEnabled;
/// The shared Contact instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAContact * _Nonnull shared;)
+ (UAContact * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)airshipReady;
/// Identifies the contact.
/// \param namedUserID The named user ID.
///
- (void)identify:(NSString * _Nonnull)namedUserID;
/// Resets the contact.
- (void)reset;
/// Begins a tag groups editing session.
///
/// returns:
/// A TagGroupsEditor
- (UATagGroupsEditor * _Nonnull)editTagGroups SWIFT_WARN_UNUSED_RESULT;
/// Begins a tag groups editing session.
/// \param editorBlock A tag groups editor block.
///
///
/// returns:
/// A TagGroupsEditor
- (void)editTagGroups:(SWIFT_NOESCAPE void (^ _Nonnull)(UATagGroupsEditor * _Nonnull))editorBlock;
/// Begins an attribute editing session.
///
/// returns:
/// An AttributesEditor
- (UAAttributesEditor * _Nonnull)editAttributes SWIFT_WARN_UNUSED_RESULT;
/// Begins an attribute editing session.
/// \param editorBlock An attributes editor block.
///
///
/// returns:
/// An AttributesEditor
- (void)editAttributes:(SWIFT_NOESCAPE void (^ _Nonnull)(UAAttributesEditor * _Nonnull))editorBlock;
/// Associates an Email channel to the contact.
/// \param address The email address.
///
/// \param options The email channel registration options.
///
- (void)registerEmail:(NSString * _Nonnull)address options:(UAEmailRegistrationOptions * _Nonnull)options;
/// Associates a SMS channel to the contact.
/// \param msisdn The SMS msisdn.
///
/// \param options The SMS channel registration options.
///
- (void)registerSMS:(NSString * _Nonnull)msisdn options:(UASMSRegistrationOptions * _Nonnull)options;
/// Associates an open channel to the contact.
/// \param address The open channel address.
///
/// \param options The open channel registration options.
///
- (void)registerOpen:(NSString * _Nonnull)address options:(UAOpenRegistrationOptions * _Nonnull)options;
/// Associates a channel to the contact.
/// \param channelID The channel ID.
///
/// \param type The channel type.
///
- (void)associateChannel:(NSString * _Nonnull)channelID type:(enum UAChannelType)type;
/// Begins a subscription list editing session
///
/// returns:
/// A Scoped subscription list editor
- (UAScopedSubscriptionListEditor * _Nonnull)editSubscriptionLists SWIFT_WARN_UNUSED_RESULT;
/// Begins a subscription list editing session
/// \param editorBlock A scoped subscription list editor block.
///
///
/// returns:
/// A ScopedSubscriptionListEditor
- (void)editSubscriptionLists:(SWIFT_NOESCAPE void (^ _Nonnull)(UAScopedSubscriptionListEditor * _Nonnull))editorBlock;
- (void)fetchSubscriptionListsWithCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, UAChannelScopes *> * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Airship contact. A contact is distinct from a channel and  represents a “user”
/// within Airship. Contacts may be named and have channels associated with it.
SWIFT_PROTOCOL_NAMED("AirshipContactBaseProtocol")
@protocol UAContactProtocol
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull contactConflictEvent;)
+ (NSNotificationName _Nonnull)contactConflictEvent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull contactConflictEventKey;)
+ (NSString * _Nonnull)contactConflictEventKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger maxNamedUserIDLength;)
+ (NSInteger)maxNamedUserIDLength SWIFT_WARN_UNUSED_RESULT;
/// The current named user ID if set through the SDK.
- (void)getNamedUserIDWithCompletionHandler:(void (^ _Nonnull)(NSString * _Nullable))completionHandler;
/// Associates the contact with the given named user identifier.
/// \param namedUserID The named user ID.
///
- (void)identify:(NSString * _Nonnull)namedUserID;
/// Disassociate the channel from its current contact, and create a new
/// un-named contact.
- (void)reset;
/// Edits tags.
///
/// returns:
/// A tag groups editor.
- (UATagGroupsEditor * _Nonnull)editTagGroups SWIFT_WARN_UNUSED_RESULT;
/// Edits tags.
/// \param editorBlock The editor block with the editor. The editor will <code>apply</code> will be called after the block is executed.
///
- (void)editTagGroups:(SWIFT_NOESCAPE void (^ _Nonnull)(UATagGroupsEditor * _Nonnull))editorBlock;
/// Edits attributes.
///
/// returns:
/// An attributes editor.
- (UAAttributesEditor * _Nonnull)editAttributes SWIFT_WARN_UNUSED_RESULT;
/// Edits  attributes.
/// \param editorBlock The editor block with the editor. The editor will <code>apply</code> will be called after the block is executed.
///
- (void)editAttributes:(SWIFT_NOESCAPE void (^ _Nonnull)(UAAttributesEditor * _Nonnull))editorBlock;
/// Associates an Email channel to the contact.
/// \param address The email address.
///
/// \param options The email channel registration options.
///
- (void)registerEmail:(NSString * _Nonnull)address options:(UAEmailRegistrationOptions * _Nonnull)options;
/// Associates a SMS channel to the contact.
/// \param msisdn The SMS msisdn.
///
/// \param options The SMS channel registration options.
///
- (void)registerSMS:(NSString * _Nonnull)msisdn options:(UASMSRegistrationOptions * _Nonnull)options;
/// Associates an Open channel to the contact.
/// \param address The open channel address.
///
/// \param options The open channel registration options.
///
- (void)registerOpen:(NSString * _Nonnull)address options:(UAOpenRegistrationOptions * _Nonnull)options;
/// Associates a channel to the contact.
/// \param channelID The channel ID.
///
/// \param type The channel type.
///
- (void)associateChannel:(NSString * _Nonnull)channelID type:(enum UAChannelType)type;
/// Begins a subscription list editing session
///
/// returns:
/// A Scoped subscription list editor
- (UAScopedSubscriptionListEditor * _Nonnull)editSubscriptionLists SWIFT_WARN_UNUSED_RESULT;
/// Begins a subscription list editing session
/// \param editorBlock A scoped subscription list editor block.
///
- (void)editSubscriptionLists:(SWIFT_NOESCAPE void (^ _Nonnull)(UAScopedSubscriptionListEditor * _Nonnull))editorBlock;
/// Fetches subscription lists.
///
/// returns:
/// Subscriptions lists.
- (void)fetchSubscriptionListsWithCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, UAChannelScopes *> * _Nullable, NSError * _Nullable))completionHandler;
@end

@class NSBundle;

SWIFT_CLASS_NAMED("AirshipCoreResources")
@interface UAirshipCoreResources : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull bundle;)
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("AirshipDate")
@interface UAirshipDate : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAirshipDate * _Nonnull shared;)
+ (UAirshipDate * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSDate * _Nonnull now;
@end

enum UADateFormatterFormat : NSInteger;

/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("AirshipDateFormatter")
@interface UADateFormatter : NSObject
/// Parses ISO 8601 date strings.
/// Supports timestamps with just year all the way up to seconds with and without the optional <code>T</code> delimiter.
/// \param from The ISO 8601 timestamp.
///
///
/// returns:
/// A parsed Date object, or nil if the timestamp is not a valid format.
+ (NSDate * _Nullable)dateFromISOString:(NSString * _Nonnull)from SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)stringFromDate:(NSDate * _Nonnull)date format:(enum UADateFormatterFormat)format SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, UADateFormatterFormat, "Format", open) {
/// ISO 8601
  UADateFormatterFormatIso = 0,
/// ISO 8601 with delimitter
  UADateFormatterFormatIsoDelimitter = 1,
/// Short date & time format
  UADateFormatterFormatRelativeShort = 2,
/// Short date format
  UADateFormatterFormatRelativeShortDate = 3,
/// Full date & time format
  UADateFormatterFormatRelativeFull = 4,
/// Full date format
  UADateFormatterFormatRelativeFullDate = 5,
};


SWIFT_CLASS_NAMED("AirshipErrors")
@interface UAirshipErrors : NSObject
+ (NSError * _Nonnull)parseError:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)error:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("AirshipImageData")
@interface UAirshipImageData : NSObject
- (nullable instancetype)initWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Image provider to extend image loading.
/// note:
/// for internal use only.  :nodoc:
SWIFT_PROTOCOL_NAMED("AirshipImageProvider")
@protocol UAImageProvider
/// Gets the an image.
/// \param url The image URL.
///
///
/// returns:
/// The image or nil to let the image loader fetch it.
- (UAirshipImageData * _Nullable)getWithUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("AirshipLegacyHTTPResponse")
@interface UAHTTPResponse : NSObject
@property (nonatomic, readonly) NSInteger status;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithStatus:(NSInteger)status OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL isSuccess;
@property (nonatomic, readonly) BOOL isClientError;
@property (nonatomic, readonly) BOOL isServerError;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("AirshipLegacyRequest")
@interface UARequest : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull method;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable headers;
@property (nonatomic, readonly, copy) NSData * _Nullable body;
+ (UARequest * _Nonnull)makeChannelAuthRequestWithChannelID:(NSString * _Nonnull)channelID method:(NSString * _Nonnull)method url:(NSURL * _Nonnull)url headers:(NSDictionary<NSString *, NSString *> * _Nullable)headers body:(NSData * _Nullable)body SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSHTTPURLResponse;

SWIFT_CLASS_NAMED("AirshipLegacyRequestSession")
@interface UARequestSession : NSObject
- (nonnull instancetype)initWithConfig:(UARuntimeConfig * _Nonnull)config OBJC_DESIGNATED_INITIALIZER;
- (void)performHTTPRequest:(UARequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSHTTPURLResponse * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSLocale;

SWIFT_PROTOCOL_NAMED("AirshipLocaleManagerProtocol")
@protocol UALocaleManagerProtocol
/// Resets the current locale.
- (void)clearLocale;
/// The current locale used by Airship. Defaults to <code>autoupdatingCurrent</code>.
@property (nonatomic, readonly, copy) NSLocale * _Nonnull currentLocale;
@end


/// Airship locale manager.
SWIFT_CLASS_NAMED("AirshipLocaleManager")
@interface UALocaleManager : NSObject <UALocaleManagerProtocol>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull localeUpdatedEvent;)
+ (NSNotificationName _Nonnull)localeUpdatedEvent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull localeEventKey;)
+ (NSString * _Nonnull)localeEventKey SWIFT_WARN_UNUSED_RESULT;
/// The current locale used by Airship. Defaults to <code>autoupdatingCurrent</code>.
@property (nonatomic, copy) NSLocale * _Nonnull currentLocale;
/// Resets the current locale.
- (void)clearLocale;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Protocol used by Airship to log all log messages within the SDK.
/// A custom log handlers should be set on <code>Airship.logHandler</code> before <code>Airship.takeOff</code>.
SWIFT_PROTOCOL_NAMED("AirshipLogHandler")
@protocol UAirshipLogHandler
/// Called to log a message.
/// \param logLevel The Airship log level.
///
/// \param message The log message.
///
/// \param fileID The file ID.
///
/// \param line The line number.
///
/// \param function The function.
///
- (void)logWithLogLevel:(enum UALogLevel)logLevel message:(NSString * _Nonnull)message fileID:(NSString * _Nonnull)fileID line:(NSUInteger)line function:(NSString * _Nonnull)function;
@end

/// Represents the possible log levels.
typedef SWIFT_ENUM_NAMED(NSInteger, UALogLevel, "AirshipLogLevel", open) {
/// Undefined log level.
  UALogLevelUndefined SWIFT_COMPILE_NAME("undefined") = -1,
/// No log messages.
  UALogLevelNone SWIFT_COMPILE_NAME("none") = 0,
/// Log error messages.
/// Used for critical errors, parse exceptions and other situations that cannot be gracefully handled.
  UALogLevelError SWIFT_COMPILE_NAME("error") = 1,
/// Log warning messages.
/// Used for API deprecations, invalid setup and other potentially problematic situations.
  UALogLevelWarn SWIFT_COMPILE_NAME("warn") = 2,
/// Log informative messages.
/// Used for reporting general SDK status.
  UALogLevelInfo SWIFT_COMPILE_NAME("info") = 3,
/// Log debugging messages.
/// Used for reporting general SDK status with more detailed information.
  UALogLevelDebug SWIFT_COMPILE_NAME("debug") = 4,
/// Log detailed verbose messages.
/// Used for reporting highly detailed SDK status that can be useful when debugging and troubleshooting.
  UALogLevelVerbose SWIFT_COMPILE_NAME("verbose") = 5,
};

/// Airship permissions. Used with <code>PermissionsManager</code>
typedef SWIFT_ENUM_NAMED(NSUInteger, UAPermission, "AirshipPermission", open) {
/// Post notifications
  UAPermissionDisplayNotifications = 0,
/// Location
  UAPermissionLocation = 1,
};

enum UAPermissionStatus : NSUInteger;

/// Permissions manager delegate. Allows for extending permission gathering.
SWIFT_PROTOCOL_NAMED("AirshipPermissionDelegate")
@protocol UAAirshipPermissionDelegate
/// Called when a permission needs to be checked.
///
/// returns:
/// the permission status.
- (void)checkPermissionStatusWithCompletionHandler:(void (^ _Nonnull)(enum UAPermissionStatus))completionHandler;
/// Called when a permission should be requested.
/// note:
/// A permission might be already granted when this method is called.
///
/// returns:
/// the permission status.
- (void)requestPermissionWithCompletionHandler:(void (^ _Nonnull)(enum UAPermissionStatus))completionHandler;
@end

/// Permission status
typedef SWIFT_ENUM_NAMED(NSUInteger, UAPermissionStatus, "AirshipPermissionStatus", open) {
/// Could not determine the permission status.
  UAPermissionStatusNotDetermined = 0,
/// Permission is granted.
  UAPermissionStatusGranted = 1,
/// Permission is denied.
  UAPermissionStatusDenied = 2,
};


/// Airship permissions manager.
/// Airship will provide the default handling for <code>Permission.postNotifications</code>. All other permissions will need
/// to be configured by the app by providing a <code>PermissionDelegate</code> for the given permissions.
SWIFT_CLASS_NAMED("AirshipPermissionsManager")
@interface UAPermissionsManager : NSObject
/// note:
/// For internal use only. :nodoc:
- (void)permissionStatusMapWithCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nonnull))completionHandler;
/// Sets a permission delegate.
/// note:
/// The delegate will be strongly retained.
/// \param delegate The delegate.
///
/// \param permission The permission.
///
- (void)setDelegate:(id <UAAirshipPermissionDelegate> _Nullable)delegate permission:(enum UAPermission)permission;
/// Requests a permission.
/// note:
/// If no permission delegate is set for the given permission this will always return <code>.notDetermined</code>
/// \param permission The permission.
///
- (void)requestPermission:(enum UAPermission)permission completionHandler:(void (^ _Nonnull)(enum UAPermissionStatus))completionHandler;
/// Requests a permission.
/// note:
/// If no permission delegate is set for the given permission this will always return <code>.notDetermined</code>
/// \param permission The permission.
///
/// \param enableAirshipUsageOnGrant <code>true</code> to allow any Airship features that need the permission to be enabled as well, e.g., enabling push privacy manager feature and user notifications if <code>.postNotifications</code> is granted.
///
/// \param completionHandler The completion handler.
///
- (void)requestPermission:(enum UAPermission)permission enableAirshipUsageOnGrant:(BOOL)enableAirshipUsageOnGrant completionHandler:(void (^ _Nonnull)(enum UAPermissionStatus))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UAPreferenceDataStore;

/// The privacy manager allow enabling/disabling features in the SDK.
/// The SDK will not make any network requests or collect data if all features our disabled, with
/// a few exceptions when going from enabled -> disabled. To have the SDK opt-out of all features on startup,
/// set the default enabled features in the Config to an empty option set, or in the
/// airshipconfig.plist file with <code>enabledFeatures = none</code>.
/// If any feature is enabled, the SDK will collect and send the following data:
/// <ul>
///   <li>
///     Channel ID
///   </li>
///   <li>
///     Locale
///   </li>
///   <li>
///     TimeZone
///   </li>
///   <li>
///     Platform
///   </li>
///   <li>
///     Opt in state (push and notifications)
///   </li>
///   <li>
///     SDK version
///   </li>
///   <li>
///     Accengage Device ID (Accengage module for migration)
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("AirshipPrivacyManager")
@interface UAPrivacyManager : NSObject
/// <ul>
///   <li>
///     NSNotification event when enabled feature list is updated.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull changeEvent;)
+ (NSNotificationName _Nonnull)changeEvent SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic) UAFeatures enabledFeatures;
+ (UAPrivacyManager * _Nonnull)privacyManagerWithDataStore:(UAPreferenceDataStore * _Nonnull)dataStore defaultEnabledFeatures:(UAFeatures)defaultEnabledFeatures SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)enableFeatures:(UAFeatures)features;
/// :nodoc:
- (void)disableFeatures:(UAFeatures)features;
/// :nodoc:
- (BOOL)isEnabled:(UAFeatures)features SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Checks if any feature is enabled.
///   </li>
///   <li>
///   </li>
///   <li>
///     <ul>
///       <li>
///         Returns: True if any feature is enabled, otherwise false.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (BOOL)isAnyFeatureEnabled SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UNNotificationCategory;
@protocol UAPushNotificationDelegate;
@protocol UARegistrationDelegate;
@class NSTimeZone;

/// This singleton provides an interface to the functionality provided by the Airship iOS Push API.
SWIFT_CLASS_NAMED("AirshipPush")
@interface UAPush : NSObject <UAComponent>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull notificationStatusUpdateEvent;)
+ (NSNotificationName _Nonnull)notificationStatusUpdateEvent SWIFT_WARN_UNUSED_RESULT;
/// The shared Push instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAPush * _Nonnull shared;)
+ (UAPush * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// NSNotification event when a notification response is received.
/// The event will contain the notification response object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull receivedNotificationResponseEvent;)
+ (NSNotificationName _Nonnull)receivedNotificationResponseEvent SWIFT_WARN_UNUSED_RESULT;
/// Response key for ReceivedNotificationResponseEvent
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull receivedNotificationResponseEventResponseKey;)
+ (NSString * _Nonnull)receivedNotificationResponseEventResponseKey SWIFT_WARN_UNUSED_RESULT;
/// NSNotification event when a foreground notification is received.
/// The event will contain the payload dictionary as user info.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull receivedForegroundNotificationEvent;)
+ (NSNotificationName _Nonnull)receivedForegroundNotificationEvent SWIFT_WARN_UNUSED_RESULT;
/// NSNotification event when a background notification is received.
/// The event will contain the payload dictionary as user info.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull receivedBackgroundNotificationEvent;)
+ (NSNotificationName _Nonnull)receivedBackgroundNotificationEvent SWIFT_WARN_UNUSED_RESULT;
/// Quiet Time dictionary start key. For internal use only :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull quietTimeStartKey;)
+ (NSString * _Nonnull)quietTimeStartKey SWIFT_WARN_UNUSED_RESULT;
/// Quiet Time dictionary end key. For internal use only :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull quietTimeEndKey;)
+ (NSString * _Nonnull)quietTimeEndKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull areNotificationsAllowed;)
+ (NSString * _Nonnull)areNotificationsAllowed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull isOptedIn;)
+ (NSString * _Nonnull)isOptedIn SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull isPushPrivacyFeatureEnabled;)
+ (NSString * _Nonnull)isPushPrivacyFeatureEnabled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull isPushTokenRegistered;)
+ (NSString * _Nonnull)isPushTokenRegistered SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull isUserNotificationsEnabled;)
+ (NSString * _Nonnull)isUserNotificationsEnabled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull isUserOptedIn;)
+ (NSString * _Nonnull)isUserOptedIn SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, getter=isComponentEnabled) BOOL componentEnabled;
/// Enables/disables background remote notifications on this device through Airship.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL backgroundPushNotificationsEnabled;
/// Enables/disables user notifications on this device through Airship.
/// Defaults to <code>false</code>. Once set to <code>true</code>, the user will be prompted for remote notifications.
@property (nonatomic) BOOL userPushNotificationsEnabled;
/// When enabled, if the user has ephemeral notification authorization the SDK will prompt the user for
/// notifications.  Defaults to <code>false</code>.
@property (nonatomic) BOOL requestExplicitPermissionWhenEphemeral;
/// The device token for this device, as a hex string.
@property (nonatomic, readonly, copy) NSString * _Nullable deviceToken;
/// User Notification options this app will request from APNS. Changes to this value
/// will not take effect until the next time the app registers with
/// updateRegistration.
/// Defaults to alert, sound and badge.
@property (nonatomic) UANotificationOptions notificationOptions;
/// Custom notification categories. Airship default notification
/// categories will be unaffected by this field.
/// Changes to this value will not take effect until the next time the app registers
/// with updateRegistration.
@property (nonatomic, copy) NSSet<UNNotificationCategory *> * _Nonnull customCategories;
/// The combined set of notification categories from <code>customCategories</code> set by the app
/// and the Airship provided categories.
@property (nonatomic, readonly, copy) NSSet<UNNotificationCategory *> * _Nonnull combinedCategories;
/// Sets authorization required for the default Airship categories. Only applies
/// to background user notification actions.
/// Changes to this value will not take effect until the next time the app registers
/// with updateRegistration.
@property (nonatomic) BOOL requireAuthorizationForDefaultCategories;
/// Set a delegate that implements the PushNotificationDelegate protocol.
@property (nonatomic, weak) id <UAPushNotificationDelegate> _Nullable pushNotificationDelegate;
/// Set a delegate that implements the UARegistrationDelegate protocol.
@property (nonatomic, weak) id <UARegistrationDelegate> _Nullable registrationDelegate;
/// Notification response that launched the application.
@property (nonatomic, readonly, strong) UNNotificationResponse * _Nullable launchNotificationResponse;
/// The current authorized notification settings.
/// If push is disabled in privacy manager, this value could be out of date.
/// Note: this value reflects all the notification settings currently enabled in the
/// Settings app and does not take into account which options were originally requested.
@property (nonatomic, readonly) UAAuthorizedNotificationSettings authorizedNotificationSettings;
/// The current authorization status.
/// If push is disabled in privacy manager, this value could be out of date.
@property (nonatomic, readonly) UAAuthorizationStatus authorizationStatus;
/// Indicates whether the user has been prompted for notifications or not.
/// If push is disabled in privacy manager, this value will be out of date.
@property (nonatomic, readonly) BOOL userPromptedForNotifications;
/// The default presentation options to use for foreground notifications.
@property (nonatomic) UNNotificationPresentationOptions defaultPresentationOptions;
/// Enables user notifications on this device through Airship.
/// note:
/// The completion handler will return the success state of system push authorization as it is defined by the
/// user’s response to the push authorization prompt. The completion handler success state does NOT represent the
/// state of the userPushNotificationsEnabled flag, which will be invariably set to <code>true</code> after the completion of this call.
/// \param completionHandler The completion handler with success flag representing the system authorization state.
///
- (void)enableUserPushNotificationsWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Indicates whether the user is opted in for push notifications or not.
@property (nonatomic, readonly) BOOL isPushNotificationsOptedIn;
/// The current badge number used by the device and on the Airship server.
/// note:
/// This property must be accessed on the main thread.
@property (nonatomic) NSInteger badgeNumber;
/// Toggle the Airship auto-badge feature. Defaults to <code>false</code> If enabled, this will update the
/// badge number stored by Airship every time the app is started or foregrounded.
@property (nonatomic) BOOL autobadgeEnabled;
/// Resets the badge to zero (0) on both the device and on Airships servers. This is a
/// convenience method for setting the <code>badgeNumber</code> property to zero.
/// note:
/// This method must be called on the main thread.
- (void)resetBadge;
/// Quiet time settings for this device.
@property (nonatomic, readonly, copy) NSDictionary * _Nullable quietTime;
/// Time Zone for quiet time. If the time zone is not set, the current
/// local time zone is returned.
@property (nonatomic, strong) NSTimeZone * _Nullable timeZone;
/// Enables/Disables quiet time
@property (nonatomic) BOOL quietTimeEnabled;
/// Sets the quiet time start and end time.  The start and end time does not change
/// if the time zone changes.  To set the time zone, see ‘timeZone’.
/// Update the server after making changes to the quiet time with the
/// <code>updateRegistration</code> call. Batching these calls improves API and client performance.
/// warning:
/// This method does not automatically enable quiet time and does not
/// automatically update the server. Please refer to <code>quietTimeEnabled</code> and
/// <code>updateRegistration</code> for more information.
/// \param startHour Quiet time start hour. Only 0-23 is valid.
///
/// \param startMinute Quiet time start minute. Only 0-59 is valid.
///
/// \param endHour Quiet time end hour. Only 0-23 is valid.
///
/// \param endMinute Quiet time end minute. Only 0-59 is valid.
///
- (void)setQuietTimeStartHour:(NSInteger)startHour startMinute:(NSInteger)startMinute endHour:(NSInteger)endHour endMinute:(NSInteger)endMinute;
/// Registers or updates the current registration with an API call. If push notifications are
/// not enabled, this unregisters the device token.
/// Add a <code>UARegistrationDelegate</code> to <code>UAPush</code> to receive success and failure callbacks.
- (void)updateRegistration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Allowed SDK extension types.
/// note:
/// For internal use only. :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, UASDKExtension, "AirshipSDKExtension", open) {
/// The Cordova SDK extension.
  UASDKExtensionCordova = 0,
/// The Xamarin SDK extension.
  UASDKExtensionXamarin = 1,
/// The Unity SDK extension.
  UASDKExtensionUnity = 2,
/// The Flutter SDK extension.
  UASDKExtensionFlutter = 3,
/// The React Native SDK extension.
  UASDKExtensionReactNative = 4,
/// The Titanium SDK extension.
  UASDKExtensionTitanium = 5,
};

@class UATaskRequestOptions;

/// Task passed to the launcher when ready to execute.
/// note:
/// For internal use only. :nodoc:
SWIFT_PROTOCOL_NAMED("AirshipTask")
@protocol UATask
/// Completion handler. Will be called once task is completed.
@property (nonatomic, copy) void (^ _Nullable completionHandler)(void);
/// The task ID.
@property (nonatomic, readonly, copy) NSString * _Nonnull taskID;
/// The task request options.
@property (nonatomic, readonly, strong) UATaskRequestOptions * _Nonnull requestOptions;
/// The launcher should call this method to signal that the task was completed successfully.
- (void)taskCompleted;
/// The launcher should call this method to signal the task failed and needs to be retried.
- (void)taskFailed;
@end

@class NSDateFormatter;
@class UIWindow;
@class UIWindowScene;

/// The <code>Utils</code> object provides an interface for utility methods.
SWIFT_CLASS_NAMED("AirshipUtils")
@interface UAUtils : NSObject
/// Compares two <code>float</code> values and returns <code>true</code> if the difference between them is less than or equal
/// to the absolute value of the specified <code>accuracy</code>.
/// \param float1 The first <code>float</code>.
///
/// \param float2 The second <code>float</code>.
///
/// \param accuracy The maximum allowed difference between values to be compared as equal.
///
///
/// returns:
/// <code>true</code> if the difference between the two floats is within the given <code>accuracy</code>, <code>false</code> otherwise.
+ (BOOL)float:(CGFloat)float1 isEqualToFloat:(CGFloat)float2 withAccuracy:(CGFloat)accuracy SWIFT_WARN_UNUSED_RESULT;
/// Get the device model name (e.g.,<code> iPhone3,1</code>).
///
/// returns:
/// The device model name.
+ (NSString * _Nullable)deviceModelName SWIFT_WARN_UNUSED_RESULT;
/// Gets the short bundle version string.
///
/// returns:
/// A short bundle version string value.
+ (NSString * _Nullable)bundleShortVersionString SWIFT_WARN_UNUSED_RESULT;
/// Gets the current carrier name.
///
/// returns:
/// The current carrier name.
+ (NSString * _Nullable)carrierName SWIFT_WARN_UNUSED_RESULT;
/// Gets the current connection type.
///
/// returns:
/// The current connection type as a <code>String</code>.
+ (NSString * _Nonnull)connectionType SWIFT_WARN_UNUSED_RESULT;
/// Compares two version strings and determines their order.
/// \param fromVersion The first version.
///
/// \param toVersion The second version.
///
///
/// returns:
/// a <code>ComparisonResult</code>.
+ (NSComparisonResult)compareVersion:(NSString * _Nonnull)fromVersion toVersion:(NSString * _Nonnull)toVersion SWIFT_WARN_UNUSED_RESULT;
/// Creates an ISO dateFormatter (UTC).
/// The Formatter is created with the following attributes:
/// <ul>
///   <li>
///     <code>locale</code> set to <code>en_US_POSIX</code>
///   </li>
///   <li>
///     <code>timestyle</code> set to <code>NSDateFormatterFullStyle</code>
///   </li>
///   <li>
///     <code>dateFormat</code> set to <code>yyyy-MM-dd HH:mm:ss</code>
///   </li>
/// </ul>
///
/// returns:
/// A DateFormatter with the default attributes.
+ (NSDateFormatter * _Nonnull)ISODateFormatterUTC SWIFT_WARN_UNUSED_RESULT;
/// Creates an ISO dateFormatter (UTC).
/// The Formatter is created with the following attributes:
/// <ul>
///   <li>
///     <code>locale</code> set to <code>en_US_POSIX</code>
///   </li>
///   <li>
///     <code>timestyle</code> set to <code>NSDateFormatterFullStyle</code>
///   </li>
///   <li>
///     <code>dateFormat</code> set to <code>yyyy-MM-dd'T'HH:mm:ss</code>.
///   </li>
/// </ul>
/// The formatter returned by this method is identical to that of <code>ISODateFormatterUTC</code>, except that the format matches
/// the optional <code>T</code> delimiter between date and time.
///
/// returns:
/// A DateFormatter with the default attributes, matching the optional <code>T</code> delimiter.
+ (NSDateFormatter * _Nonnull)ISODateFormatterUTCWithDelimiter SWIFT_WARN_UNUSED_RESULT;
/// Parses ISO 8601 date strings.
/// Supports timestamps with just year all the way up to seconds with and without the optional <code>T</code> delimiter.
/// \param from The ISO 8601 timestamp.
///
///
/// returns:
/// A parsed NSDate object, or nil if the timestamp is not a valid format.
+ (NSDate * _Nullable)parseISO8601DateFromString:(NSString * _Nonnull)from SWIFT_WARN_UNUSED_RESULT;
/// Returns the main window for the app.
/// This window will be positioned underneath any other windows added and removed at runtime,
/// by classes such a <code>UIAlertView</code> or <code>UIActionSheet</code>.
///
/// returns:
/// The main window, or <code>nil</code> if the window cannot be found.
+ (UIWindow * _Nullable)mainWindow SWIFT_WARN_UNUSED_RESULT;
/// Returns the main window for the given <code>UIWindowScene</code>.
/// This window will be positioned underneath any other windows added and removed at runtime,
/// by classes such a <code>UIAlertView</code> or <code>UIActionSheet</code>.
/// \param scene The <code>UIWindowScene</code>.
///
///
/// returns:
/// The main window, or <code>nil</code> if the window cannot be found.
+ (UIWindow * _Nullable)mainWindow:(UIWindowScene * _Nonnull)scene SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);
/// Returns the window containing the provided view.
/// \param view The view.
///
///
/// returns:
/// The window containing the view, or <code>nil</code> if the view is not currently displayed.
+ (UIWindow * _Nullable)windowForView:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
+ (UIWindowScene * _Nullable)findWindowSceneAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Takes an array of fetch results and returns the merged result.
/// \param results An <code>Array</code> of fetch results.
///
///
/// returns:
/// The merged fetch result.
+ (UIBackgroundFetchResult)mergeFetchResults:(NSArray<NSNumber *> * _Nonnull)results SWIFT_WARN_UNUSED_RESULT;
/// Determine if the notification payload is a silent push (no notification elements).
/// \param notification The notification payload. 
///
///
/// returns:
/// <code>true</code> the notification is a silent push, <code>false</code> otherwise.
+ (BOOL)isSilentPush:(NSDictionary * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
/// Determine if the notification payload is an alerting push.
/// \param notification The notification payload. 
///
///
/// returns:
/// <code>true</code> the notification is an alerting  push, <code>false</code> otherwise.
+ (BOOL)isAlertingPush:(NSDictionary * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
/// Takes an APNS-provided device token and returns the decoded Airship device token.
/// \param token An APNS-provided device token.
///
///
/// returns:
/// The decoded Airship device token.
+ (NSString * _Nonnull)deviceTokenStringFromDeviceToken:(NSData * _Nonnull)token SWIFT_WARN_UNUSED_RESULT;
/// Generates a <code>SHA256</code> digest for the input string.
/// \param input <code>String</code> for which to calculate SHA.
///
///
/// returns:
/// The <code>SHA256</code> digest as <code>NSData</code>.
+ (NSData * _Nonnull)sha256DigestWithString:(NSString * _Nonnull)input SWIFT_WARN_UNUSED_RESULT;
/// Generates a <code>SHA256</code> hash for the input string.
/// \param input Input string for which to calculate SHA.
///
///
/// returns:
/// SHA256 digest as a hex string
+ (NSString * _Nonnull)sha256HashWithString:(NSString * _Nonnull)input SWIFT_WARN_UNUSED_RESULT;
/// Returns a basic auth header string.
/// \param username The username.
///
/// \param password The password.
///
///
/// returns:
/// An HTTP Basic Auth header string value for the provided credentials in the form of: <code>Basic [Base64 Encoded "username:password"]</code>
+ (NSString * _Nullable)authHeaderStringWithName:(NSString * _Nonnull)username password:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
/// Parse url for the input string.
/// \param value Input string for which to create the URL.
///
///
/// returns:
/// returns the created URL otherwise return nil.
+ (NSURL * _Nullable)parseURL:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Needed to get stringValue in InAppAutomation. Delete after its converted to swift.
/// note:
/// For internal use only. :nodoc:
+ (NSString * _Nonnull)permissionString:(enum UAPermission)permission SWIFT_WARN_UNUSED_RESULT;
/// Needed to get stringValue in InAppAutomation. Delete after its converted to swift.
/// note:
/// For internal use only. :nodoc:
+ (NSString * _Nonnull)permissionStatusString:(enum UAPermissionStatus)status SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("AirshipVersion")
@interface UAirshipVersion : NSObject
+ (NSString * _Nonnull)get SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, AirshipWorkRequestConflictPolicy, open) {
  UAirshipWorkRequestConflictPolicyAppend SWIFT_COMPILE_NAME("append") = 0,
  UAirshipWorkRequestConflictPolicyReplace SWIFT_COMPILE_NAME("replace") = 1,
  UAirshipWorkRequestConflictPolicyKeepIfNotStarted SWIFT_COMPILE_NAME("keepIfNotStarted") = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, UAirshipWorkerType, "AirshipWorkerType", open) {
  UAirshipWorkerTypeSerial = 0,
  UAirshipWorkerTypeConcurrent = 1,
};


@protocol UAAppIntegrationDelegate;
@class UIApplication;
@class UNUserNotificationCenter;

/// Application hooks required by Airship. If <code>automaticSetupEnabled</code> is enabled
/// (enabled by default), Airship will automatically integrate these calls into
/// the application by swizzling methods. If <code>automaticSetupEnabled</code> is disabled,
/// the application must call through to every method provided by this class.
SWIFT_CLASS_NAMED("AppIntegration")
@interface UAAppIntegration : NSObject
/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <UAAppIntegrationDelegate> _Nullable integrationDelegate;)
+ (id <UAAppIntegrationDelegate> _Nullable)integrationDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setIntegrationDelegate:(id <UAAppIntegrationDelegate> _Nullable)value;
/// Must be called by the UIApplicationDelegate’s
/// application:performFetchWithCompletionHandler:.
/// \param application The application
///
/// \param completionHandler The completion handler.
///
+ (void)applicatin:(UIApplication * _Nonnull)application performFetchWithCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler SWIFT_DEPRECATED_MSG("Use application(_:performFetchWithCompletionHandler:) instead");
/// Must be called by the UIApplicationDelegate’s
/// application:performFetchWithCompletionHandler:.
/// \param application The application
///
/// \param completionHandler The completion handler.
///
+ (void)application:(UIApplication * _Nonnull)application performFetchWithCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
/// Must be called by the UIApplicationDelegate’s
/// application:didRegisterForRemoteNotificationsWithDeviceToken:.
/// \param application The application
///
/// \param deviceToken The device token.
///
+ (void)application:(UIApplication * _Nonnull)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// Must be called by the UIApplicationDelegate’s
/// application:didFailToRegisterForRemoteNotificationsWithError:.
/// \param application The application
///
/// \param error The error.
///
+ (void)application:(UIApplication * _Nonnull)application didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
/// Must be called by the UIApplicationDelegate’s
/// application:didReceiveRemoteNotification:fetchCompletionHandler:.
/// \param application The application
///
/// \param userInfo The remote notification.
///
/// \param completionHandler The completion handler.
///
+ (void)application:(UIApplication * _Nonnull)application didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
/// Must be called by the UNUserNotificationDelegate’s
/// userNotificationCenter:willPresentNotification:withCompletionHandler.
/// \param center The notification center.
///
/// \param notification The notification.
///
/// \param completionHandler The completion handler.
///
+ (void)userNotificationCenterWithCenter:(UNUserNotificationCenter * _Nonnull)center willPresentNotification:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler SWIFT_DEPRECATED_MSG("Use userNotificationCenter(_:willPresent:withCompletionHandler:) instead");
/// Must be called by the UNUserNotificationDelegate’s
/// userNotificationCenter:willPresentNotification:withCompletionHandler.
/// \param center The notification center.
///
/// \param notification The notification.
///
/// \param completionHandler The completion handler.
///
+ (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center willPresentNotification:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
/// Must be called by the UNUserNotificationDelegate’s
/// userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler.
/// \param center The notification center.
///
/// \param response The notification response.
///
/// \param completionHandler The completion handler.
///
+ (void)userNotificationCenterWithCenter:(UNUserNotificationCenter * _Nonnull)center didReceiveNotificationResponse:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_DEPRECATED_MSG("Use userNotificationCenter(_:didReceive:withCompletionHandler:) instead");
/// Must be called by the UNUserNotificationDelegate’s
/// userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler.
/// \param center The notification center.
///
/// \param response The notification response.
///
/// \param completionHandler The completion handler.
///
+ (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center didReceiveNotificationResponse:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum UAApplicationState : NSInteger;

SWIFT_CLASS_NAMED("AppStateTracker")
@interface UAAppStateTracker : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didBecomeActiveNotification;)
+ (NSNotificationName _Nonnull)didBecomeActiveNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull willEnterForegroundNotification;)
+ (NSNotificationName _Nonnull)willEnterForegroundNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didEnterBackgroundNotification;)
+ (NSNotificationName _Nonnull)didEnterBackgroundNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull willResignActiveNotification;)
+ (NSNotificationName _Nonnull)willResignActiveNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull willTerminateNotification;)
+ (NSNotificationName _Nonnull)willTerminateNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didTransitionToBackground;)
+ (NSNotificationName _Nonnull)didTransitionToBackground SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didTransitionToForeground;)
+ (NSNotificationName _Nonnull)didTransitionToForeground SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UAAppStateTracker * _Nonnull shared;)
+ (UAAppStateTracker * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) enum UAApplicationState state;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The ApplicationMetrics class keeps track of application-related metrics.
SWIFT_CLASS_NAMED("ApplicationMetrics")
@interface UAApplicationMetrics : NSObject
/// Determines whether the application’s short version string has been updated.
/// Only tracked if Feature.inAppAutomation or Feature.analytics are enabled in the privacy manager.
@property (nonatomic, readonly) BOOL isAppVersionUpdated;
/// The date of the last time the application was active.
/// Only tracked if Feature.inAppAutomation or Feature.analytics are enabled in the privacy manager.
@property (nonatomic, readonly, copy) NSDate * _Nullable lastApplicationOpenDate;
/// The application’s current short version string.
@property (nonatomic, readonly, copy) NSString * _Nullable currentAppVersion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Platform independent representation of application state.
/// note:
/// For internal use only. :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, UAApplicationState, "ApplicationState", open) {
/// The active state.
  UAApplicationStateActive = 0,
/// The inactive state.
  UAApplicationStateInactive = 1,
/// The background state.
  UAApplicationStateBackground = 2,
};


/// Associated channel data.
SWIFT_CLASS_NAMED("AssociatedChannel")
@interface UAAssociatedChannel : NSObject
/// Channel type
@property (nonatomic, readonly) enum UAChannelType channelType;
/// channel ID
@property (nonatomic, readonly, copy) NSString * _Nonnull channelID;
- (nonnull instancetype)initWithChannelType:(enum UAChannelType)channelType channelID:(NSString * _Nonnull)channelID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Defines analytics identifiers to be associated with
/// the device.
SWIFT_CLASS_NAMED("AssociatedIdentifiers")
@interface UAAssociatedIdentifiers : NSObject
/// Maximum number of associated IDs that can be set.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger maxCount;)
+ (NSInteger)maxCount SWIFT_WARN_UNUSED_RESULT;
/// Character limit for associated IDs or keys.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger maxCharacterCount;)
+ (NSInteger)maxCharacterCount SWIFT_WARN_UNUSED_RESULT;
/// The advertising ID.
@property (nonatomic, copy) NSString * _Nullable advertisingID;
/// The application’s vendor ID.
@property (nonatomic, copy) NSString * _Nullable vendorID;
/// Indicates whether the user has limited ad tracking.
@property (nonatomic) BOOL advertisingTrackingEnabled;
/// A map of all the associated identifiers.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull allIDs;
- (nonnull instancetype)initWithIdentifiers:(NSDictionary<NSString *, NSString *> * _Nullable)identifiers OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDictionary:(NSDictionary<NSString *, NSString *> * _Nullable)dictionary;
- (nonnull instancetype)init;
/// Factory method to create an empty identifiers object.
///
/// returns:
/// The created associated identifiers.
+ (UAAssociatedIdentifiers * _Nonnull)identifiers SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create an associated identifiers instance with a dictionary
/// of custom identifiers (containing strings only).
///
/// returns:
/// The created associated identifiers.
+ (UAAssociatedIdentifiers * _Nonnull)identifiersWithDictionary:(NSDictionary<NSString *, NSString *> * _Nullable)identifiers SWIFT_WARN_UNUSED_RESULT;
/// Sets an identifier mapping.
/// \param identifier The value of the identifier, or <code>nil</code> to remove the identifier.
/// @parm key The key for the identifier
///
- (void)setIdentifier:(NSString * _Nullable)identifier forKey:(NSString * _Nonnull)key;
@end


/// Defines attributes mutations.
SWIFT_CLASS_NAMED("AttributeMutations") SWIFT_DEPRECATED_MSG("Use Contact#editAttributes() or Channel#editAttributes() instead.")
@interface UAAttributeMutations : NSObject
/// Sets an attribute.
/// \param string The value.
///
/// \param forAttribute The attribute
///
- (void)setString:(NSString * _Nonnull)string forAttribute:(NSString * _Nonnull)forAttribute;
/// Sets an attribute.
/// \param number The value.
///
/// \param forAttribute The attribute
///
- (void)setNumber:(NSNumber * _Nonnull)number forAttribute:(NSString * _Nonnull)forAttribute;
/// Sets an attribute.
/// \param date The value.
///
/// \param forAttribute The attribute
///
- (void)setDate:(NSDate * _Nonnull)date forAttribute:(NSString * _Nonnull)forAttribute;
/// Removes an attribute.
/// \param attribute The attribute
///
- (void)removeAttribute:(NSString * _Nonnull)attribute;
/// Generates an empty mutation.
///
/// returns:
/// An empty mutation object.
+ (UAAttributeMutations * _Nonnull)mutations SWIFT_WARN_UNUSED_RESULT;
- (void)applyMutationsWithEditor:(UAAttributesEditor * _Nonnull)editor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Predefined attributes.
SWIFT_CLASS_NAMED("Attributes")
@interface UAAttributes : NSObject
/// <ul>
///   <li>
///     Title attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull title;)
+ (NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     First name attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull firstName;)
+ (NSString * _Nonnull)firstName SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Last name attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull lastName;)
+ (NSString * _Nonnull)lastName SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Full name attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fullName;)
+ (NSString * _Nonnull)fullName SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Gender attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gender;)
+ (NSString * _Nonnull)gender SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Zip code attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull zipCode;)
+ (NSString * _Nonnull)zipCode SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     City attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull city;)
+ (NSString * _Nonnull)city SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Region attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull region;)
+ (NSString * _Nonnull)region SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Country attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull country;)
+ (NSString * _Nonnull)country SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Birthdate attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull birthdate;)
+ (NSString * _Nonnull)birthdate SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Age attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull age;)
+ (NSString * _Nonnull)age SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Mobile phone attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mobilePhone;)
+ (NSString * _Nonnull)mobilePhone SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Home phone attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull homePhone;)
+ (NSString * _Nonnull)homePhone SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Work phone attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull workPhone;)
+ (NSString * _Nonnull)workPhone SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Loyalty tier attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull loyaltyTier;)
+ (NSString * _Nonnull)loyaltyTier SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Company attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull company;)
+ (NSString * _Nonnull)company SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Username attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull username;)
+ (NSString * _Nonnull)username SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Account creation attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull accountCreation;)
+ (NSString * _Nonnull)accountCreation SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Email attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull email;)
+ (NSString * _Nonnull)email SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Advertising id attribute.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull advertisingId;)
+ (NSString * _Nonnull)advertisingId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Attributes editor.
SWIFT_CLASS_NAMED("AttributesEditor")
@interface UAAttributesEditor : NSObject
/// Removes an attribute.
/// \param attribute The attribute.
///
- (void)removeAttribute:(NSString * _Nonnull)attribute;
/// Sets the attribute.
/// \param date The value
///
/// \param attribute The attribute
///
- (void)setDate:(NSDate * _Nonnull)date attribute:(NSString * _Nonnull)attribute;
/// Sets the attribute.
/// \param number The value.
///
/// \param attribute The attribute.
///
- (void)setNumber:(NSNumber * _Nonnull)number attribute:(NSString * _Nonnull)attribute;
/// Sets the attribute.
/// \param string The value.
///
/// \param attribute The attribute.
///
- (void)setString:(NSString * _Nonnull)string attribute:(NSString * _Nonnull)attribute;
/// Applies the attribute changes.
- (void)apply;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("Base64")
@interface UABase64 : NSObject
+ (NSData * _Nullable)dataFromString:(NSString * _Nonnull)base64String SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)stringFromData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Airship Channel protocol.
SWIFT_PROTOCOL_NAMED("BaseAirshipChannelProtocol")
@protocol UAChannelProtocol
/// The Channel ID.
@property (nonatomic, readonly, copy) NSString * _Nullable identifier;
/// Device tags
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull tags;
/// Allows setting tags from the device. Tags can be set from either the server or the device, but
/// not both (without synchronizing the data), so use this flag to explicitly enable or disable
/// the device-side flags.
/// Set this to <code>false</code> to prevent the device from sending any tag information to the server when using
/// server-side tagging. Defaults to <code>true</code>.
@property (nonatomic) BOOL isChannelTagRegistrationEnabled;
/// Edits channel tags.
///
/// returns:
/// Tag editor.
- (UATagEditor * _Nonnull)editTags SWIFT_WARN_UNUSED_RESULT;
/// Edits channel tags.
/// \param editorBlock The editor block with the editor. The editor will <code>apply</code> will be called after the block is executed.
///
- (void)editTags:(SWIFT_NOESCAPE void (^ _Nonnull)(UATagEditor * _Nonnull))editorBlock;
/// Edits channel tags groups.
///
/// returns:
/// Tag group editor.
- (UATagGroupsEditor * _Nonnull)editTagGroups SWIFT_WARN_UNUSED_RESULT;
/// Edits channel tag groups tags.
/// \param editorBlock The editor block with the editor. The editor will <code>apply</code> will be called after the block is executed.
///
- (void)editTagGroups:(SWIFT_NOESCAPE void (^ _Nonnull)(UATagGroupsEditor * _Nonnull))editorBlock;
/// Edits channel subscription lists.
///
/// returns:
/// Subscription list editor.
- (UASubscriptionListEditor * _Nonnull)editSubscriptionLists SWIFT_WARN_UNUSED_RESULT;
/// Edits channel subscription lists.
/// \param editorBlock The editor block with the editor. The editor will <code>apply</code> will be called after the block is executed.
///
- (void)editSubscriptionLists:(SWIFT_NOESCAPE void (^ _Nonnull)(UASubscriptionListEditor * _Nonnull))editorBlock;
/// Fetches current subscription lists.
///
/// returns:
/// The subscription lists
- (void)fetchSubscriptionListsWithCompletionHandler:(void (^ _Nonnull)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completionHandler;
/// Edits channel attributes.
///
/// returns:
/// Attribute editor.
- (UAAttributesEditor * _Nonnull)editAttributes SWIFT_WARN_UNUSED_RESULT;
/// Edits channel attributes.
/// \param editorBlock The editor block with the editor. The editor will <code>apply</code> will be called after the block is executed.
///
- (void)editAttributes:(SWIFT_NOESCAPE void (^ _Nonnull)(UAAttributesEditor * _Nonnull))editorBlock;
/// Enables channel creation if channelCreationDelayEnabled was set to <code>YES</code> in the config.
- (void)enableChannelCreation;
@end


/// Airship Push protocol.
SWIFT_PROTOCOL_NAMED("BasePushProtocol")
@protocol UAPushProtocol
/// Checks to see if push notifications are opted in.
@property (nonatomic, readonly) BOOL isPushNotificationsOptedIn;
/// Enables/disables background remote notifications on this device through Airship.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL backgroundPushNotificationsEnabled;
/// Enables/disables user notifications on this device through Airship.
/// Defaults to <code>false</code>. Once set to <code>true</code>, the user will be prompted for remote notifications.
@property (nonatomic) BOOL userPushNotificationsEnabled;
/// When enabled, if the user has ephemeral notification authorization the SDK will prompt the user for
/// notifications.  Defaults to <code>false</code>.
@property (nonatomic) BOOL requestExplicitPermissionWhenEphemeral;
/// The device token for this device, as a hex string.
@property (nonatomic, readonly, copy) NSString * _Nullable deviceToken;
/// User Notification options this app will request from APNS. Changes to this value
/// will not take effect until the next time the app registers with
/// updateRegistration.
/// Defaults to alert, sound and badge.
@property (nonatomic) UANotificationOptions notificationOptions;
/// Custom notification categories. Airship default notification
/// categories will be unaffected by this field.
/// Changes to this value will not take effect until the next time the app registers
/// with updateRegistration.
@property (nonatomic, copy) NSSet<UNNotificationCategory *> * _Nonnull customCategories;
/// The combined set of notification categories from <code>customCategories</code> set by the app
/// and the Airship provided categories.
@property (nonatomic, readonly, copy) NSSet<UNNotificationCategory *> * _Nonnull combinedCategories;
/// Sets authorization required for the default Airship categories. Only applies
/// to background user notification actions.
/// Changes to this value will not take effect until the next time the app registers
/// with updateRegistration.
@property (nonatomic) BOOL requireAuthorizationForDefaultCategories;
/// Set a delegate that implements the PushNotificationDelegate protocol.
@property (nonatomic, weak) id <UAPushNotificationDelegate> _Nullable pushNotificationDelegate;
/// Set a delegate that implements the RegistrationDelegate protocol.
@property (nonatomic, weak) id <UARegistrationDelegate> _Nullable registrationDelegate;
/// Notification response that launched the application.
@property (nonatomic, readonly, strong) UNNotificationResponse * _Nullable launchNotificationResponse;
/// The current authorized notification settings.
/// If push is disabled in privacy manager, this value could be out of date.
/// Note: this value reflects all the notification settings currently enabled in the
/// Settings app and does not take into account which options were originally requested.
@property (nonatomic, readonly) UAAuthorizedNotificationSettings authorizedNotificationSettings;
/// The current authorization status.
/// If push is disabled in privacy manager, this value could be out of date.
@property (nonatomic, readonly) UAAuthorizationStatus authorizationStatus;
/// Indicates whether the user has been prompted for notifications or not.
/// If push is disabled in privacy manager, this value will be out of date.
@property (nonatomic, readonly) BOOL userPromptedForNotifications;
/// The default presentation options to use for foreground notifications.
@property (nonatomic) UNNotificationPresentationOptions defaultPresentationOptions;
/// The current badge number used by the device and on the Airship server.
/// note:
/// This property must be accessed on the main thread.
@property (nonatomic) NSInteger badgeNumber;
@end

@class NSCoder;

/// An abstraction around a nicer looking
/// loading indicator that embeds a UIActivityIndicatorView
/// in a translucent black beveled rect.
SWIFT_CLASS_NAMED("BeveledLoadingIndicator")
@interface UABeveledLoadingIndicator : UIView
@property (nonatomic, getter=isHidden) BOOL hidden;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
/// Show and animate the indicator
- (void)show;
/// Hide the indicator.
- (void)hide;
@end


/// Channel Capture copies the channelId to the device clipboard after a specific number of
/// knocks (app foregrounds) within a specific timeframe. Channel Capture can be enabled
/// or disabled in Airship Config.
SWIFT_CLASS_NAMED("ChannelCapture") SWIFT_AVAILABILITY(tvos,unavailable)
@interface UAChannelCapture : NSObject
/// Flag indicating whether channel capture is enabled. Clear to disable. Set to enable.
/// Note: Does not persist through app launches.
@property (nonatomic) BOOL enabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Channel scope.
typedef SWIFT_ENUM_NAMED(NSInteger, UAChannelScope, "ChannelScope", open) {
/// App channels - amazon, android, iOS
  UAChannelScopeApp = 0,
/// Web channels
  UAChannelScopeWeb = 1,
/// Email channels
  UAChannelScopeEmail = 2,
/// SMS channels
  UAChannelScopeSms = 3,
};


/// Channel scopes.
SWIFT_CLASS_NAMED("ChannelScopes")
@interface UAChannelScopes : NSObject
/// The raw channel scope values.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull values;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Channel type
typedef SWIFT_ENUM_NAMED(NSInteger, UAChannelType, "ChannelType", open) {
/// Email channel
  UAChannelTypeEmail = 0,
/// SMS channel
  UAChannelTypeSms = 1,
/// Open channel
  UAChannelTypeOpen = 2,
};


/// A  circular region defines a radius, and latitude and longitude from its center.
SWIFT_CLASS_NAMED("CircularRegion")
@interface UACircularRegion : NSObject
/// Default constructor.
/// \param radius The radius of the circular region in meters.
///
/// \param latitude The latitude of the circular region’s center point in degrees.
///
/// \param longitude The longitude of the circular region’s center point in degrees.
///
///
/// returns:
/// Circular region object or <code>nil</code> if error occurs
- (nullable instancetype)initWithRadius:(double)radius latitude:(double)latitude longitude:(double)longitude OBJC_DESIGNATED_INITIALIZER;
/// Factory method for creating a circular region.
/// \param radius The radius of the circular region in meters.
///
/// \param latitude The latitude of the circular region’s center point in degrees.
///
/// \param longitude The longitude of the circular region’s center point in degrees.
///
///
/// returns:
/// Circular region object or <code>nil</code> if error occurs
+ (UACircularRegion * _Nullable)circularRegionWithRadius:(double)radius latitude:(double)latitude longitude:(double)longitude SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the possible sites.
typedef SWIFT_ENUM_NAMED(NSInteger, UACloudSite, "CloudSite", open) {
/// Represents the US cloud site. This is the default value.
/// Projects available at go.airship.com must use this value.
  UACloudSiteUS SWIFT_COMPILE_NAME("us") = 0,
/// Represents the EU cloud site.
/// Projects available at go.airship.eu must use this value.
  UACloudSiteEU SWIFT_COMPILE_NAME("eu") = 1,
};

@class UIColor;

/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("ColorUtils")
@interface UAColorUtils : NSObject
+ (UIColor * _Nullable)colorWithHexString:(NSString * _Nonnull)hexString SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)hexStringWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// NOTE: For internal use only. :nodoc:
SWIFT_CLASS_NAMED("ComponentDisableHelper")
@interface UAComponentDisableHelper : NSObject
@property (nonatomic, copy) void (^ _Nullable onChange)(void);
@property (nonatomic) BOOL enabled;
- (nonnull instancetype)initWithDataStore:(UAPreferenceDataStore * _Nonnull)dataStore className:(NSString * _Nonnull)className OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Representations of various device connection types.
SWIFT_CLASS_NAMED("ConnectionType")
@interface UAConnectionType : NSObject
/// Network is unreachable.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull none;)
+ (NSString * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
/// Network is a cellular or mobile network.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull cell;)
+ (NSString * _Nonnull)cell SWIFT_WARN_UNUSED_RESULT;
/// Network is a WiFi network.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wifi;)
+ (NSString * _Nonnull)wifi SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Contact data.
SWIFT_CLASS_NAMED("ContactConflictEvent")
@interface UAContactConflictEvent : NSObject
/// The named user ID if the conflict was caused by an identify operation with an existing named user through the SDK.
@property (nonatomic, readonly, copy) NSString * _Nullable conflictingNamedUserID;
/// Subscription lists.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, UAChannelScopes *> * _Nonnull subscriptionLists;
/// Tag groups.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull tags;
/// Attributes.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nonnull attributes;
/// Associated channels.
@property (nonatomic, readonly, copy) NSArray<UAAssociatedChannel *> * _Nonnull channels;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSPersistentStore;
@class NSManagedObjectContext;

/// note:
/// For internal use only. :nodoc:
SWIFT_PROTOCOL_NAMED("CoreDataDelegate")
@protocol UACoreDataDelegate
- (void)persistentStoreCreated:(NSPersistentStore * _Nonnull)store name:(NSString * _Nonnull)name context:(NSManagedObjectContext * _Nonnull)context;
@end


/// CustomEvent captures information regarding a custom event for
/// Analytics.
SWIFT_CLASS_NAMED("CustomEvent")
@interface UACustomEvent : NSObject <UAEvent>
/// The max number of properties.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger maxPropertiesSize;)
+ (NSInteger)maxPropertiesSize SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull eventNameKey;)
+ (NSString * _Nonnull)eventNameKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull eventValueKey;)
+ (NSString * _Nonnull)eventValueKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull eventPropertiesKey;)
+ (NSString * _Nonnull)eventPropertiesKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull eventTransactionIDKey;)
+ (NSString * _Nonnull)eventTransactionIDKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull eventInteractionIDKey;)
+ (NSString * _Nonnull)eventInteractionIDKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull eventInteractionTypeKey;)
+ (NSString * _Nonnull)eventInteractionTypeKey SWIFT_WARN_UNUSED_RESULT;
/// The send ID that triggered the event.
/// note:
/// For internal use only. :nodoc:
@property (nonatomic, copy) NSString * _Nullable conversionSendID;
/// The conversion push metadata.
/// note:
/// For internal use only. :nodoc:
@property (nonatomic, copy) NSString * _Nullable conversionPushMetadata;
/// The event’s template type. The template type’s length must not exceed 255 characters or it will
/// invalidate the event.
/// note:
/// For internal use only. :nodoc:
@property (nonatomic, copy) NSString * _Nullable templateType;
/// The event’s value. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
@property (nonatomic, strong) NSNumber * _Nullable eventValue;
/// The event’s name. The name’s length must not exceed 255 characters or it will
/// invalidate the event.
@property (nonatomic, copy) NSString * _Nullable eventName;
/// The event’s transaction ID. The ID’s length must not exceed 255 characters or it will
/// invalidate the event.
@property (nonatomic, copy) NSString * _Nullable transactionID;
/// The event’s interaction type. The type’s length must not exceed 255 characters or it will
/// invalidate the event.
@property (nonatomic, copy) NSString * _Nullable interactionType;
/// The event’s interaction ID. The ID’s length must not exceed 255 characters or it will
/// invalidate the event.
@property (nonatomic, copy) NSString * _Nullable interactionID;
/// The event’s properties. Properties must be valid JSON.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull properties;
@property (nonatomic, readonly, copy) NSString * _Nonnull eventType;
@property (nonatomic, readonly) UAEventPriority priority;
/// Constructor for testing. :nodoc:
/// \param name The name of the event. The event’s name must not exceed
/// 255 characters or it will invalidate the event.
///
/// \param value The event value.
///
///
/// returns:
/// A Custom event instance
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name value:(NSNumber * _Nullable)value OBJC_DESIGNATED_INITIALIZER;
/// Constructor
/// \param name The name of the event. The event’s name must not exceed
/// 255 characters or it will invalidate the event.
///
/// \param stringValue The value of the event as a string. The value must be a valid
/// number between -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Custom event instance
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name stringValue:(NSString * _Nullable)stringValue;
/// Factory method for creating a custom event.
/// \param name The name of the event. The event’s name must not exceed
/// 255 characters or it will invalidate the event.
///
///
/// returns:
/// A Custom event instance
+ (UACustomEvent * _Nonnull)eventWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a custom event with a value from a string.
/// \param name The name of the event. The event’s name must not exceed
/// 255 characters or it will invalidate the event.
///
/// \param string The value of the event as a string. The value must be a valid
/// number between -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Custom event instance
+ (UACustomEvent * _Nonnull)eventWithName:(NSString * _Nonnull)name valueFromString:(NSString * _Nullable)string SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a custom event with a value.
/// \param name The name of the event. The event’s name must not exceed
/// 255 characters or it will invalidate the event.
///
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Custom event instance
+ (UACustomEvent * _Nonnull)eventWithName:(NSString * _Nonnull)name value:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
/// Sets the custom event’s interaction type and identifier as coming from a Message Center message.
/// note:
/// For internal use only. :nodoc:
/// \param messageID The message ID.
///
- (void)setInteractionFromMessageCenterMessage:(NSString * _Nullable)messageID;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull data;
/// note:
/// For internal use only. :nodoc:
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull payload;
/// Adds the event to analytics.
- (void)track;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol to be implemented by deep link handlers.
SWIFT_PROTOCOL_NAMED("DeepLinkDelegate")
@protocol UADeepLinkDelegate
/// Called when a deep link has been triggered from Airship. If implemented, the delegate is responsible for processing the provided url.
/// \param deepLink The deep link.
///
- (void)receivedDeepLink:(NSURL * _Nonnull)deepLink completionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

/// note:
/// For internal use only. :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, UADispatcherTimeBase, "DispatcherTimeBase", open) {
/// Wall time.
  UADispatcherTimeBaseWall = 0,
/// System time.
  UADispatcherTimeBaseSystem = 1,
};


/// Email registration options
SWIFT_CLASS_NAMED("EmailRegistrationOptions")
@interface UAEmailRegistrationOptions : NSObject
/// Returns an Email registration options with double opt-in value to false
/// \param transactionalOptedIn The transactional opted-in value
///
/// \param commercialOptedIn The commercial opted-in value
///
/// \param properties The properties. They must be JSON serializable.
///
///
/// returns:
/// An Email registration options.
+ (UAEmailRegistrationOptions * _Nonnull)commercialOptionsWithTransactionalOptedIn:(NSDate * _Nullable)transactionalOptedIn commercialOptedIn:(NSDate * _Nullable)commercialOptedIn properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
/// Returns an Email registration options.
/// \param transactionalOptedIn The transactional opted-in date.
///
/// \param properties The properties. They must be JSON serializable.
///
/// \param doubleOptIn The double opt-in value
///
///
/// returns:
/// An Email registration options.
+ (UAEmailRegistrationOptions * _Nonnull)optionsWithTransactionalOptedIn:(NSDate * _Nullable)transactionalOptedIn properties:(NSDictionary<NSString *, id> * _Nullable)properties doubleOptIn:(BOOL)doubleOptIn SWIFT_WARN_UNUSED_RESULT;
/// Returns an Email registration options.
/// \param properties The properties. They must be JSON serializable.
///
/// \param doubleOptIn The double opt-in value
///
///
/// returns:
/// An Email registration options.
+ (UAEmailRegistrationOptions * _Nonnull)optionsWithProperties:(NSDictionary<NSString *, id> * _Nullable)properties doubleOptIn:(BOOL)doubleOptIn SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UAExperimentMessageInfo;
@class UAExperimentResult;

SWIFT_PROTOCOL_NAMED("ExperimentDataProvider")
@protocol UAExperimentDataProvider
- (void)evaluateExperimentsWithInfo:(UAExperimentMessageInfo * _Nonnull)info contactID:(NSString * _Nullable)contactID completionHandler:(void (^ _Nonnull)(UAExperimentResult * _Nullable, NSError * _Nullable))completionHandler;
@end


SWIFT_CLASS_NAMED("ExperimentResult")
@interface UAExperimentResult : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull channelID;
@property (nonatomic, readonly, copy) NSString * _Nonnull contactID;
@property (nonatomic, readonly) BOOL isMatch;
@property (nonatomic, readonly, copy) NSArray * _Nonnull evaluatedExperimentsReportingData;
- (nonnull instancetype)initWithChannelId:(NSString * _Nonnull)channelId contactId:(NSString * _Nonnull)contactId isMatch:(BOOL)isMatch reportingMetadata:(NSArray * _Nonnull)reportingMetadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Event to track install attributions.
SWIFT_CLASS_NAMED("InstallAttributionEvent")
@interface UAInstallAttributionEvent : NSObject <UAEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull eventType;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull data;
@property (nonatomic, readonly) UAEventPriority priority;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAppPurchaseDate:(NSDate * _Nonnull)appPurchaseDate iAdImpressionDate:(NSDate * _Nonnull)iAdImpressionDate OBJC_DESIGNATED_INITIALIZER;
/// Factory method to create a InstallAttributionEvent.
/// \param appPurchaseDate The app purchase date.
///
/// \param iAdImpressionDate The iAD impression date.
///
///
/// returns:
/// InstallAttributionEvent instance.
+ (UAInstallAttributionEvent * _Nonnull)eventWithAppPurchaseDate:(NSDate * _Nonnull)appPurchaseDate iAdImpressionDate:(NSDate * _Nonnull)iAdImpressionDate SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create an InstallAttributionEvent.
///
/// returns:
/// InstallAttributionEvent instance.
+ (UAInstallAttributionEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
@end

@class UNNotificationAction;

/// note:
/// For Internal use only :nodoc:
SWIFT_CLASS_NAMED("InteractiveNotificationEvent") SWIFT_AVAILABILITY(tvos,unavailable)
@interface UAInteractiveNotificationEvent : NSObject <UAEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull eventType;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull data;
@property (nonatomic, readonly) UAEventPriority priority;
- (nonnull instancetype)initWithAction:(UNNotificationAction * _Nonnull)action category:(NSString * _Nonnull)category notification:(NSDictionary * _Nonnull)notification responseText:(NSString * _Nullable)responseText OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UAJSONValueMatcher;

/// Matcher for a JSON payload.
SWIFT_CLASS_NAMED("JSONMatcher")
@interface UAJSONMatcher : NSObject
/// Factory method to create a JSON matcher.
/// \param valueMatcher Matcher to apply to the value. 
///
///
/// returns:
/// A JSONMatcher instance.
- (nonnull instancetype)initWithValueMatcher:(UAJSONValueMatcher * _Nonnull)valueMatcher;
/// Factory method to create a JSON matcher.
/// \param valueMatcher Matcher to apply to the value. 
///
/// \param scope Used to path into the object before evaluating the value. 
///
///
/// returns:
/// A JSONMatcher instance.
- (nonnull instancetype)initWithValueMatcher:(UAJSONValueMatcher * _Nonnull)valueMatcher scope:(NSArray<NSString *> * _Nonnull)scope;
/// note:
/// For internal use only. :nodoc:
- (nonnull instancetype)initWithValueMatcher:(UAJSONValueMatcher * _Nonnull)valueMatcher ignoreCase:(BOOL)ignoreCase;
/// note:
/// For internal use only. :nodoc:
- (nonnull instancetype)initWithValueMatcher:(UAJSONValueMatcher * _Nonnull)valueMatcher key:(NSString * _Nonnull)key;
/// note:
/// For internal use only. :nodoc:
- (nonnull instancetype)initWithValueMatcher:(UAJSONValueMatcher * _Nonnull)valueMatcher key:(NSString * _Nonnull)key scope:(NSArray<NSString *> * _Nonnull)scope;
/// note:
/// For internal use only. :nodoc:
- (nonnull instancetype)initWithValueMatcher:(UAJSONValueMatcher * _Nonnull)valueMatcher scope:(NSArray<NSString *> * _Nonnull)scope ignoreCase:(BOOL)ignoreCase;
/// Factory method to create a matcher from a JSON payload.
/// \param json The JSON payload. 
///
/// \param error An NSError pointer for storing errors, if applicable. 
///
///
/// returns:
/// A JSONMatcher instance or <code>nil</code> if the JSON is invalid.
- (nullable instancetype)initWithJSON:(id _Nullable)json error:(NSError * _Nullable * _Nullable)error;
/// The matcher’s JSON payload.
- (NSDictionary<NSString *, id> * _Nonnull)payload SWIFT_WARN_UNUSED_RESULT;
/// Evaluates the object with the matcher.
/// \param value The object to evaluate.
///
///
/// returns:
/// true if the matcher matches the object, otherwise false.
- (BOOL)evaluateObject:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// note:
/// For internal use only. :nodoc:
- (BOOL)evaluateObject:(id _Nullable)value ignoreCase:(BOOL)ignoreCase SWIFT_WARN_UNUSED_RESULT;
/// note:
/// For internal use only. :nodoc:
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
/// note:
/// For internal use only. :nodoc:
- (BOOL)isEqualToJSONMatcher:(UAJSONMatcher * _Nonnull)matcher SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Predicate for JSON payloads.
SWIFT_CLASS_NAMED("JSONPredicate")
@interface UAJSONPredicate : NSObject
/// Factory method to create a predicate from a JSON payload.
/// \param json The JSON payload. 
///
///
/// returns:
/// A predicate or <code>nil</code> if the JSON is invalid.
- (nullable instancetype)initWithJSON:(id _Nullable)json error:(NSError * _Nullable * _Nullable)error;
/// Gets the predicate’s JSON payload.
///
/// returns:
/// The predicate’s JSON payload.
- (NSDictionary<NSString *, id> * _Nonnull)payload SWIFT_WARN_UNUSED_RESULT;
/// Evaluates the object with the predicate.
/// \param object The object to evaluate.
///
///
/// returns:
/// true if the predicate matches the object, otherwise false.
- (BOOL)evaluateObject:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Creates a JSON predicate from a JSONMatcher.
/// \param matcher A JSON matcher.
///
///
/// returns:
/// A JSON predicate.
- (nonnull instancetype)initWithJSONMatcher:(UAJSONMatcher * _Nullable)matcher;
/// Factory method to create a JSON predicate formed by AND-ing an array of predicates.
/// \param subpredicates An array of predicates.
///
///
/// returns:
/// A JSON predicate.
+ (UAJSONPredicate * _Nonnull)andPredicateWithSubpredicates:(NSArray<UAJSONPredicate *> * _Nullable)subpredicates SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a JSON predicate formed by OR-ing an array of predicates.
/// \param subpredicates An array of predicates.
///
///
/// returns:
/// A JSON predicate.
+ (UAJSONPredicate * _Nonnull)orPredicateWithSubpredicates:(NSArray<UAJSONPredicate *> * _Nullable)subpredicates SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a JSON predicate by NOT-ing a predicate.
/// \param subpredicate A predicate.
///
///
/// returns:
/// A JSON predicate.
+ (UAJSONPredicate * _Nonnull)notPredicateWithSubpredicate:(UAJSONPredicate * _Nonnull)subpredicate SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("JSONUtils")
@interface UAJSONUtils : NSObject
+ (NSData * _Nullable)dataWithObject:(id _Nonnull)obj options:(NSJSONWritingOptions)options error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)stringWithObject:(id _Nonnull)obj options:(NSJSONWritingOptions)options error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)stringWithObject:(id _Nonnull)obj SWIFT_WARN_UNUSED_RESULT;
+ (id _Nullable)objectWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (id _Nullable)objectWithString:(NSString * _Nonnull)string options:(NSJSONReadingOptions)options error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Defines a JSON value matcher.
SWIFT_CLASS_NAMED("JSONValueMatcher")
@interface UAJSONValueMatcher : NSObject
/// The matcher’s JSON payload.
- (NSDictionary<NSString *, id> * _Nonnull)payload SWIFT_WARN_UNUSED_RESULT;
/// Evaluates the object with the matcher.
/// \param value The object to evaluate.
///
///
/// returns:
/// true  if the matcher matches the object, otherwise false.
- (BOOL)evaluateObject:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Evaluates the object with the matcher.
/// \param value The object to evaluate.
///
/// \param ignoreCase YES to ignore case when checking String values, NO to check case.
/// Strings contained in arrays and dictionaries also follow this rule.
///
///
/// returns:
/// true if the matcher matches the object, otherwise false.
- (BOOL)evaluateObject:(id _Nullable)value ignoreCase:(BOOL)ignoreCase SWIFT_WARN_UNUSED_RESULT;
/// note:
/// For internal use only. :nodoc:
- (BOOL)value:(id _Nullable)valueOne isEqualToValue:(id _Nullable)valueTwo ignoreCase:(BOOL)ignoreCase SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for a number that is
/// at least the specified number.
/// \param number The lower bound for the number.
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nonnull)matcherWhereNumberAtLeast:(NSNumber * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for a number between
/// the lowerNumber and higherNumber.
/// \param lowerNumber The lower bound for the number.
///
/// \param higherNumber The upper bound for the number.
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nonnull)matcherWhereNumberAtLeast:(NSNumber * _Nonnull)lowerNumber atMost:(NSNumber * _Nonnull)higherNumber SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for a number that is
/// at most the specified number.
/// \param number The upper bound for the number.
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nonnull)matcherWhereNumberAtMost:(NSNumber * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for an exact number.
/// \param number The expected number value.
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nonnull)matcherWhereNumberEquals:(NSNumber * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for an exact boolean.
/// \param boolean The expected boolean value.
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nonnull)matcherWhereBooleanEquals:(BOOL)boolean SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for an exact string.
/// \param string The expected string value.
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nonnull)matcherWhereStringEquals:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for the presence of a value.
/// \param present true if the value must be present, otherwise false.
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nonnull)matcherWhereValueIsPresent:(BOOL)present SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for a version constraint.
/// \param versionConstraint The version constraint to be matched against. 
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nullable)matcherWithVersionConstraint:(NSString * _Nonnull)versionConstraint SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for an array value.
/// \param predicate A predicate to be used to evaluate each value in the array for a match. 
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nullable)matcherWithArrayContainsPredicate:(UAJSONPredicate * _Nonnull)predicate SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher for a value in an array.
/// \param predicate A predicate to be used to evaluate the value at the index. 
///
/// \param index The array index. 
///
///
/// returns:
/// A value matcher.
+ (UAJSONValueMatcher * _Nullable)matcherWithArrayContainsPredicate:(UAJSONPredicate * _Nonnull)predicate atIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create a matcher from a JSON payload.
/// \param json The JSON payload. 
///
/// \param error An NSError pointer for storing errors, if applicable. 
///
///
/// returns:
/// A value matcher, or <code>nil</code> if the JSON is invalid.
+ (UAJSONValueMatcher * _Nullable)matcherWithJSON:(id _Nullable)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// note:
/// For internal use only. :nodoc:
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("JSONValueTransformer")
@interface UAJSONValueTransformer : NSValueTransformer
+ (Class _Nonnull)transformedValueClass SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)allowsReverseTransformation SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)transformedValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)reverseTransformedValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("JavaScriptCommand")
@interface UAJavaScriptCommand : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull arguments;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull options;
@property (nonatomic, readonly, copy) NSURL * _Nonnull URL;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKWebView;

/// A standard protocol for handling commands from the NativeBridge..
SWIFT_PROTOCOL_NAMED("JavaScriptCommandDelegate")
@protocol UAJavaScriptCommandDelegate
/// Delegates must implement this method. Implementations take a model object representing
/// the JavaScript command which includes the command name, an array of string arguments,
/// and a dictionary of key-value pairs (all strings).
/// If the passed command name is not one the delegate responds to return <code>NO</code>. If the command is handled, return
/// <code>YES</code> and the command will not be handled by another delegate.
/// To pass information to the delegate from a webview, insert links with a “uairship” scheme,
/// args in the path and key-value option pairs in the query string. The host
/// portion of the URL is treated as the command name.
/// The basic URL format:
/// uairship:///command-name/<args>?<key/value options>
/// For example, to invoke a command named “foo”, and pass in three args (arg1, arg2 and arg3)
/// and three key-value options {option1:one, option2:two, option3:three}:
/// uairship:///foo/arg1/arg2/arg3?option1=one&option2=two&option3=three
/// \param command The javascript command
///
/// \param webView The web view
///
///
/// returns:
/// <code>true</code> if the command was handled, otherwise <code>false</code>
- (BOOL)performCommand:(UAJavaScriptCommand * _Nonnull)command webView:(WKWebView * _Nonnull)webView SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("JavaScriptEnvironmentProtocol")
@protocol UAJavaScriptEnvironmentProtocol
/// Adds a string getter to the Airship JavaScript environment.
/// \param getter The getter’s name.
///
/// \param string The getter’s value.
///
- (void)addStringGetter:(NSString * _Nonnull)getter value:(NSString * _Nullable)string;
/// Adds a number getter to the Airship JavaScript environment.
/// \param getter The getter’s name.
///
/// \param number The getter’s value.
///
- (void)addNumberGetter:(NSString * _Nonnull)getter value:(NSNumber * _Nullable)number;
/// Adds a dictionary getter to the Airship JavaScript environment.
/// \param getter The getter’s name.
///
/// \param dictionary The getter’s value.
///
- (void)addDictionaryGetter:(NSString * _Nonnull)getter value:(NSDictionary * _Nullable)dictionary;
/// Builds the script that can be injected into a web view.
///
/// returns:
/// The script.
- (void)buildWithCompletionHandler:(void (^ _Nonnull)(NSString * _Nonnull))completionHandler;
@end


/// The JavaScript environment builder that is used by the native bridge.
SWIFT_CLASS_NAMED("JavaScriptEnvironment")
@interface UAJavaScriptEnvironment : NSObject <UAJavaScriptEnvironmentProtocol>
- (nonnull instancetype)init;
- (void)addStringGetter:(NSString * _Nonnull)getter value:(NSString * _Nullable)string;
- (void)addNumberGetter:(NSString * _Nonnull)getter value:(NSNumber * _Nullable)number;
- (void)addDictionaryGetter:(NSString * _Nonnull)getter value:(NSDictionary * _Nullable)dictionary;
- (void)buildWithCompletionHandler:(void (^ _Nonnull)(NSString * _Nonnull))completionHandler;
@end



/// note:
/// Internal use only :nodoc:
SWIFT_CLASS_NAMED("LocalizationUtils")
@interface UALocalizationUtils : NSObject
/// Returns a localized string associated to the receiver by the given table, returning the receiver if the
/// string cannot be found. This method searches the main bundle before falling back on AirshipCore, and
/// finally the provided module bundle, allowing for developers to override or supplement any officially bundled localizations.
/// \param string The string. 
///
/// \param table The table. 
///
/// \param moduleBundle The module bundle. 
///
/// \param defaultValue The default value. 
///
///
/// returns:
/// The localized string corresponding to the key and table, or the default value if it cannot be found.
+ (NSString * _Nullable)localizedString:(NSString * _Nonnull)string withTable:(NSString * _Nonnull)table moduleBundle:(NSBundle * _Nullable)moduleBundle defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Returns a localized string associated to the receiver by the given table, returning the receiver if the
/// string cannot be found. This method searches the main bundle before falling back on AirshipCore, and
/// finally the provided module bundle, allowing for developers to override or supplement any officially bundled localizations.
/// \param string The string. 
///
/// \param table The table. 
///
/// \param moduleBundle The module bundle. 
///
///
/// returns:
/// The localized string corresponding to the key and table, or the key if it cannot be found.
+ (NSString * _Nullable)localizedString:(NSString * _Nonnull)string withTable:(NSString * _Nonnull)table moduleBundle:(NSBundle * _Nullable)moduleBundle SWIFT_WARN_UNUSED_RESULT;
/// Returns a localized string associated to the receiver by the given table, falling back on the provided
/// locale and finally the receiver if the string cannot be found. This method searches the main bundle before
/// falling back on AirshipCore, and finally the the provided module bundle, allowing for developers to override
/// or supplement any officially bundled localizations.
/// \param string The string. 
///
/// \param table The table. 
///
/// \param moduleBundle The module bundle. 
///
/// \param fallbackLocale The locale to use in case a localized string for the current locale cannot be found. 
///
///
/// returns:
/// The localized string corresponding to the key and table, or the key if it cannot be found.
+ (NSString * _Nullable)localizedString:(NSString * _Nonnull)string withTable:(NSString * _Nonnull)table moduleBundle:(NSBundle * _Nullable)moduleBundle fallbackLocale:(NSString * _Nullable)fallbackLocale SWIFT_WARN_UNUSED_RESULT;
/// Checks if a localized string associated to the receiver exists in the given table. This method searches
/// the main bundle before falling back on AirshipCore, and finally the provided module bundle, allowing for developers
/// to override or supplement any officially bundled localizations.
/// \param string The string. 
///
/// \param table The table. 
///
/// \param moduleBundle The module bundle. 
///
///
/// returns:
/// YES if a localized string corresponding to the key and table was found, or NO if it cannot be found.
+ (BOOL)localizedStringExists:(NSString * _Nonnull)string inTable:(NSString * _Nonnull)table moduleBundle:(NSBundle * _Nullable)moduleBundle SWIFT_WARN_UNUSED_RESULT;
/// Checks if a localized string associated to the receiver exists in the given table, falling back on the provided
/// locale. This method searches the main bundle before falling back on AirshipCore, and finally the provided module bundle,
/// allowing for developers to override or supplement any officially bundled localizations.
/// \param string The string. 
///
/// \param table The table. 
///
/// \param moduleBundle The module bundle. 
///
/// \param fallbackLocale The locale to use in case a localized string for the current locale cannot be found. 
///
///
/// returns:
/// YES if a localized string corresponding to the key and table was found, or NO if it cannot be found.
+ (BOOL)localizedStringExists:(NSString * _Nonnull)string inTable:(NSString * _Nonnull)table moduleBundle:(NSBundle * _Nullable)moduleBundle fallbackLocale:(NSString * _Nullable)fallbackLocale SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A MediaEventTemplate represents a custom media event template for the
/// application.
SWIFT_CLASS_NAMED("MediaEventTemplate")
@interface UAMediaEventTemplate : NSObject
/// The event’s ID.
@property (nonatomic, copy) NSString * _Nullable identifier;
/// The event’s category.
@property (nonatomic, copy) NSString * _Nullable category;
/// The event’s type.
@property (nonatomic, copy) NSString * _Nullable type;
/// The event’s description.
@property (nonatomic, copy) NSString * _Nullable eventDescription;
/// <code>YES</code> if the event is a feature, else <code>NO</code>.
@property (nonatomic) BOOL isFeature;
/// The event’s author. The author’s length must not exceed 255 characters
/// or it will invalidate the event.
@property (nonatomic, copy) NSString * _Nullable author;
/// The event’s publishedDate. The publishedDate’s length must not exceed 255 characters
/// or it will invalidate the event.
@property (nonatomic, copy) NSString * _Nullable publishedDate;
/// Factory method for creating a browsed content event template.
///
/// returns:
/// A Media event template instance
+ (UAMediaEventTemplate * _Nonnull)browsedTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a starred content event template.
///
/// returns:
/// A Media event template instance
+ (UAMediaEventTemplate * _Nonnull)starredTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a shared content event template.
///
/// returns:
/// A Media event template instance
+ (UAMediaEventTemplate * _Nonnull)sharedTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a shared content event template.
/// If the source or medium exceeds 255 characters it will cause the event to be invalid.
/// \param source The source as an NSString.
///
/// \param medium The medium as an NSString.
///
///
/// returns:
/// A Media event template instance
+ (UAMediaEventTemplate * _Nonnull)sharedTemplateWithSource:(NSString * _Nullable)source withMedium:(NSString * _Nullable)medium SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a consumed content event template.
///
/// returns:
/// A Media event template instance
+ (UAMediaEventTemplate * _Nonnull)consumedTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a consumed content event template with a value.
/// \param valueString The value of the event as as string. The value must be between
/// -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Media event template instance
+ (UAMediaEventTemplate * _Nonnull)consumedTemplateWithValueFromString:(NSString * _Nullable)valueString SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a consumed content event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Media event template instance
+ (UAMediaEventTemplate * _Nonnull)consumedTemplateWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Creates the custom media event.
- (UACustomEvent * _Nonnull)createEvent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("MessageInfo")
@interface UAExperimentMessageInfo : NSObject
- (nonnull instancetype)initWithMessageType:(NSString * _Nonnull)messageType campaignsJSON:(id _Nullable)campaignsJSON OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("NSArrayValueTransformer")
@interface UANSArrayValueTransformer : NSValueTransformer
+ (Class _Nonnull)transformedValueClass SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)allowsReverseTransformation SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)transformedValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)reverseTransformedValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("NSDictionaryValueTransformer")
@interface UANSDictionaryValueTransformer : NSValueTransformer
+ (Class _Nonnull)transformedValueClass SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)allowsReverseTransformation SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)transformedValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)reverseTransformedValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("NSURLValueTransformer")
@interface UANSURLValueTransformer : NSValueTransformer
+ (Class _Nonnull)transformedValueClass SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)allowsReverseTransformation SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)transformedValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)reverseTransformedValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol UANativeBridgeDelegate;
@protocol UANavigationDelegate;
@protocol UANativeBridgeExtensionDelegate;
@class WKNavigationAction;
@class WKNavigationResponse;
@class WKNavigation;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;

/// The native bridge will automatically load the Airship JavaScript environment into whitlelisted sites. The native
/// bridge must be assigned as the navigation delegate on a <code>WKWebView</code> in order to function.
SWIFT_CLASS_NAMED("NativeBridge")
@interface UANativeBridge : NSObject <WKNavigationDelegate>
/// Delegate to support additional native bridge features such as <code>close</code>.
@property (nonatomic, weak) id <UANativeBridgeDelegate> _Nullable nativeBridgeDelegate;
/// Optional delegate to forward any WKNavigationDelegate calls.
@property (nonatomic, weak) id <UANavigationDelegate> _Nullable forwardNavigationDelegate;
/// Optional delegate to support custom JavaScript commands.
@property (nonatomic, weak) id <UAJavaScriptCommandDelegate> _Nullable javaScriptCommandDelegate;
/// Optional delegate to extend the native bridge.
@property (nonatomic, weak) id <UANativeBridgeExtensionDelegate> _Nullable nativeBridgeExtensionDelegate;
/// NativeBridge initializer.
- (nonnull instancetype)init;
/// Decide whether to allow or cancel a navigation. :nodoc:
/// If a uairship:// URL, process it ourselves
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
/// Decide whether to allow or cancel a navigation after its response is known. :nodoc:
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationResponse:(WKNavigationResponse * _Nonnull)navigationResponse decisionHandler:(void (^ _Nonnull)(WKNavigationResponsePolicy))decisionHandler;
/// Called when the navigation is complete. :nodoc:
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
/// Called when the web view begins to receive web content. :nodoc:
- (void)webView:(WKWebView * _Nonnull)webView didCommitNavigation:(WKNavigation * _Null_unspecified)navigation;
/// Called when the web view’s web content process is terminated. :nodoc:
- (void)webViewWebContentProcessDidTerminate:(WKWebView * _Nonnull)webView;
/// Called when web content begins to load in a web view. :nodoc:
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
/// Called when a web view receives a server redirect. :nodoc:
- (void)webView:(WKWebView * _Nonnull)webView didReceiveServerRedirectForProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
/// Called when an error occurs during navigation. :nodoc:
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
/// Called when an error occurs while the web view is loading content. :nodoc:
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
/// Called when the web view needs to respond to an authentication challenge. :nodoc:
- (void)webView:(WKWebView * _Nonnull)webView didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
@end


SWIFT_PROTOCOL_NAMED("NativeBridgeDelegate")
@protocol UANativeBridgeDelegate
/// Called when <code>UAirship.close()</code> is triggered from the JavaScript environment.
- (void)close;
@end


/// Delegate to extend the native bridge.
SWIFT_PROTOCOL_NAMED("NativeBridgeExtensionDelegate")
@protocol UANativeBridgeExtensionDelegate
/// Called when an action is triggered from the JavaScript Environment. This method should return the metadata used in the <code>ActionArgument</code>.
/// \param command The JavaScript command. 
///
/// \param webView The webview. 
/// @return The action metadata.
///
- (NSDictionary<NSString *, NSString *> * _Nonnull)actionsMetadataForCommand:(UAJavaScriptCommand * _Nonnull)command webView:(WKWebView * _Nonnull)webView SWIFT_WARN_UNUSED_RESULT;
/// Called before the JavaScript environment is being injected into the web view.
/// \param js The JavaScript environment. 
///
/// \param webView  The web view. 
///
/// \param completionHandler The completion handler when finished. 
///
- (void)extendJavaScriptEnvironment:(id <UAJavaScriptEnvironmentProtocol> _Nonnull)js webView:(WKWebView * _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
@end


/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("NetworkMonitor")
@interface UANetworkMonitor : NSObject
@property (nonatomic, copy) void (^ _Nullable connectionUpdates)(BOOL);
@property (nonatomic, readonly) BOOL isConnected;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Utility methods to create categories from plist files or dictionaries.
SWIFT_CLASS_NAMED("NotificationCategories")
@interface UANotificationCategories : NSObject
/// Factory method to create the default set of user notification categories.
/// Background user notification actions will default to requiring authorization.
///
/// returns:
/// A set of user notification categories
+ (NSSet<UNNotificationCategory *> * _Nonnull)defaultCategories SWIFT_WARN_UNUSED_RESULT;
/// Factory method to create the default set of user notification categories.
/// \param requireAuth If background actions should default to requiring authorization or not.
///
///
/// returns:
/// A set of user notification categories.
+ (NSSet<UNNotificationCategory *> * _Nonnull)defaultCategoriesWithRequireAuth:(BOOL)requireAuth SWIFT_WARN_UNUSED_RESULT;
/// Creates a set of categories from the specified <code>.plist</code> file.
/// Categories are defined in a plist dictionary with the category ID
/// followed by an array of user notification action definitions. The
/// action definitions use the same keys as the properties on the action,
/// with the exception of “foreground” mapping to either UIUserNotificationActivationModeForeground
/// or UIUserNotificationActivationModeBackground. The required action definition
/// title can be defined with either the “title” or “title_resource” key, where
/// the latter takes precedence. If “title_resource” does not exist, the action
/// definition title will fall back to the value of “title”. If the required action
/// definition title is not defined, the category will not be created.
/// Example:
/// {
/// “category_id” : [
/// {
/// “identifier” : “action ID”,
/// “title_resource” : “action title resource”,
/// “title” : “action title”,
/// “foreground” : true,
/// “authenticationRequired” : false,
/// “destructive” : false
/// }]
/// }
/// \param path The path of the <code>plist</code> file
///
///
/// returns:
/// A set of categories
+ (NSSet<UNNotificationCategory *> * _Nonnull)createCategoriesFromFile:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a user notification category with the specified ID and action definitions.
/// \param categoryId The category identifier
///
/// \param actionDefinitions An array of user notification action dictionaries used to construct UNNotificationAction for the category.
///
///
/// returns:
/// The user notification category created, or <code>nil</code> if an error occurred.
+ (UNNotificationCategory * _Nullable)createCategory:(NSString * _Nonnull)categoryId actions:(NSArray<NSDictionary *> * _Nonnull)actionDefinitions SWIFT_WARN_UNUSED_RESULT;
/// Creates a user notification category with the specified ID, action definitions, and
/// hiddenPreviewsBodyPlaceholder.
/// \param categoryId The category identifier
///
/// \param actionDefinitions An array of user notification action dictionaries used to construct UNNotificationAction for the category.
///
/// \param hiddenPreviewsBodyPlaceholder A placeholder string to display when the user has disabled notification previews for the app.
///
///
/// returns:
/// The user notification category created or <code>nil</code> if an error occurred.
+ (UNNotificationCategory * _Nullable)createCategory:(NSString * _Nonnull)categoryId actions:(NSArray<NSDictionary *> * _Nonnull)actionDefinitions hiddenPreviewsBodyPlaceholder:(NSString * _Nonnull)hiddenPreviewsBodyPlaceholder SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Open registration options
SWIFT_CLASS_NAMED("OpenRegistrationOptions")
@interface UAOpenRegistrationOptions : NSObject
/// Returns an open registration options with opt-in status
/// \param platformName The platform name
///
/// \param identifiers The identifiers
///
///
/// returns:
/// An open registration options.
+ (UAOpenRegistrationOptions * _Nonnull)optInPlatformName:(NSString * _Nonnull)platformName identifiers:(NSDictionary<NSString *, NSString *> * _Nullable)identifiers SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Preference data store.
/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("PreferenceDataStore")
@interface UAPreferenceDataStore : NSObject
- (nonnull instancetype)initWithAppKey:(NSString * _Nonnull)appKey;
- (id _Nullable)valueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
- (void)removeObjectForKey:(NSString * _Nonnull)key;
- (BOOL)keyExists:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)objectForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)stringForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSObject *> * _Nullable)arrayForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nullable)dictionaryForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)dataForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSObject *> * _Nullable)stringArrayForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)integerForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (float)floatForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (double)doubleForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (double)doubleForKey:(NSString * _Nonnull)key defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)boolForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)boolForKey:(NSString * _Nonnull)key defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setInteger:(NSInteger)int_ forKey:(NSString * _Nonnull)key;
- (void)setFloat:(float)float_ forKey:(NSString * _Nonnull)key;
- (void)setDouble:(double)double_ forKey:(NSString * _Nonnull)key;
- (void)setBool:(BOOL)bool_ forKey:(NSString * _Nonnull)key;
- (void)setObject:(id _Nullable)object forKey:(NSString * _Nonnull)key;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface UAPreferenceDataStore (SWIFT_EXTENSION(AirshipCore))
- (void)storeExperimentResult:(UAExperimentResult * _Nullable)experiment forKey:(NSString * _Nonnull)key;
- (UAExperimentResult * _Nullable)experimentResultForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


/// A proximity region defines an identifier, major and minor.
SWIFT_CLASS_NAMED("ProximityRegion")
@interface UAProximityRegion : NSObject
/// Factory method for creating a proximity region.
/// \param proximityID The ID of the proximity region.
///
/// \param major The major.
///
/// \param minor The minor.
///
///
/// returns:
/// Proximity region object or <code>nil</code> if error occurs.
+ (UAProximityRegion * _Nullable)proximityRegionWithID:(NSString * _Nonnull)proximityID major:(double)major minor:(double)minor SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a proximity region.
/// \param proximityID The ID of the proximity region.
///
/// \param major The major.
///
/// \param minor The minor.
///
/// \param rssi The rssi.
///
///
/// returns:
/// Proximity region object or <code>nil</code> if error occurs.
+ (UAProximityRegion * _Nullable)proximityRegionWithID:(NSString * _Nonnull)proximityID major:(double)major minor:(double)minor rssi:(double)rssi SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a proximity region.
/// \param proximityID The ID of the proximity region.
///
/// \param major The major.
///
/// \param minor The minor.
///
/// \param latitude The latitude of the circular region’s center point in degrees.
///
/// \param longitude The longitude of the circular region’s center point in degrees.
///
///
/// returns:
/// Proximity region object or <code>nil</code> if error occurs.
+ (UAProximityRegion * _Nullable)proximityRegionWithID:(NSString * _Nonnull)proximityID major:(double)major minor:(double)minor latitude:(double)latitude longitude:(double)longitude SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a proximity region.
/// \param proximityID The ID of the proximity region.
///
/// \param major The major.
///
/// \param minor The minor.
///
/// \param rssi The rssi.
///
/// \param latitude The latitude of the circular region’s center point in degrees.
///
/// \param longitude The longitude of the circular region’s center point in degrees.
///
///
/// returns:
/// Proximity region object or <code>nil</code> if error occurs.
+ (UAProximityRegion * _Nullable)proximityRegionWithID:(NSString * _Nonnull)proximityID major:(double)major minor:(double)minor rssi:(double)rssi latitude:(double)latitude longitude:(double)longitude SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol to be implemented by push notification clients. All methods are optional.
SWIFT_PROTOCOL_NAMED("PushNotificationDelegate")
@protocol UAPushNotificationDelegate <NSObject>
@optional
/// Called when a notification is received in the foreground.
/// \param userInfo The notification info
///
/// \param completionHandler the completion handler to execute when notification processing is complete.
///
- (void)receivedForegroundNotification:(NSDictionary * _Nonnull)userInfo completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Called when a notification is received in the background.
/// \param userInfo The notification info
///
/// \param completionHandler the completion handler to execute when notification processing is complete.
///
- (void)receivedBackgroundNotification:(NSDictionary * _Nonnull)userInfo completionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
/// Called when a notification is received in the background or foreground and results in a user interaction.
/// User interactions can include launching the application from the push, or using an interactive control on the notification interface
/// such as a button or text field.
/// \param notificationResponse UNNotificationResponse object representing the user’s response
/// to the notification and the associated notification contents.
///
/// \param completionHandler the completion handler to execute when processing the user’s response has completed.
///
- (void)receivedNotificationResponse:(UNNotificationResponse * _Nonnull)notificationResponse completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Called when a notification has arrived in the foreground and is available for display.
/// \param options The notification presentation options.
///
/// \param notification The notification.
///
///
/// returns:
/// a UNNotificationPresentationOptions enum value indicating the presentation options for the notification.
- (UNNotificationPresentationOptions)extendPresentationOptions:(UNNotificationPresentationOptions)options notification:(UNNotification * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
/// Called when a notification has arrived in the foreground and is available for display.
/// \param options The notification presentation options.
///
/// \param notification The notification.
///
/// \param completionHandler The completion handler.
///
- (void)extendPresentationOptions:(UNNotificationPresentationOptions)options notification:(UNNotification * _Nonnull)notification completionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
@end


enum UABoundaryEvent : NSInteger;

/// A region event captures information regarding a region event for analytics.
SWIFT_CLASS_NAMED("RegionEvent")
@interface UARegionEvent : NSObject <UAEvent>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull regionIDKey;)
+ (NSString * _Nonnull)regionIDKey SWIFT_WARN_UNUSED_RESULT;
/// The region’s identifier.
@property (nonatomic, readonly, copy) NSString * _Nonnull regionID;
/// The source of the event.
@property (nonatomic, readonly, copy) NSString * _Nonnull source;
/// The type of boundary event.
@property (nonatomic, readonly) enum UABoundaryEvent boundaryEvent;
/// A circular region with a radius, and latitude/longitude from its center.
@property (nonatomic, readonly, strong) UACircularRegion * _Nullable circularRegion;
/// A proximity region with an identifier, major and minor.
@property (nonatomic, readonly, strong) UAProximityRegion * _Nullable proximityRegion;
@property (nonatomic, readonly, copy) NSString * _Nonnull eventType;
@property (nonatomic, readonly) UAEventPriority priority;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull data;
/// note:
/// For internal use only. :nodoc:
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull payload;
/// Factory method for creating a region event.
/// \param regionID The ID of the region.
///
/// \param source The source of the event.
///
/// \param boundaryEvent The type of boundary crossing event.
///
///
/// returns:
/// Region event object or <code>nil</code> if error occurs.
+ (UARegionEvent * _Nullable)regionEventWithRegionID:(NSString * _Nonnull)regionID source:(NSString * _Nonnull)source boundaryEvent:(enum UABoundaryEvent)boundaryEvent SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a region event.
/// \param regionID The ID of the region.
///
/// \param source The source of the event.
///
/// \param boundaryEvent The type of boundary crossing event.
///
/// \param circularRegion The circular region info.
///
/// \param proximityRegion The proximity region info.
///
///
/// returns:
/// Region event object or <code>nil</code> if error occurs.
+ (UARegionEvent * _Nullable)regionEventWithRegionID:(NSString * _Nonnull)regionID source:(NSString * _Nonnull)source boundaryEvent:(enum UABoundaryEvent)boundaryEvent circularRegion:(UACircularRegion * _Nullable)circularRegion proximityRegion:(UAProximityRegion * _Nullable)proximityRegion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Implement this protocol and add as a Push.registrationDelegate to receive
/// registration success and failure callbacks.
SWIFT_PROTOCOL_NAMED("RegistrationDelegate")
@protocol UARegistrationDelegate <NSObject>
@optional
/// Called when APNS registration completes.
/// \param authorizedSettings The settings that were authorized at the time of registration.
///
/// \param categories Set of the categories that were most recently registered.
///
/// \param status The authorization status.
///
- (void)notificationRegistrationFinishedWithAuthorizedSettings:(UAAuthorizedNotificationSettings)authorizedSettings categories:(NSSet<UNNotificationCategory *> * _Nonnull)categories status:(UAAuthorizationStatus)status;
/// Called when APNS registration completes.
/// \param authorizedSettings The settings that were authorized at the time of registration.
///
/// \param status The authorization status.
///
- (void)notificationRegistrationFinishedWithAuthorizedSettings:(UAAuthorizedNotificationSettings)authorizedSettings status:(UAAuthorizationStatus)status;
/// Called when notification authentication changes with the new authorized settings.
/// \param authorizedSettings UAAuthorizedNotificationSettings The newly changed authorized settings.
///
- (void)notificationAuthorizedSettingsDidChange:(UAAuthorizedNotificationSettings)authorizedSettings;
/// Called when the UIApplicationDelegate’s application:didRegisterForRemoteNotificationsWithDeviceToken:
/// delegate method is called.
/// \param deviceToken The APNS device token.
///
- (void)apnsRegistrationSucceededWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// Called when the UIApplicationDelegate’s application:didFailToRegisterForRemoteNotificationsWithError:
/// delegate method is called.
/// \param error An NSError object that encapsulates information why registration did not succeed.
///
- (void)apnsRegistrationFailedWithError:(NSError * _Nonnull)error;
@end

enum UARemoteDataSource : NSInteger;

SWIFT_CLASS_NAMED("RemoteDataInfo")
@interface UARemoteDataInfo : NSObject <NSCopying>
@property (nonatomic, readonly) enum UARemoteDataSource source;
@property (nonatomic, readonly, copy) NSString * _Nullable contactID;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (UARemoteDataInfo * _Nullable)fromJSONWithString:(NSString * _Nonnull)string error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)toEncodedJSONStringAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("RemoteDataPayload")
@interface UARemoteDataPayload : NSObject
/// The payload type
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// The timestamp of the most recent change to this data payload
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
/// The actual data associated with this payload
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull data;
@property (nonatomic, readonly, strong) UARemoteDataInfo * _Nullable remoteDataInfo;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, UARemoteDataSource, "RemoteDataSource", open) {
  UARemoteDataSourceApp = 0,
  UARemoteDataSourceContact = 1,
};


/// A RetailEventTemplate represents a custom retail event template for the
/// application.
SWIFT_CLASS_NAMED("RetailEventTemplate")
@interface UARetailEventTemplate : NSObject
/// The event’s value. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
@property (nonatomic, strong) NSNumber * _Nullable eventValue;
/// The event’s transaction ID. The transaction ID’s length must not exceed 255
/// characters or it will invalidate the event.
@property (nonatomic, copy) NSString * _Nullable transactionID;
/// The event’s ID.
@property (nonatomic, copy) NSString * _Nullable identifier;
/// The event’s category.
@property (nonatomic, copy) NSString * _Nullable category;
/// The event’s description.
@property (nonatomic, copy) NSString * _Nullable eventDescription;
/// The brand..
@property (nonatomic, copy) NSString * _Nullable brand;
/// If the item is new or not.
@property (nonatomic) BOOL isNewItem;
/// Factory method for creating a browsed event template.
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)browsedTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a browsed event template with a value.
/// \param valueString The value of the event as as string. The value must be between
/// -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)browsedTemplateWithValueFromString:(NSString * _Nullable)valueString SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a browsed event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)browsedTemplateWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating an addedToCart event template.
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)addedToCartTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating an addedToCart event template with a value.
/// \param valueString The value of the event as as string. The value must be between
/// -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)addedToCartTemplateWithValueFromString:(NSString * _Nullable)valueString SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating an addedToCart event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)addedToCartTemplateWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a starredProduct event template
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)starredProductTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a starredProduct event template with a value.
/// \param valueString The value of the event as as string. The value must be between
/// -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)starredProductTemplateWithValueFromString:(NSString * _Nullable)valueString SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a starredProduct event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)starredProductTemplateWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a purchased event template.
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)purchasedTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a purchased event template with a value.
/// \param valueString The value of the event as as string. The value must be between
/// -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)purchasedTemplateWithValueFromString:(NSString * _Nullable)valueString SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a purchased event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)purchasedTemplateWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a sharedProduct template event.
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)sharedProductTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a sharedProduct event template with a value.
/// \param valueString The value of the event as as string. The value must be between
/// -2^31 and 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)sharedProductTemplateWithValueFromString:(NSString * _Nullable)valueString SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a sharedProduct event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)sharedProductTemplateWithValue:(NSNumber * _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a sharedProduct event template.
/// \param source The source as an NSString.
///
/// \param medium The medium as an NSString
///
///
/// returns:
/// A Retail event template instance.
+ (UARetailEventTemplate * _Nonnull)sharedProductTemplateWithSource:(NSString * _Nullable)source withMedium:(NSString * _Nullable)medium SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a sharedProduct event template with a value.
/// \param valueString The value of the event as as string. The value must be between
/// -2^31 and 2^31 - 1 or it will invalidate the event.
///
/// \param source The source as an NSString.
///
/// \param medium The medium as an NSString.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)sharedProductTemplateWithValueFromString:(NSString * _Nullable)valueString withSource:(NSString * _Nullable)source withMedium:(NSString * _Nullable)medium SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a sharedProduct event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
/// \param source The source as an NSString.
///
/// \param medium The medium as an NSString.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)sharedProductTemplateWithValue:(NSNumber * _Nullable)value withSource:(NSString * _Nullable)source withMedium:(NSString * _Nullable)medium SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a wishlist event template.
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)wishlistTemplate SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a wishlist event template with a wishlist name and ID.
/// \param name The name of the wishlist as as string.
///
/// \param wishlistID The ID of the wishlist as as string.
///
///
/// returns:
/// A Retail event template instance
+ (UARetailEventTemplate * _Nonnull)wishlistTemplateWithName:(NSString * _Nullable)name wishlistID:(NSString * _Nullable)wishlistID SWIFT_WARN_UNUSED_RESULT;
/// Creates the custom media event.
- (UACustomEvent * _Nonnull)createEvent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Airship config needed for runtime. Generated from <code>UAConfig</code> during takeOff.
SWIFT_CLASS_NAMED("RuntimeConfig")
@interface UARuntimeConfig : NSObject
/// note:
/// This option is reserved for internal debugging. :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull configUpdatedEvent;)
+ (NSNotificationName _Nonnull)configUpdatedEvent SWIFT_WARN_UNUSED_RESULT;
/// The current app key (resolved using the inProduction flag).
@property (nonatomic, readonly, copy) NSString * _Nonnull appKey;
/// The current app secret (resolved using the inProduction flag).
@property (nonatomic, readonly, copy) NSString * _Nonnull appSecret;
/// The current default Airship log level.
@property (nonatomic, readonly) enum UALogLevel logLevel;
/// The production status of this application.
@property (nonatomic, readonly) BOOL inProduction;
/// Auto pause InAppAutomation on launch.
@property (nonatomic, readonly) BOOL autoPauseInAppAutomationOnLaunch;
/// If enabled, the Airship library automatically registers for remote notifications when push is enabled
/// and intercepts incoming notifications in both the foreground and upon launch.
/// Defaults to enabled. If this is disabled, you will need to register for remote notifications
/// in application:didFinishLaunchingWithOptions: and forward all notification-related app delegate
/// calls to UAPush and UAInbox.
@property (nonatomic, readonly) BOOL isAutomaticSetupEnabled;
/// An array of UAURLAllowList entry strings.
/// This url allow list is used for validating which URLs can be opened or load the JavaScript native bridge.
/// It affects landing pages, the open external URL and wallet actions,
/// deep link actions (if a delegate is not set), and HTML in-app messages.
/// note:
/// See UAURLAllowList for pattern entry syntax.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable URLAllowList;
/// An array of UAURLAllowList entry strings.
/// This url allow list is used for validating which URLs can load the JavaScript native bridge.
/// It affects Landing Pages, Message Center and HTML In-App Messages.
/// note:
/// See UAURLAllowList for pattern entry syntax.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable URLAllowListScopeJavaScriptInterface;
/// An array of UAURLAllowList entry strings.
/// This url allow list is used for validating which URLs can be opened.
/// It affects landing pages, the open external URL and wallet actions,
/// deep link actions (if a delegate is not set), and HTML in-app messages.
/// note:
/// See UAURLAllowList for pattern entry syntax.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable URLAllowListScopeOpenURL;
/// Toggles Airship analytics. Defaults to <code>true</code>. If set to <code>false</code>, many Airship features will not be
/// available to this application.
@property (nonatomic, readonly) BOOL isAnalyticsEnabled;
/// The Airship default message center style configuration file.
@property (nonatomic, readonly, copy) NSString * _Nullable messageCenterStyleConfig;
/// The iTunes ID used for Rate App Actions.
@property (nonatomic, readonly, copy) NSString * _Nullable itunesID;
/// If set to <code>true</code>, the Airship user will be cleared if the application is
/// restored on a different device from an encrypted backup.
/// Defaults to <code>false</code>.
@property (nonatomic, readonly) BOOL clearUserOnAppRestore;
/// If set to <code>true</code>, the application will clear the previous named user ID on a
/// re-install. Defaults to <code>false</code>.
@property (nonatomic, readonly) BOOL clearNamedUserOnAppRestore;
/// Flag indicating whether channel capture feature is enabled or not.
/// Defaults to <code>false</code>.
@property (nonatomic, readonly) BOOL isChannelCaptureEnabled;
/// Flag indicating whether delayed channel creation is enabled. If set to <code>true</code> channel
/// creation will not occur until channel creation is manually enabled.
/// Defaults to <code>false</code>.
@property (nonatomic, readonly) BOOL isChannelCreationDelayEnabled;
/// Flag indicating whether extended broadcasts are enabled. If set to <code>true</code> the AirshipReady NSNotification
/// will contain additional data: the channel identifier and the app key.
/// Defaults to <code>false</code>.
@property (nonatomic, readonly) BOOL isExtendedBroadcastsEnabled;
/// If set to ‘YES’, the Airship SDK will request authorization to use
/// notifications from the user. Apps that set this flag to <code>false</code> are
/// required to request authorization themselves.
/// Defaults to <code>true</code>.
@property (nonatomic, readonly) BOOL requestAuthorizationToUseNotifications;
/// If set to <code>true</code>, the SDK will wait for an initial remote config instead of falling back on default API URLs.
/// Defaults to <code>false</code>.
@property (nonatomic, readonly) BOOL requireInitialRemoteConfigEnabled;
/// note:
/// This option is reserved for internal debugging. :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable deviceAPIURL;
/// note:
/// This option is reserved for internal debugging. :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable remoteDataAPIURL;
/// note:
/// This option is reserved for internal debugging. :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable analyticsURL;
/// note:
/// This option is reserved for internal debugging. :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable chatURL;
/// note:
/// This option is reserved for internal debugging. :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable chatWebSocketURL;
- (nonnull instancetype)initWithConfig:(UAConfig * _Nonnull)config dataStore:(UAPreferenceDataStore * _Nonnull)dataStore;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// NOTE: For internal use only. :nodoc:
SWIFT_CLASS_NAMED("SDKDependencyKeys")
@interface UASDKDependencyKeys : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull channel;)
+ (NSString * _Nonnull)channel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull contact;)
+ (NSString * _Nonnull)contact SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull push;)
+ (NSString * _Nonnull)push SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull remoteData;)
+ (NSString * _Nonnull)remoteData SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull remoteDataAutomation;)
+ (NSString * _Nonnull)remoteDataAutomation SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull config;)
+ (NSString * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dataStore;)
+ (NSString * _Nonnull)dataStore SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull analytics;)
+ (NSString * _Nonnull)analytics SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull privacyManager;)
+ (NSString * _Nonnull)privacyManager SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull permissionsManager;)
+ (NSString * _Nonnull)permissionsManager SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull workManager;)
+ (NSString * _Nonnull)workManager SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull automationAudienceOverridesProvider;)
+ (NSString * _Nonnull)automationAudienceOverridesProvider SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull experimentsManager;)
+ (NSString * _Nonnull)experimentsManager SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// SMS registration options
SWIFT_CLASS_NAMED("SMSRegistrationOptions")
@interface UASMSRegistrationOptions : NSObject
/// Returns a SMS registration options with opt-in status
/// \param senderID The sender ID
///
///
/// returns:
/// A SMS registration options.
+ (UASMSRegistrationOptions * _Nonnull)optInSenderID:(NSString * _Nonnull)senderID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Scoped subscription list editor.
SWIFT_CLASS_NAMED("ScopedSubscriptionListEditor")
@interface UAScopedSubscriptionListEditor : NSObject
/// Subscribes to a list.
/// \param subscriptionListID The subscription list identifier.
///
/// \param scope Defines the channel types that the change applies to.
///
- (void)subscribe:(NSString * _Nonnull)subscriptionListID scope:(enum UAChannelScope)scope;
/// Unsubscribes from a list.
/// \param subscriptionListID The subscription list identifier.
///
/// \param scope Defines the channel types that the change applies to.
///
- (void)unsubscribe:(NSString * _Nonnull)subscriptionListID scope:(enum UAChannelScope)scope;
/// Applies subscription list changes.
- (void)apply;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A SearchEventTemplate represents a custom search event template for the
/// application.
SWIFT_CLASS_NAMED("SearchEventTemplate")
@interface SearchEventTemplate : NSObject
/// The event’s value. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
@property (nonatomic, strong) NSNumber * _Nullable eventValue;
/// The event’s type.
@property (nonatomic, copy) NSString * _Nullable type;
/// The event’s identifier.
@property (nonatomic, copy) NSString * _Nullable identifier;
/// The event’s category.
@property (nonatomic, copy) NSString * _Nullable category;
/// The event’s query.
@property (nonatomic, copy) NSString * _Nullable query;
/// The event’s total results.
@property (nonatomic) NSInteger totalResults;
/// Factory method for creating a search event template with a value.
/// \param value The value of the event. The value must be between -2^31 and
/// 2^31 - 1 or it will invalidate the event.
///
///
/// returns:
/// SearchEventTemplate instance.
+ (SearchEventTemplate * _Nonnull)templateWithValue:(NSNumber * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Factory method for creating a search event template.
///
/// returns:
/// SearchEventTemplate instance.
+ (SearchEventTemplate * _Nonnull)template SWIFT_WARN_UNUSED_RESULT;
/// Creates the custom search event.
///
/// returns:
/// Created UACustomEvent instance.
- (UACustomEvent * _Nonnull)createEvent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("Semaphore")
@interface UASemaphore : NSObject
- (nonnull instancetype)init;
- (nonnull instancetype)initWithValue:(NSInteger)value OBJC_DESIGNATED_INITIALIZER;
- (void)wait;
- (BOOL)wait:(NSTimeInterval)timeout;
- (BOOL)signal;
@end


/// Subscription list editor.
SWIFT_CLASS_NAMED("SubscriptionListEditor")
@interface UASubscriptionListEditor : NSObject
/// Subscribes to a list.
/// \param subscriptionListID The subscription list identifier.
///
- (void)subscribe:(NSString * _Nonnull)subscriptionListID;
/// Unsubscribes from a list.
/// \param subscriptionListID The subscription list identifier.
///
- (void)unsubscribe:(NSString * _Nonnull)subscriptionListID;
/// Applies subscription list changes.
- (void)apply;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Tag editor.
SWIFT_CLASS_NAMED("TagEditor")
@interface UATagEditor : NSObject
/// Adds tags.
/// \param tags The tags.
///
- (void)addTags:(NSArray<NSString *> * _Nonnull)tags;
/// Adds a single tag.
/// \param tag The tag.
///
- (void)addTag:(NSString * _Nonnull)tag;
/// Removes tags from the given group.
/// \param tags The tags.
///
- (void)removeTags:(NSArray<NSString *> * _Nonnull)tags;
/// Removes a single tag.
/// \param tag The tag.
///
- (void)removeTag:(NSString * _Nonnull)tag;
/// Sets tags on the given group.
/// \param tags The tags.
///
- (void)setTags:(NSArray<NSString *> * _Nonnull)tags;
/// Clears tags.
- (void)clearTags;
/// Applies tag changes.
- (void)apply;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Tag groups editor.
SWIFT_CLASS_NAMED("TagGroupsEditor")
@interface UATagGroupsEditor : NSObject
/// Adds tags to the given group.
/// \param tags The tags.
///
/// \param group The tag group.
///
- (void)addTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)group;
/// Removes tags from the given group.
/// \param tags The tags.
///
/// \param group The tag group.
///
- (void)removeTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)group;
/// Sets tags on the given group.
/// \param tags The tags.
///
/// \param group The tag group.
///
- (void)setTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)group;
/// Applies tag changes.
- (void)apply;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UADispatcher;

SWIFT_PROTOCOL("_TtP11AirshipCore19TaskManagerProtocol_")
@protocol TaskManagerProtocol
- (void)registerForTaskWithID:(NSString * _Nonnull)taskID type:(enum UAirshipWorkerType)type launchHandler:(void (^ _Nonnull)(id <UATask> _Nonnull))launchHandler;
- (void)registerForTaskWithID:(NSString * _Nonnull)taskID type:(enum UAirshipWorkerType)type dispatcher:(UADispatcher * _Nonnull)dispatcher launchHandler:(void (^ _Nonnull)(id <UATask> _Nonnull))launchHandler;
- (void)enqueueRequestWithID:(NSString * _Nonnull)taskID options:(UATaskRequestOptions * _Nonnull)options;
- (void)enqueueRequestWithID:(NSString * _Nonnull)taskID options:(UATaskRequestOptions * _Nonnull)options initialDelay:(NSTimeInterval)initialDelay;
- (BOOL)setRateLimitForID:(NSString * _Nonnull)rateLimitID rate:(NSInteger)rate timeInterval:(NSTimeInterval)timeInterval error:(NSError * _Nullable * _Nullable)error;
- (void)enqueueRequestWithID:(NSString * _Nonnull)taskID rateLimitIDs:(NSArray<NSString *> * _Nonnull)rateLimitIDs options:(UATaskRequestOptions * _Nonnull)options minDelay:(NSTimeInterval)minDelay;
- (void)enqueueRequestWithID:(NSString * _Nonnull)taskID rateLimitIDs:(NSArray<NSString *> * _Nonnull)rateLimitIDs options:(UATaskRequestOptions * _Nonnull)options;
@end


SWIFT_CLASS_NAMED("TaskManager")
@interface UATaskManager : NSObject <TaskManagerProtocol>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UATaskManager * _Nonnull shared;)
+ (UATaskManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)registerForTaskWithID:(NSString * _Nonnull)taskID type:(enum UAirshipWorkerType)type launchHandler:(void (^ _Nonnull)(id <UATask> _Nonnull))launchHandler;
- (void)registerForTaskWithID:(NSString * _Nonnull)taskID type:(enum UAirshipWorkerType)type dispatcher:(UADispatcher * _Nonnull)dispatcher launchHandler:(void (^ _Nonnull)(id <UATask> _Nonnull))launchHandler;
- (BOOL)setRateLimitForID:(NSString * _Nonnull)rateLimitID rate:(NSInteger)rate timeInterval:(NSTimeInterval)timeInterval error:(NSError * _Nullable * _Nullable)error;
- (void)enqueueRequestWithID:(NSString * _Nonnull)taskID options:(UATaskRequestOptions * _Nonnull)options;
- (void)enqueueRequestWithID:(NSString * _Nonnull)taskID options:(UATaskRequestOptions * _Nonnull)options initialDelay:(NSTimeInterval)initialDelay;
- (void)enqueueRequestWithID:(NSString * _Nonnull)taskID rateLimitIDs:(NSArray<NSString *> * _Nonnull)rateLimitIDs options:(UATaskRequestOptions * _Nonnull)options;
- (void)enqueueRequestWithID:(NSString * _Nonnull)taskID rateLimitIDs:(NSArray<NSString *> * _Nonnull)rateLimitIDs options:(UATaskRequestOptions * _Nonnull)options minDelay:(NSTimeInterval)minDelay;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("TaskRequestOptions")
@interface UATaskRequestOptions : NSObject
@property (nonatomic, readonly) enum AirshipWorkRequestConflictPolicy conflictPolicy;
@property (nonatomic, readonly) BOOL isNetworkRequired;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull extras;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UATaskRequestOptions * _Nonnull defaultOptions;)
+ (UATaskRequestOptions * _Nonnull)defaultOptions SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithConflictPolicy:(enum AirshipWorkRequestConflictPolicy)conflictPolicy requiresNetwork:(BOOL)requiresNetwork extras:(NSDictionary<NSString *, NSString *> * _Nullable)extras OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UAURLInfo;
@class UAThomasExtensions;
@protocol UAThomasDelegate;
@class UADisposable;

/// Airship rendering engine.
/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("Thomas")
@interface UAThomas : NSObject
+ (BOOL)validateWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)validateWithJson:(id _Nonnull)json error:(NSError * _Nullable * _Nullable)error;
+ (NSArray<UAURLInfo *> * _Nullable)urlsWithJson:(id _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (UADisposable * _Nonnull (^ _Nullable)(void))deferredDisplayWithJson:(id _Nonnull)json scene:(UIWindowScene * _Nonnull)scene extensions:(UAThomasExtensions * _Nullable)extensions delegate:(id <UAThomasDelegate> _Nonnull)delegate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (UADisposable * _Nonnull (^ _Nullable)(void))deferredDisplayWithData:(NSData * _Nonnull)data scene:(UIWindowScene * _Nonnull)scene extensions:(UAThomasExtensions * _Nullable)extensions delegate:(id <UAThomasDelegate> _Nonnull)delegate error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("ThomasButtonInfo")
@interface UAThomasButtonInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UAThomasFormResult;
@class UAThomasLayoutContext;
@class UAThomasFormInfo;
@class UAThomasPagerInfo;

/// note:
/// for internal use only.  :nodoc:
SWIFT_PROTOCOL_NAMED("ThomasDelegate")
@protocol UAThomasDelegate
/// Called when a form is submitted
/// \param formResult The form result.
///
/// \param layoutContext The layout context.
///
- (void)onFormSubmittedWithFormResult:(UAThomasFormResult * _Nonnull)formResult layoutContext:(UAThomasLayoutContext * _Nonnull)layoutContext;
/// Called when a form is displayed for the first time
/// \param formInfo The form info.
///
/// \param layoutContext The layout context.
///
- (void)onFormDisplayedWithFormInfo:(UAThomasFormInfo * _Nonnull)formInfo layoutContext:(UAThomasLayoutContext * _Nonnull)layoutContext;
/// Called when a button is tapped.
/// \param buttonIdentifier The button id.
///
/// \param metadata the reporting metadata.
///
/// \param layoutContext The layout context.
///
- (void)onButtonTappedWithButtonIdentifier:(NSString * _Nonnull)buttonIdentifier metadata:(id _Nullable)metadata layoutContext:(UAThomasLayoutContext * _Nonnull)layoutContext;
/// Called when the view is dismissed.
/// \param layoutContext The layout context.
///
- (void)onDismissedWithLayoutContext:(UAThomasLayoutContext * _Nullable)layoutContext;
/// Called when the view is dismissed from a button tap.
/// \param buttonIdentifier The  button id.
///
/// \param buttonDescription The button description.
///
/// \param cancel If the view should be cancelled.
///
/// \param layoutContext The layout context.
///
- (void)onDismissedWithButtonIdentifier:(NSString * _Nonnull)buttonIdentifier buttonDescription:(NSString * _Nonnull)buttonDescription cancel:(BOOL)cancel layoutContext:(UAThomasLayoutContext * _Nonnull)layoutContext;
/// Called when a form is dismissed because it timed out.
/// \param layoutContext The layout context.
///
- (void)onTimedOutWithLayoutContext:(UAThomasLayoutContext * _Nullable)layoutContext;
/// Called when a pager page is viewed.
/// \param pagerInfo The pager info.
///
/// \param layoutContext The layout context.
///
- (void)onPageViewedWithPagerInfo:(UAThomasPagerInfo * _Nonnull)pagerInfo layoutContext:(UAThomasLayoutContext * _Nonnull)layoutContext;
/// Called when a pager page has a gesture.
/// \param identifier The pager gesture identifier.
///
/// \param metadata the reporting metadata.
///
/// \param layoutContext The layout context.
///
- (void)onPageGestureWithIdentifier:(NSString * _Nonnull)identifier metadata:(id _Nullable)metadata layoutContext:(UAThomasLayoutContext * _Nonnull)layoutContext;
/// Called when a pager page changed automatically after a delay.
/// \param identifier The automated action identifier.
///
/// \param metadata the reporting metadata.
///
/// \param layoutContext The layout context.
///
- (void)onPageAutomatedActionWithIdentifier:(NSString * _Nonnull)identifier metadata:(id _Nullable)metadata layoutContext:(UAThomasLayoutContext * _Nonnull)layoutContext;
/// Called when a pager page changed due to a swipe.
/// \param from The originated pager info
///
/// \param to The resulting pager info
///
/// \param layoutContext The layout context.
///
- (void)onPageSwipedFrom:(UAThomasPagerInfo * _Nonnull)from to:(UAThomasPagerInfo * _Nonnull)to layoutContext:(UAThomasLayoutContext * _Nonnull)layoutContext;
/// Called when actions should be ran.
/// \param permission The permission.
///
/// \param startingStatus The starting status.
///
/// \param endingStatus The ending status.
///
/// \param layoutContext The layout context.
///
- (void)onPromptPermissionResultWithPermission:(enum UAPermission)permission startingStatus:(enum UAPermissionStatus)startingStatus endingStatus:(enum UAPermissionStatus)endingStatus layoutContext:(UAThomasLayoutContext * _Nonnull)layoutContext;
@end


/// Airship rendering engine extensions.
/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("ThomasExtensions")
@interface UAThomasExtensions : NSObject
- (nonnull instancetype)initWithNativeBridgeExtension:(id <UANativeBridgeExtensionDelegate> _Nullable)nativeBridgeExtension imageProvider:(id <UAImageProvider> _Nullable)imageProvider OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("ThomasFormInfo")
@interface UAThomasFormInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly) BOOL submitted;
@property (nonatomic, readonly, copy) NSString * _Nonnull formType;
@property (nonatomic, readonly, copy) NSString * _Nullable formResponseType;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier submitted:(BOOL)submitted formType:(NSString * _Nonnull)formType formResponseType:(NSString * _Nullable)formResponseType OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("ThomasFormResult")
@interface UAThomasFormResult : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull formData;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier formData:(NSDictionary<NSString *, id> * _Nonnull)formData OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("ThomasLayoutContext")
@interface UAThomasLayoutContext : NSObject
@property (nonatomic, readonly, strong) UAThomasFormInfo * _Nullable formInfo;
@property (nonatomic, readonly, strong) UAThomasPagerInfo * _Nullable pagerInfo;
@property (nonatomic, readonly, strong) UAThomasButtonInfo * _Nullable buttonInfo;
- (nonnull instancetype)initWithFormInfo:(UAThomasFormInfo * _Nullable)formInfo pagerInfo:(UAThomasPagerInfo * _Nullable)pagerInfo buttonInfo:(UAThomasButtonInfo * _Nullable)buttonInfo OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("ThomasPagerInfo")
@interface UAThomasPagerInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly) NSInteger pageIndex;
@property (nonatomic, readonly, copy) NSString * _Nonnull pageIdentifier;
@property (nonatomic, readonly) NSInteger pageCount;
@property (nonatomic, readonly) BOOL completed;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier pageIndex:(NSInteger)pageIndex pageIdentifier:(NSString * _Nonnull)pageIdentifier pageCount:(NSInteger)pageCount completed:(BOOL)completed OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the boundary crossing event type.
typedef SWIFT_ENUM(NSInteger, UABoundaryEvent, open) {
/// Enter event
  UABoundaryEventEnter = 1,
/// Exit event
  UABoundaryEventExit = 2,
};


/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("UACoreData")
@interface UACoreData : NSObject
@property (nonatomic, readonly) BOOL inMemory;
@property (nonatomic, weak) id <UACoreDataDelegate> _Nullable delegate;
- (nonnull instancetype)initWithModelURL:(NSURL * _Nonnull)modelURL inMemory:(BOOL)inMemory stores:(NSArray<NSString *> * _Nonnull)stores;
- (nonnull instancetype)initWithModelURL:(NSURL * _Nonnull)modelURL inMemory:(BOOL)inMemory stores:(NSArray<NSString *> * _Nonnull)stores mergePolicy:(id _Nullable)mergePolicy;
- (void)safePerformBlock:(void (^ _Nonnull)(BOOL, NSManagedObjectContext * _Nonnull))block;
- (void)safePerformBlockAndWait:(void (^ _Nonnull)(BOOL, NSManagedObjectContext * _Nonnull))block;
- (void)performBlockIfStoresExist:(void (^ _Nonnull)(BOOL, NSManagedObjectContext * _Nonnull))block;
- (void)shutDown;
- (void)waitForIdle;
+ (BOOL)safeSave:(NSManagedObjectContext * _Nullable)context;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("UADispatcher")
@interface UADispatcher : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UADispatcher * _Nonnull main;)
+ (UADispatcher * _Nonnull)main SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UADispatcher * _Nonnull sharedSerialUtility;)
+ (UADispatcher * _Nonnull)sharedSerialUtility SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UADispatcher * _Nonnull global;)
+ (UADispatcher * _Nonnull)global SWIFT_WARN_UNUSED_RESULT;
+ (UADispatcher * _Nonnull)serial SWIFT_WARN_UNUSED_RESULT;
+ (UADispatcher * _Nonnull)serialUtility SWIFT_WARN_UNUSED_RESULT;
- (void)dispatchSync:(void (^ _Nonnull)(void))block;
- (void)doSync:(void (^ _Nonnull)(void))block;
- (void)dispatchAsyncIfNecessary:(void (^ _Nonnull)(void))block;
- (void)dispatchAsync:(void (^ _Nonnull)(void))block;
- (UADisposable * _Nonnull)dispatchAfter:(NSTimeInterval)delay timebase:(enum UADispatcherTimeBase)timebase block:(void (^ _Nonnull)(void))block;
- (UADisposable * _Nonnull)dispatchAfter:(NSTimeInterval)delay block:(void (^ _Nonnull)(void))block;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP11AirshipCore20UANavigationDelegate_")
@protocol UANavigationDelegate <WKNavigationDelegate>
@optional
- (void)closeWindow:(BOOL)animated;
@end





@interface UIImage (SWIFT_EXTENSION(AirshipCore))
/// Image factory method that supports animated data.
/// \param data The data. 
///
/// \param fillIn If the images should be expanded to fill in the frames for smoother animations in UIKit.
///
///
/// returns:
/// The animated image if it is a gif, otherwise the still frame will be loaded.
+ (UIImage * _Nullable)fancyImageWithData:(NSData * _Nullable)data fillIn:(BOOL)fillIn SWIFT_WARN_UNUSED_RESULT;
/// Image factory method that supports animated data.
/// \param data The data. 
///
///
/// returns:
/// The animated image if it is a gif, otherwise the still frame will be loaded.
+ (UIImage * _Nullable)fancyImageWithData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end






/// NOTE: For internal use only. :nodoc:
SWIFT_PROTOCOL_NAMED("URLAllowListProtocol")
@protocol UAURLAllowListProtocol
- (BOOL)isAllowed:(NSURL * _Nullable)url SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAllowed:(NSURL * _Nullable)url scope:(UAURLAllowListScope)scope SWIFT_WARN_UNUSED_RESULT;
- (BOOL)addEntry:(NSString * _Nonnull)patternString scope:(UAURLAllowListScope)scope;
- (BOOL)addEntry:(NSString * _Nonnull)patternString;
@end

@protocol UAURLAllowListDelegate;

/// Class for accepting and verifying webview URLs.
/// URL allow list entries are written as URL patterns with optional wildcard matching:
/// \code
/// <scheme> := <any char combination, '*' are treated as wildcards>
///
/// <host> := '*' | '*.'<any char combination except '/' and '*'> | <any char combination except '/' and '*'>
///
/// <path> := <any char combination, '*' are treated as wildcards>
///
/// <pattern> := '*' | <scheme>://<host>/<path> | <scheme>://<host> | <scheme>:/<path> | <scheme>:///<path>
///
/// \endcodeA single wildcard will match any URI.
/// Wildcards in the scheme pattern will match any characters, and a single wildcard in the scheme will match any scheme.
/// The wildcard in a host pattern <code>"*.mydomain.com"</code> will match anything within the mydomain.com domain.
/// Wildcards in the path pattern will match any characters, including subdirectories.
/// Note that NSURL does not support internationalized domains containing non-ASCII characters.
/// All URL allow list entries for internationalized domains must be in ASCII IDNA format as
/// specified in https://tools.ietf.org/html/rfc3490
SWIFT_CLASS_NAMED("URLAllowList")
@interface UAURLAllowList : NSObject <UAURLAllowListProtocol>
/// Create a default URL allow list with entries specified in a config object.
/// note:
/// The entry “*.urbanairship.com” is added by default.
/// \param config An instance of UARuntimeConfig.
///
///
/// returns:
/// An instance of UAURLAllowList
+ (UAURLAllowList * _Nonnull)allowListWithConfig:(UARuntimeConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
/// The URL allow list delegate.
/// note:
/// The delegate is not retained.
@property (nonatomic, weak) id <UAURLAllowListDelegate> _Nullable delegate;
/// Add an entry to the URL allow list, with the implicit scope <code>URLAllowListScope.all</code>.
/// \param patternString A URL allow list pattern string.
///
///
/// returns:
/// <code>true</code> if the URL allow list pattern was validated and added, <code>false</code> otherwise.
- (BOOL)addEntry:(NSString * _Nonnull)patternString;
/// Add an entry to the URL allow list.
/// \param patternString A URL allow list pattern string.
///
/// \param scope The scope of the pattern.
///
///
/// returns:
/// <code>true</code> if the URL allow list pattern was validated and added, <code>false</code> otherwise.
- (BOOL)addEntry:(NSString * _Nonnull)patternString scope:(UAURLAllowListScope)scope;
/// Determines whether a given URL is allowed, with the implicit scope <code>URLAllowListScope.all</code>.
/// \param url The URL under consideration.
///
///
/// returns:
/// <code>true</code> if the URL is allowed, <code>false</code> otherwise.
- (BOOL)isAllowed:(NSURL * _Nullable)url SWIFT_WARN_UNUSED_RESULT;
/// Determines whether a given URL is allowed.
/// \param url The URL under consideration.
///
/// \param scope The scope of the desired match.
///
///
/// returns:
/// <code>true</code> if the URL is allowed, <code>false</code> otherwise.
- (BOOL)isAllowed:(NSURL * _Nullable)url scope:(UAURLAllowListScope)scope SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Delegate protocol for accepting and rejecting URLs.
SWIFT_PROTOCOL_NAMED("URLAllowListDelegate")
@protocol UAURLAllowListDelegate
/// Called when a URL has been allowed by the SDK, but before the URL is fetched.
/// \param url The URL allowed by the SDK.
///
/// \param scope The scope of the desired match.
///
///
/// returns:
/// <code>true</code> to accept this URL, <code>false</code>  to reject this URL.
- (BOOL)allowURL:(NSURL * _Nonnull)url scope:(UAURLAllowListScope)scope SWIFT_WARN_UNUSED_RESULT;
@end


enum UAURLInfoURLType : NSInteger;

/// Url Info
/// note:
/// for internal use only.  :nodoc:
SWIFT_CLASS_NAMED("URLInfo")
@interface UAURLInfo : NSObject
@property (nonatomic, readonly) enum UAURLInfoURLType urlType;
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
- (nonnull instancetype)initWithUrlType:(enum UAURLInfoURLType)urlType url:(NSString * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, UAURLInfoURLType, "URLType", open) {
  UAURLInfoURLTypeWeb = 0,
  UAURLInfoURLTypeVideo = 1,
  UAURLInfoURLTypeImage = 2,
};


typedef SWIFT_ENUM(NSInteger, UrlTypes, open) {
  UrlTypesImage = 0,
  UrlTypesVideo = 1,
  UrlTypesWeb = 2,
};


/// Version matcher.
SWIFT_CLASS_NAMED("VersionMatcher")
@interface UAVersionMatcher : NSObject
/// NOTE: For internal use only. :nodoc:
- (nullable instancetype)initWithVersionConstraint:(NSString * _Nonnull)versionConstraint OBJC_DESIGNATED_INITIALIZER;
/// Create a matcher for the supplied version constraint
/// \param versionConstraint constraint that matches one of our supported patterns
///
///
/// returns:
/// matcher or nil if versionConstraint does not match any of the expected patterns
+ (UAVersionMatcher * _Nullable)matcherWithVersionConstraint:(NSString * _Nonnull)versionConstraint SWIFT_WARN_UNUSED_RESULT;
/// Evaluates the object with the matcher.
/// \param value The object to evaluate.
///
///
/// returns:
/// true if the matcher matches the object, otherwise false.
- (BOOL)evaluateObject:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Check if versionConstraint matches the “exact version” pattern
/// \param versionConstraint constraint string
///
///
/// returns:
/// true if versionConstraint matches the “exact version” pattern
+ (BOOL)isExactVersion:(NSString * _Nonnull)versionConstraint SWIFT_WARN_UNUSED_RESULT;
/// Check if versionConstraint matches the “sub version” pattern
/// \param versionConstraint constraint string
///
///
/// returns:
/// true if versionConstraint matches the “sub version” pattern
+ (BOOL)isSubVersion:(NSString * _Nonnull)versionConstraint SWIFT_WARN_UNUSED_RESULT;
/// Check if versionConstraint matches the “version range” pattern
/// \param versionConstraint constraint string
///
///
/// returns:
/// true if versionConstraint matches the “version range” pattern
+ (BOOL)isVersionRange:(NSString * _Nonnull)versionConstraint SWIFT_WARN_UNUSED_RESULT;
/// note:
/// For internal use only. :nodoc:
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// note:
/// For internal use only. :nodoc:
SWIFT_CLASS_NAMED("ViewUtils")
@interface UAViewUtils : NSObject
+ (void)applyContainerConstraintsToContainer:(UIView * _Nullable)container containedView:(UIView * _Nullable)contained;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSURLRequest;
@class WKWebViewConfiguration;

SWIFT_CLASS_NAMED("WebView") SWIFT_AVAILABILITY(tvos,unavailable)
@interface UAWebView : WKWebView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (WKNavigation * _Nullable)loadRequest:(NSURLRequest * _Nonnull)request;
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("_AutomationAudienceOverrides")
@interface UAAutomationAudienceOverrides : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSDictionary<NSString *, NSArray<NSString *> *> *> * _Nullable tagsPayload;
@property (nonatomic, readonly, copy) NSArray<NSDictionary<NSString *, id> *> * _Nullable attributesPayload;
- (nonnull instancetype)initWithTagsPayload:(NSDictionary<NSString *, NSDictionary<NSString *, NSArray<NSString *> *> *> * _Nullable)tagsPayload attributesPayload:(NSArray<NSDictionary<NSString *, id> *> * _Nullable)attributesPayload OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_AutomationAudienceOverridesProvider")
@interface UAAutomationAudienceOverridesProvider : NSObject
- (void)audienceOverridesWithChannelID:(NSString * _Nonnull)channelID completionHandler:(void (^ _Nonnull)(UAAutomationAudienceOverrides * _Nonnull))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_RemoteDataAutomationAccess")
@interface UARemoteDataAutomationAccess : NSObject
- (UADisposable * _Nonnull)subscribeWithTypes:(NSArray<NSString *> * _Nonnull)types block:(void (^ _Nonnull)(NSArray<UARemoteDataPayload *> * _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
- (void)isCurrentWithRemoteDataInfo:(UARemoteDataInfo * _Nullable)remoteDataInfo completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)requiresUpdateWithRemoteDataInfo:(UARemoteDataInfo * _Nullable)remoteDataInfo completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)waitFullRefreshWithRemoteDataInfo:(UARemoteDataInfo * _Nullable)remoteDataInfo completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (void)bestEffortRefreshWithRemoteDataInfo:(UARemoteDataInfo * _Nullable)remoteDataInfo completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)notifyOutdatedWithRemoteDataInfo:(UARemoteDataInfo * _Nullable)remoteDataInfo completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
